var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Algorithm.html",[0,1.462,1,2.081]],["body/entities/Algorithm.html",[0,2.231,1,3.177,2,2.331,3,0.128,4,0.11,5,0.128,6,4.043,7,0.433,8,1.372,9,1.898,10,1.97,11,5.24,12,0.75,13,0.014,14,1.163,15,2.332,16,3.349,17,1.141,18,4.653,19,3.342,20,3.548,21,4.653,22,1.647,23,3.102,24,5.243,25,4.653,26,4.043,27,3.642,28,4.808,29,4.653,30,0.213,31,3.525,32,4.022,33,2.583,34,1.592,35,3.642,36,0.146,37,0.008,38,4.043,39,2.732,40,2.45,41,3.642,42,0.01,43,0.01]],["title/classes/AlgorithmsRepository.html",[37,0.007,44,2.838]],["body/classes/AlgorithmsRepository.html",[1,3.113,3,0.162,4,0.139,5,0.162,13,0.014,30,0.247,34,2.022,36,0.185,37,0.01,42,0.012,43,0.012,44,5.027,45,2.022,46,5.137,47,1.844,48,3.735,49,4.627]],["title/controllers/AppController.html",[50,2.321,51,2.838]],["body/controllers/AppController.html",[3,0.151,4,0.13,5,0.151,7,0.511,13,0.014,14,1.035,15,1.808,17,0.884,30,0.236,36,0.172,37,0.01,42,0.012,43,0.012,50,3.932,51,4.81,52,3.225,53,4.773,54,2.123,55,6.536,56,5.492,57,1.741,58,1.249,59,4.507,60,4.773,61,3.945,62,4.299,63,1.741,64,5.492]],["title/modules/AppModule.html",[65,1.521,66,2.838]],["body/modules/AppModule.html",[2,1.673,3,0.092,4,0.079,5,0.092,12,0.327,13,0.015,20,2.822,22,1.053,30,0.278,36,0.105,37,0.006,42,0.008,43,0.008,51,4.046,52,2.823,58,0.759,59,4.243,60,2.903,65,1.851,66,5.75,67,1.595,68,2.296,69,2.903,70,2.903,71,2.903,72,4.534,73,4.243,74,4.243,75,4.534,76,3.993,77,4.243,78,3.993,79,3.993,80,2.532,81,1.235,82,1.673,83,3.34,84,2.669,85,3.515,86,4.808,87,3.618,88,1.854,89,2.227,90,1.673,91,4.178,92,3.34,93,3.34,94,2.408,95,3.34,96,0.977,97,3.34,98,3.34,99,3.34,100,3.34,101,3.34,102,3.34,103,3.34,104,3.34,105,3.34,106,1.363,107,3.34,108,3.34,109,3.34,110,3.34,111,3.34,112,3.34,113,3.34,114,3.34,115,3.34,116,3.34,117,3.34,118,3.34,119,3.34,120,3.34,121,3.34,122,3.34,123,3.34,124,3.34,125,1.286,126,3.34,127,2.399,128,3.34,129,2.227,130,3.34,131,1.961,132,3.34,133,1.235,134,3.34,135,2.227,136,3.34,137,3.34,138,3.34]],["title/injectables/AppService.html",[59,2.466,139,0.689]],["body/injectables/AppService.html",[3,0.156,4,0.134,5,0.156,7,0.529,13,0.014,14,1.058,17,0.917,30,0.201,36,0.178,37,0.01,42,0.012,43,0.012,54,2.17,55,6.616,57,1.805,58,1.295,59,4.27,63,1.805,139,1.193,140,1.948,141,4.948,142,5.694,143,5.694,144,5.694]],["title/controllers/AuthController.html",[50,2.321,145,2.838]],["body/controllers/AuthController.html",[3,0.053,4,0.046,5,0.053,7,0.181,10,1.611,12,0.5,13,0.015,14,1.125,15,1.803,17,0.882,20,2.742,30,0.246,36,0.061,37,0.003,42,0.006,43,0.006,50,1.145,52,1.145,54,1.007,57,1.736,58,0.443,63,1.736,87,2.361,88,1.082,94,2.892,96,1.224,125,2.777,133,2.303,145,2.282,146,1.694,147,1.694,148,1.95,149,4.021,150,3.494,151,3.494,152,3.494,153,2.761,154,1.95,155,3.177,156,3.177,157,1.95,158,1.95,159,1.873,160,1.873,161,5.128,162,3.015,163,1.694,164,6.322,165,1.95,166,1.95,167,1.866,168,1.95,169,1.95,170,2.232,171,1.95,172,2.118,173,1.95,174,3.996,175,1.95,176,1.95,177,1.95,178,1.95,179,1.95,180,1.95,181,3.33,182,1.95,183,4.021,184,1.95,185,3.494,186,1.694,187,1.694,188,1.95,189,4.285,190,4.637,191,1.694,192,1.95,193,1.95,194,1.95,195,1.694,196,4.437,197,1.4,198,0.721,199,2.361,200,1.526,201,1.4,202,1.95,203,1.145,204,1.145,205,1.217,206,2.761,207,1.4,208,1.526,209,1.526,210,1.4,211,1.526,212,1.526,213,1.526,214,1.95,215,1.526,216,1.526,217,1.526,218,1.526,219,3.177,220,1.526,221,1.526,222,1.526,223,1.526,224,1.526,225,1.526,226,1.526,227,1.95,228,1.526,229,1.526,230,1.526,231,1.526,232,1.95,233,1.95,234,0.931,235,1.764,236,1.95,237,1.95,238,1.95,239,1.95,240,3.177,241,1.95,242,2.397,243,2.326,244,2.438,245,1.95,246,1.637,247,2.558,248,1.95,249,1.95,250,1.95,251,1.95,252,1.95,253,3.177,254,1.95,255,3.629,256,3.177,257,4.021,258,4.021,259,3.177,260,2.761,261,4.021,262,3.177,263,3.177,264,3.177,265,3.177,266,2.761,267,4.029,268,2.761,269,2.761,270,1.95,271,1.95,272,1.95,273,3.177,274,1.95,275,2.574,276,2.761,277,0.901,278,0.935,279,1.95,280,1.95,281,1.95,282,1.694,283,1.694,284,1.95,285,1.95,286,2.761,287,1.95,288,1.95,289,1.95,290,1.95,291,1.95,292,1.95,293,1.95,294,1.95,295,1.526,296,1.95,297,1.95,298,1.95,299,1.95,300,1.95,301,1.95,302,1.95,303,1.95,304,1.95,305,1.95,306,1.95]],["title/modules/AuthModule.html",[65,1.521,72,2.635]],["body/modules/AuthModule.html",[3,0.108,4,0.093,5,0.108,13,0.015,30,0.279,36,0.123,37,0.007,42,0.009,43,0.009,52,3.167,58,0.894,65,2.076,67,1.879,68,2.576,72,5.367,77,4.471,78,4.208,80,2.84,81,1.995,82,1.97,84,2.994,85,3.365,89,2.623,90,1.97,94,1.97,145,4.421,199,4.208,200,3.079,205,3.365,307,3.418,308,3.418,309,3.934,310,4.778,311,4.778,312,4.778,313,4.778,314,3.934,315,5.394,316,3.079,317,5.394,318,1.879,319,3.934,320,3.418,321,3.934,322,2.184,323,3.934,324,3.934,325,3.934,326,3.934,327,3.079,328,3.365,329,3.079,330,3.934]],["title/injectables/AuthService.html",[139,0.689,199,2.321]],["body/injectables/AuthService.html",[3,0.044,4,0.038,5,0.044,7,0.15,9,0.997,10,1.705,12,0.604,13,0.015,14,1.149,17,0.933,30,0.217,36,0.05,37,0.003,42,0.005,43,0.005,54,0.861,57,1.766,58,0.367,63,1.837,79,3.114,81,0.596,82,0.808,87,3.114,88,0.895,90,0.808,94,3.159,96,1.511,125,2.738,133,2.06,135,1.075,139,0.473,140,0.552,150,2.359,151,3.055,152,2.359,153,3.055,159,1.983,160,1.983,162,3.283,163,2.359,167,3.849,170,0.895,198,0.596,199,1.594,201,1.158,209,1.262,210,1.158,234,1.296,235,2.554,242,2.886,243,1.983,244,3.448,246,1.504,247,2.657,255,2.125,266,1.401,267,2.359,268,1.401,269,1.401,275,2.768,277,1.169,278,1.213,295,2.125,316,1.262,327,1.262,328,3.309,329,1.262,331,1.401,332,2.715,333,2.715,334,3.516,335,1.612,336,2.768,337,5.304,338,1.612,339,2.715,340,1.612,341,2.715,342,1.612,343,1.612,344,1.612,345,1.612,346,1.612,347,3.516,348,3.516,349,1.612,350,2.715,351,1.612,352,1.612,353,1.507,354,1.612,355,1.612,356,3.516,357,1.612,358,3.602,359,1.158,360,2.125,361,1.612,362,1.262,363,1.612,364,3.999,365,1.612,366,2.715,367,3.516,368,3.516,369,3.516,370,3.516,371,3.055,372,3.516,373,3.516,374,3.516,375,2.359,376,2.066,377,2.127,378,1.612,379,1.401,380,2.125,381,5.57,382,4.124,383,4.124,384,1.612,385,1.612,386,1.612,387,1.612,388,1.612,389,1.612,390,1.612,391,3.516,392,3.516,393,4.987,394,1.612,395,3.516,396,1.612,397,3.516,398,1.612,399,2.715,400,1.612,401,1.612,402,1.612,403,1.401,404,1.612,405,1.612,406,1.612,407,1.612,408,4.987,409,1.612,410,1.612,411,1.612,412,2.715,413,2.715,414,2.359,415,1.612,416,1.612,417,1.612,418,1.612,419,1.401,420,2.715,421,2.125,422,1.612,423,1.612,424,1.612,425,1.612,426,1.612,427,2.715,428,1.612,429,3.516,430,2.715,431,1.401,432,2.359,433,1.401,434,1.612,435,1.401,436,1.612,437,2.715,438,1.612,439,1.612,440,2.715,441,1.612,442,1.401,443,1.612,444,1.612,445,1.612,446,1.612,447,1.401,448,1.612,449,1.612,450,1.612,451,1.262,452,1.075,453,1.612,454,1.612]],["title/entities/BaseCaseColumn.html",[0,1.462,455,1.98]],["body/entities/BaseCaseColumn.html",[0,2.011,2,1.993,3,0.109,4,0.094,5,0.109,7,0.37,8,1.236,9,1.756,10,1.822,12,0.745,13,0.014,14,1.159,15,2.368,16,3.018,17,1.158,19,2.858,20,3.333,22,1.665,23,2.653,26,4.724,27,4.255,28,4.447,30,0.218,31,3.504,32,3.625,33,2.209,34,1.361,35,3.115,36,0.125,37,0.007,38,4.724,39,2.337,40,2.096,41,3.115,42,0.009,43,0.009,455,2.723,456,5.287,457,3.687,458,3.458,459,5.381,460,5.381,461,3.98,462,2.66,463,5.437,464,3.98,465,3.98,466,2.483,467,5.437,468,3.98,469,3.98,470,3.98,471,3.392,472,3.98,473,2.858,474,3.458,475,3.458,476,3.458,477,3.115]],["title/classes/BaseCaseColumns.html",[37,0.007,478,2.838]],["body/classes/BaseCaseColumns.html",[3,0.16,4,0.137,5,0.16,13,0.014,30,0.245,34,1.995,36,0.182,37,0.01,42,0.012,43,0.012,45,1.995,47,1.829,48,3.713,455,2.92,457,3.477,478,4.986,479,5.067,480,5.067,481,4.563,482,3.424]],["title/entities/Connection.html",[0,1.462,106,1.121]],["body/entities/Connection.html",[0,1.949,2,1.904,3,0.104,4,0.09,5,0.104,7,0.354,8,1.198,9,1.714,11,4.732,12,0.747,13,0.014,14,1.2,15,2.509,16,2.925,17,1.227,20,2.639,22,1.554,23,2.535,30,0.213,31,4.144,32,3.513,33,2.111,34,1.301,36,0.119,37,0.007,40,3.437,42,0.009,43,0.009,96,1.53,106,1.494,127,4.342,129,4.031,131,3.55,133,2.236,135,4.031,198,1.406,466,2.372,471,3.287,483,3.304,484,6.046,485,4.732,486,2.731,487,3.802,488,3.802,489,3.802,490,3.802,491,3.802,492,3.802,493,4.578,494,3.802,495,3.802,496,5.269,497,3.802,498,3.802,499,2.731,500,2.535]],["title/modules/ConnectionModule.html",[65,1.521,73,2.466]],["body/modules/ConnectionModule.html",[3,0.125,4,0.108,5,0.125,13,0.014,30,0.269,36,0.143,37,0.008,42,0.01,43,0.01,58,1.041,65,2.298,67,2.186,68,2.851,73,5.014,74,4.671,76,4.396,78,4.396,80,3.143,81,1.693,82,2.293,84,3.314,85,3.724,89,3.052,90,2.293,106,1.298,320,3.978,501,3.978,502,3.978,503,3.978,504,4.578,505,4.988,506,4.578,507,3.98,508,4.578,509,3.978,510,3.583,511,4.578,512,4.578]],["title/interfaces/ConnectionOptions.html",[513,1.163,514,2.466]],["body/interfaces/ConnectionOptions.html",[3,0.136,4,0.117,5,0.136,7,0.463,8,1.432,9,2.06,12,0.762,13,0.014,14,1.275,36,0.156,40,3.64,42,0.011,43,0.011,127,5.218,129,4.844,131,4.266,133,2.687,135,4.844,485,5.686,513,1.465,514,3.931,515,2.271,516,3.576,517,4.327]],["title/injectables/ConnectionService.html",[139,0.689,505,2.466]],["body/injectables/ConnectionService.html",[3,0.052,4,0.044,5,0.052,7,0.175,9,1.421,10,1.746,12,0.62,13,0.015,14,1.161,17,0.956,22,0.412,30,0.217,34,0.643,36,0.059,37,0.003,42,0.005,43,0.005,48,2.273,54,0.978,57,1.803,58,0.428,63,2.097,90,0.942,96,1.018,106,2.181,125,2.823,139,0.538,140,0.643,159,2.031,160,2.031,162,3.425,234,1.473,235,2.519,242,2.803,243,2.031,244,3.35,246,1.965,247,2.273,275,2.519,277,0.533,336,3.156,353,1.713,359,1.351,362,1.472,364,1.635,376,0.942,377,0.754,380,1.472,421,1.472,505,1.925,510,1.472,514,1.174,518,1.635,519,3.923,520,3.923,521,3.085,522,3.923,523,3.923,524,3.409,525,3.07,526,1.881,527,3.358,528,2.817,529,3.923,530,2.665,531,1.881,532,1.881,533,2.28,534,5.01,535,1.881,536,1.881,537,1.64,538,1.881,539,3.409,540,3.085,541,1.881,542,1.881,543,2.366,544,2.394,545,1.881,546,1.881,547,4.538,548,1.881,549,1.881,550,1.881,551,1.881,552,1.881,553,2.681,554,1.881,555,0.821,556,0.754,557,0.754,558,0.754,559,1.472,560,1.635,561,1.472,562,1.881,563,1.881,564,1.881,565,1.472,566,1.881,567,1.881,568,1.881,569,3.085,570,1.881,571,1.881,572,1.881,573,1.881,574,1.881,575,1.881,576,1.881,577,5.01,578,5.01,579,5.01,580,5.01,581,5.383,582,1.881,583,3.085,584,3.923,585,3.923,586,1.881,587,1.174,588,3.085,589,1.881,590,1.881,591,1.881,592,1.881,593,4.538,594,0.898,595,1.881,596,0.898,597,1.881,598,1.881,599,1.881,600,2.186,601,1.881,602,1.812,603,1.881,604,1.881,605,1.881,606,1.881,607,1.881]],["title/classes/ConnectionsRepository.html",[37,0.007,528,2.838]],["body/classes/ConnectionsRepository.html",[3,0.162,4,0.139,5,0.162,13,0.014,30,0.247,34,2.022,36,0.185,37,0.01,42,0.012,43,0.012,45,2.022,47,1.844,48,3.735,106,1.676,510,4.627,528,5.027,608,5.137]],["title/classes/CreateConnectionOptionsDto.html",[37,0.007,609,2.838]],["body/classes/CreateConnectionOptionsDto.html",[3,0.124,4,0.107,5,0.124,7,0.42,8,1.345,12,0.731,13,0.014,14,1.217,15,2.456,17,1.201,30,0.159,36,0.141,37,0.01,40,3.116,42,0.01,43,0.01,45,1.545,106,2.155,127,4.74,129,4.4,131,3.875,133,2.441,135,4.4,485,5.166,609,4.25,610,6.605,611,3.926,612,4.401,613,4.517,614,4.517,615,4.517,616,4.517,617,6.6,618,4.517,619,4.517,620,2.061]],["title/interfaces/CreateNewConnectionResponse.html",[513,1.163,621,1.652]],["body/interfaces/CreateNewConnectionResponse.html",[3,0.114,4,0.098,5,0.114,7,0.387,8,1.275,9,1.181,12,0.665,13,0.015,14,1.248,22,0.912,30,0.223,36,0.243,42,0.01,43,0.01,47,1.097,96,1.14,106,1.923,198,1.54,243,2.421,246,1.59,277,1.59,278,1.65,353,3.112,462,1.54,513,2.282,515,1.9,533,1.67,537,2.344,543,1.603,544,1.481,555,1.817,556,1.67,557,1.67,558,1.67,594,1.989,596,1.989,600,2.766,621,2.65,622,1.989,623,2.677,624,1.9,625,1.817,626,1.817,627,1.741,628,2.086,629,1.9,630,2.344,631,1.741,632,1.741,633,1.67,634,1.67]],["title/interfaces/CreateNewConnectionResponseWithError.html",[513,1.163,555,1.725]],["body/interfaces/CreateNewConnectionResponseWithError.html",[3,0.114,4,0.098,5,0.114,7,0.385,8,1.27,9,1.175,12,0.663,13,0.015,14,1.248,22,0.908,30,0.223,36,0.242,42,0.01,43,0.01,47,1.472,96,1.136,106,1.919,198,1.533,243,1.912,246,2.003,277,1.584,278,1.644,353,3.102,462,1.533,513,2.28,515,1.89,533,1.662,537,2.336,543,1.595,544,1.474,555,2.439,556,1.662,557,1.662,558,1.662,594,1.979,596,1.979,600,2.759,621,2.643,622,1.979,623,2.669,624,1.89,625,1.809,626,1.809,627,1.733,628,2.076,629,1.89,630,2.336,631,1.733,632,1.733,633,1.662,634,1.662]],["title/classes/CreateUserDto.html",[37,0.007,181,2.838]],["body/classes/CreateUserDto.html",[3,0.124,4,0.107,5,0.124,7,0.421,8,1.348,12,0.581,13,0.014,14,1.084,15,1.952,17,0.955,30,0.209,36,0.142,37,0.01,42,0.01,43,0.01,45,1.549,133,2.912,167,4.273,181,4.258,565,5.953,612,3.291,620,2.066,635,5.743,636,3.936,637,6.609,638,5.487,639,4.53,640,4.53,641,4.53,642,7.011,643,6.609,644,5.928,645,5.928,646,5.928,647,4.53,648,7.011,649,4.64,650,5.928,651,4.53,652,4.53,653,4.53,654,2.66,655,3.253,656,4.53,657,4.53]],["title/interfaces/DatabaseInstance.html",[513,1.163,626,1.725]],["body/interfaces/DatabaseInstance.html",[3,0.112,4,0.097,5,0.112,7,0.381,8,1.26,9,1.161,12,0.69,13,0.015,14,1.246,22,0.897,30,0.221,36,0.242,42,0.01,43,0.01,47,1.079,96,1.127,106,1.909,198,1.514,243,2.407,246,1.995,277,1.572,278,1.631,353,3.077,462,1.514,513,2.275,515,1.868,533,1.642,537,2.317,543,1.576,544,1.456,555,1.787,556,1.642,557,1.642,558,1.642,594,1.955,596,1.955,600,2.742,621,2.317,622,1.955,623,3.216,624,1.868,625,1.787,626,2.419,627,1.712,628,2.051,629,1.868,630,2.317,631,1.712,632,1.712,633,1.642,634,1.642]],["title/modules/DatabaseModule.html",[65,1.521,74,2.466]],["body/modules/DatabaseModule.html",[3,0.147,4,0.127,5,0.147,13,0.014,30,0.233,36,0.168,37,0.009,42,0.011,43,0.011,58,1.221,65,2.543,67,2.565,68,3.155,74,4.931,80,3.478,81,1.987,82,2.69,84,3.667,507,4.404,527,5.097,658,4.668,659,4.668,660,4.668,661,5.371,662,5.371]],["title/injectables/DatabaseService.html",[139,0.689,527,2.466]],["body/injectables/DatabaseService.html",[3,0.125,4,0.107,5,0.125,7,0.423,10,1.34,12,0.446,13,0.015,17,0.733,30,0.248,36,0.143,37,0.008,42,0.01,43,0.01,54,1.886,57,1.444,58,1.035,63,1.886,96,0.926,106,1.291,125,2.55,129,3.966,131,3.493,139,1.037,140,1.558,159,1.558,160,1.558,162,2.98,242,2.29,243,2.035,244,2.175,246,1.687,247,2.98,255,4.656,277,1.291,278,1.34,377,1.826,514,2.841,516,3.27,527,3.711,537,2.77,559,3.564,561,3.564,623,3.355,624,2.077,626,1.987,634,2.657,663,3.957,664,6.626,665,4.554,666,4.554,667,4.554,668,3.957,669,4.554,670,3.957,671,3.036,672,4.554,673,4.554]],["title/classes/GetProblemSourceTablesDto.html",[37,0.007,674,2.838]],["body/classes/GetProblemSourceTablesDto.html",[3,0.154,4,0.172,5,0.154,7,0.522,8,1.544,12,0.551,13,0.014,14,1.05,15,1.85,17,0.905,22,1.487,30,0.198,36,0.176,37,0.012,42,0.012,43,0.012,45,1.922,544,2.595,612,4.05,620,2.563,674,4.877,675,5.9,676,4.883,677,5.619]],["title/classes/IsValidPassword.html",[37,0.007,655,2.838]],["body/classes/IsValidPassword.html",[3,0.118,4,0.102,5,0.118,7,0.534,10,1.9,12,0.563,13,0.014,14,0.999,17,0.926,30,0.152,36,0.135,37,0.01,42,0.01,43,0.01,45,1.479,54,1.822,57,1.822,63,2.182,125,1.664,133,2.546,159,1.966,160,1.966,242,2.486,247,2.165,457,2.879,587,2.697,620,1.972,630,1.807,638,5.055,654,3.375,655,4.638,678,5.612,679,3.383,680,4.995,681,6.458,682,5.748,683,5.748,684,7.52,685,4.323,686,6.883,687,5.748,688,4.323,689,4.323,690,5.748,691,4.323,692,4.323,693,3.756,694,6.883,695,4.323,696,4.323,697,4.323,698,4.323,699,5.748,700,4.323,701,4.323,702,5.748,703,4.323,704,4.323,705,4.323,706,4.323]],["title/injectables/JwtAuthGuard.html",[139,0.689,707,2.321]],["body/injectables/JwtAuthGuard.html",[3,0.216,4,0.095,5,0.111,7,0.375,10,1.188,12,0.396,13,0.014,17,0.65,30,0.193,36,0.21,37,0.012,42,0.01,43,0.01,47,1.763,54,1.74,57,1.28,58,0.918,63,2.122,81,1.493,96,1.567,133,1.493,139,1.221,140,1.381,159,1.381,160,1.381,170,2.24,203,2.37,204,2.37,242,1.554,246,1.144,277,1.144,278,1.188,318,1.927,322,2.24,376,2.022,377,1.618,671,2.691,707,3.223,708,2.89,709,2.37,710,3.942,711,5.029,712,5.537,713,5.14,714,4.036,715,3.425,716,3.66,717,2.518,718,3.66,719,2.518,720,2.518,721,4.808,722,4.808,723,4.48]],["title/injectables/JwtBaseAuthGuard.html",[139,0.689,720,2.466]],["body/injectables/JwtBaseAuthGuard.html",[3,0.216,4,0.095,5,0.111,7,0.375,10,1.188,12,0.396,13,0.014,17,0.65,30,0.193,36,0.21,37,0.012,42,0.01,43,0.01,47,1.763,54,1.74,57,1.28,58,0.918,63,2.122,81,1.493,96,1.567,133,1.493,139,1.221,140,1.381,159,1.381,160,1.381,170,2.24,203,2.37,204,2.37,242,1.554,246,1.144,277,1.144,278,1.188,318,1.927,322,2.24,376,2.022,377,1.618,671,2.691,707,2.37,708,2.89,709,2.37,710,3.942,711,5.029,712,5.537,713,5.14,715,3.425,716,3.66,717,2.518,718,3.66,719,2.518,720,3.425,721,4.808,722,4.808,723,4.48,724,4.036]],["title/injectables/JwtRefreshAuthGuard.html",[139,0.689,203,2.321]],["body/injectables/JwtRefreshAuthGuard.html",[3,0.216,4,0.095,5,0.111,7,0.375,10,1.188,12,0.396,13,0.014,17,0.65,30,0.193,36,0.21,37,0.012,42,0.01,43,0.01,47,1.763,54,1.74,57,1.28,58,0.918,63,2.122,81,1.493,96,1.567,133,1.493,139,1.221,140,1.381,159,1.381,160,1.381,170,2.24,203,3.223,204,2.37,242,1.554,246,1.144,277,1.144,278,1.188,318,1.927,322,2.24,376,2.022,377,1.618,671,2.691,707,2.37,708,2.89,709,2.37,710,3.942,711,5.029,712,5.537,713,5.14,715,3.425,716,3.66,717,2.518,718,3.66,719,2.518,720,2.518,721,4.808,722,4.808,723,4.48,725,4.036]],["title/injectables/JwtResetAuthGuard.html",[139,0.689,204,2.321]],["body/injectables/JwtResetAuthGuard.html",[3,0.216,4,0.095,5,0.111,7,0.375,10,1.188,12,0.396,13,0.014,17,0.65,30,0.193,36,0.21,37,0.012,42,0.01,43,0.01,47,1.763,54,1.74,57,1.28,58,0.918,63,2.122,81,1.493,96,1.567,133,1.493,139,1.221,140,1.381,159,1.381,160,1.381,170,2.24,203,2.37,204,3.223,242,1.554,246,1.144,277,1.144,278,1.188,318,1.927,322,2.24,376,2.022,377,1.618,671,2.691,707,2.37,708,2.89,709,2.37,710,3.942,711,5.029,712,5.537,713,5.14,715,3.425,716,3.66,717,2.518,718,3.66,719,2.518,720,2.518,721,4.808,722,4.808,723,4.48,726,4.036]],["title/injectables/JwtStrategy.html",[139,0.689,310,2.635]],["body/injectables/JwtStrategy.html",[3,0.132,4,0.113,5,0.132,7,0.447,10,1.814,12,0.604,13,0.014,17,0.993,30,0.253,36,0.151,37,0.008,42,0.011,43,0.011,47,1.267,54,1.954,57,1.525,58,1.094,63,1.525,87,4.354,88,2.67,125,2.618,131,2.825,139,1.075,140,1.646,159,2.109,160,2.109,172,3.207,205,3.001,234,2.297,275,2.67,310,4.11,318,2.297,452,3.207,587,3.001,654,3.619,727,4.18,728,4.427,729,4.811,730,5.356,731,4.811,732,3.765,733,3.455,734,3.207,735,3.455,736,4.18,737,3.455,738,3.765,739,4.811,740,3.765,741,3.765,742,4.811,743,3.765,744,4.811]],["title/injectables/JwtStrategyRefreshToken.html",[139,0.689,311,2.635]],["body/injectables/JwtStrategyRefreshToken.html",[3,0.1,4,0.086,5,0.1,7,0.338,9,1.03,10,1.501,12,0.5,13,0.015,17,0.822,20,1.819,30,0.258,36,0.114,37,0.006,42,0.009,43,0.009,47,0.957,54,1.618,57,1.152,58,0.826,63,1.618,87,4.105,88,2.016,94,2.556,96,0.738,125,2.271,139,0.89,140,1.243,159,1.746,160,1.746,161,3.994,170,3.275,172,2.422,189,5.276,197,2.609,205,3.184,234,2.437,235,2.833,242,2.271,243,1.243,244,2.437,246,1.03,247,1.819,275,2.016,276,4.435,277,1.03,278,1.069,282,3.156,283,3.156,311,3.402,318,1.734,322,3.986,328,4.48,329,2.843,336,3.986,360,3.994,362,2.843,419,3.156,452,3.933,587,2.266,654,2.996,708,3.106,728,2.609,732,2.843,733,3.665,734,2.422,735,3.665,737,2.609,738,2.843,740,2.843,741,2.843,743,3.994,745,3.156,746,3.632,747,5.103,748,3.632,749,3.632,750,5.103,751,3.632,752,3.632,753,5.103,754,3.632,755,3.156,756,3.156,757,5.103,758,3.632,759,3.632,760,3.632,761,3.632,762,3.632,763,3.632,764,3.632]],["title/injectables/JwtStrategyResetPassword.html",[139,0.689,312,2.635]],["body/injectables/JwtStrategyResetPassword.html",[3,0.129,4,0.111,5,0.129,7,0.436,10,1.785,12,0.594,13,0.014,17,0.977,30,0.25,36,0.147,37,0.008,42,0.011,43,0.011,47,1.236,54,1.923,57,1.487,58,1.067,63,1.487,81,2.628,87,4.321,88,2.604,125,2.587,133,1.735,139,1.057,140,1.605,159,2.075,160,2.075,172,3.128,205,3.784,234,2.24,275,2.604,312,4.044,318,2.24,452,3.128,587,2.927,654,3.561,708,3.539,728,4.356,730,5.271,732,3.672,733,4.356,734,3.128,735,4.356,737,3.369,738,3.672,740,3.672,741,3.672,743,3.672,765,4.077,766,4.692,767,4.692,768,4.692,769,4.692]],["title/injectables/LocalAuthGuard.html",[139,0.689,207,2.838]],["body/injectables/LocalAuthGuard.html",[3,0.162,4,0.139,5,0.162,13,0.014,30,0.247,36,0.185,37,0.01,42,0.012,43,0.012,47,1.557,58,1.344,139,1.22,140,2.022,207,5.027,318,2.823,709,3.471,716,3.941,770,5.137,771,5.911]],["title/injectables/LocalStrategy.html",[139,0.689,313,2.635]],["body/injectables/LocalStrategy.html",[3,0.122,4,0.105,5,0.122,7,0.415,10,1.726,12,0.575,13,0.014,14,1.149,17,0.945,30,0.255,36,0.14,37,0.008,42,0.01,43,0.01,47,1.174,54,1.86,57,1.414,58,1.014,61,3.202,63,1.414,96,1.416,125,2.524,133,2.577,139,1.023,140,1.525,159,2.007,160,2.007,162,2.939,167,3.445,198,1.649,199,4.364,200,3.489,208,3.489,234,2.129,242,1.716,244,2.129,246,1.264,277,1.264,278,1.312,313,3.912,318,2.129,376,2.233,377,1.788,451,3.489,654,3.445,715,3.66,719,2.782,733,3.202,734,2.973,735,3.202,736,3.874,737,3.202,772,3.874,773,4.458,774,4.458,775,5.867,776,4.458,777,4.458,778,4.458,779,3.874]],["title/entities/MappedValue.html",[0,1.462,462,1.462]],["body/entities/MappedValue.html",[0,2.251,2,2.363,3,0.129,4,0.111,5,0.129,7,0.439,8,1.384,9,1.911,12,0.698,13,0.014,14,1.101,15,2.344,16,3.379,17,1.147,30,0.215,31,3.881,33,2.619,34,1.614,36,0.148,37,0.008,42,0.011,43,0.011,455,3.938,457,2.363,462,2.726,466,2.943,471,3.798,482,2.77,629,3.074,630,2.545,780,6.405,781,4.099,782,6.087,783,4.717,784,4.717,785,4.717,786,4.717,787,3.692]],["title/classes/MappedValuesRepository.html",[37,0.007,788,2.838]],["body/classes/MappedValuesRepository.html",[3,0.161,4,0.138,5,0.161,13,0.014,30,0.246,34,2.008,36,0.184,37,0.01,42,0.012,43,0.012,45,2.008,47,1.836,48,3.724,462,2.171,473,4.216,788,5.006,789,5.101,790,5.101,791,4.595]],["title/interfaces/NewRegistry.html",[513,1.163,631,1.652]],["body/interfaces/NewRegistry.html",[3,0.112,4,0.096,5,0.112,7,0.379,8,1.256,9,1.155,12,0.614,13,0.015,14,1.26,22,0.893,30,0.221,36,0.242,42,0.01,43,0.01,47,1.073,96,1.123,106,1.906,198,1.507,243,1.89,246,1.566,277,1.566,278,1.626,462,1.507,513,2.272,515,1.859,533,1.634,537,2.31,543,1.569,544,1.449,555,1.778,556,1.634,557,1.634,558,1.634,594,1.946,596,1.946,600,3.161,621,2.31,622,1.946,623,2.638,624,1.859,625,1.778,626,1.778,627,1.704,628,2.041,629,1.859,630,2.81,631,2.31,632,2.81,633,1.634,634,1.634]],["title/controllers/ParameterizerController.html",[50,2.321,792,2.838]],["body/controllers/ParameterizerController.html",[1,1.997,3,0.049,4,0.176,5,0.049,7,0.167,10,1.713,12,0.639,13,0.015,14,0.458,15,2.223,17,1.087,22,1.662,30,0.244,36,0.056,37,0.003,39,2.866,42,0.005,43,0.005,50,1.052,52,1.052,54,0.94,57,2.14,58,0.407,61,1.287,62,1.403,63,2.14,96,0.603,106,1.075,125,3.029,131,1.052,147,1.557,159,1.992,160,1.992,161,3.449,162,3.784,185,6.618,186,1.557,187,1.557,189,2.968,191,1.557,196,2.576,197,1.287,206,1.557,242,2.024,275,0.995,286,1.557,353,2.446,377,1.957,455,0.898,456,1.287,457,0.898,482,1.052,499,1.287,525,2.968,544,0.637,556,0.719,557,0.719,558,0.719,602,4.161,609,3.165,621,0.749,633,0.719,674,3.165,707,1.052,708,0.944,792,2.129,793,1.557,794,1.792,795,3.449,796,3.829,797,4.406,798,3.449,799,3.449,800,3.449,801,3.792,802,3.792,803,2.968,804,2.968,805,2.968,806,3.792,807,3.473,808,6.221,809,2.965,810,2.965,811,1.792,812,2.965,813,1.792,814,2.576,815,1.792,816,4.683,817,1.792,818,1.792,819,1.792,820,1.792,821,2.965,822,3.295,823,1.792,824,1.792,825,2.965,826,1.792,827,1.792,828,3.165,829,6.221,830,2.105,831,1.792,832,1.792,833,3.165,834,1.792,835,1.792,836,3.165,837,2.965,838,1.792,839,1.792,840,1.792,841,1.792,842,2.576,843,1.792,844,1.792,845,1.792,846,1.792,847,1.792,848,2.366,849,1.557,850,1.557,851,4.57,852,1.792,853,1.792,854,1.85,855,1.85,856,1.403,857,2.965,858,1.557,859,1.792,860,1.792,861,1.792,862,1.792,863,1.792,864,1.792,865,1.792,866,1.792,867,4.406,868,1.792,869,1.792,870,1.792,871,1.792,872,2.129,873,1.792,874,1.792,875,1.792,876,1.792,877,1.557,878,1.792]],["title/modules/ParameterizerModule.html",[65,1.521,75,2.635]],["body/modules/ParameterizerModule.html",[3,0.136,4,0.117,5,0.136,13,0.014,30,0.264,36,0.155,37,0.009,42,0.011,43,0.011,52,3.686,58,1.125,65,2.416,67,2.364,68,2.998,73,4.769,75,5.328,76,4.488,80,3.305,81,1.831,82,2.479,84,3.484,85,3.916,509,4.302,792,4.951,848,4.769,849,4.302,879,4.302,880,4.95,881,4.302,882,4.95,883,4.95,884,4.95]],["title/injectables/ParameterizerService.html",[139,0.689,848,2.466]],["body/injectables/ParameterizerService.html",[1,1.955,3,0.038,4,0.088,5,0.038,7,0.128,10,1.595,12,0.531,13,0.015,14,0.838,17,1.024,22,1.701,30,0.198,36,0.043,37,0.002,42,0.004,43,0.004,54,0.751,57,1.979,58,0.313,63,1.979,106,1.884,125,2.935,139,0.413,140,0.47,159,1.854,160,1.854,162,3.619,234,1.131,235,1.315,242,2.824,243,2.609,244,3.45,246,1.884,247,3.236,275,2.061,277,1.832,278,1.87,358,1.854,376,3.284,377,2.629,421,2.906,455,0.688,456,0.987,457,0.688,482,0.807,493,1.194,499,0.987,505,2.856,514,0.858,516,0.987,524,3.227,525,2.444,530,2.88,533,1.967,537,1.306,539,2.714,543,0.912,544,1.489,553,5.614,556,0.551,557,0.551,558,0.551,560,1.194,561,1.076,565,1.076,602,3.589,621,0.575,627,1.552,631,1.552,633,0.551,795,2.906,796,3.227,798,2.906,799,2.906,800,2.906,803,2.444,804,1.854,805,2.444,807,1.948,814,2.714,822,2.714,848,1.478,850,1.194,851,2.059,854,2.317,855,2.317,856,1.076,858,1.194,872,2.243,885,1.194,886,3.123,887,2.714,888,2.714,889,1.375,890,1.375,891,1.375,892,1.375,893,1.375,894,1.375,895,1.375,896,1.375,897,1.375,898,1.375,899,1.375,900,1.375,901,1.375,902,1.375,903,3.123,904,1.375,905,1.375,906,2.369,907,1.375,908,1.375,909,1.375,910,1.375,911,1.375,912,1.375,913,1.375,914,1.375,915,1.375,916,1.375,917,5.97,918,5.97,919,5.97,920,5.188,921,1.375,922,1.375,923,1.375,924,1.375,925,1.375,926,1.375,927,2.369,928,1.375,929,1.375,930,1.375,931,1.375,932,1.375,933,1.375,934,1.375,935,1.375,936,1.375,937,1.375,938,1.375,939,1.375,940,1.375,941,1.375,942,1.375,943,1.375,944,1.375,945,1.375,946,1.375]],["title/interfaces/ProbleSourceSelectedColumnsNewProblem.html",[513,1.163,633,1.585]],["body/interfaces/ProbleSourceSelectedColumnsNewProblem.html",[3,0.111,4,0.095,5,0.111,7,0.376,8,1.25,9,1.147,12,0.725,13,0.015,14,1.265,22,0.886,30,0.22,36,0.241,42,0.01,43,0.01,47,1.066,96,1.118,106,1.9,198,1.496,243,1.881,246,1.559,277,1.559,278,1.618,462,1.496,513,2.269,515,1.846,533,1.622,537,2.299,543,1.557,544,1.439,555,1.766,556,1.622,557,1.622,558,1.622,594,1.932,596,1.932,600,3.154,621,2.299,622,1.932,623,2.626,624,1.846,625,1.766,626,1.766,627,1.691,628,2.026,629,1.846,630,2.299,631,1.691,632,1.691,633,2.205,634,2.687]],["title/entities/Problem.html",[0,1.462,22,0.866]],["body/entities/Problem.html",[0,1.801,1,3.863,2,1.703,3,0.093,4,0.08,5,0.093,7,0.316,8,1.107,9,1.613,10,1.674,12,0.73,13,0.015,14,1.114,15,2.451,16,2.703,17,1.199,19,4.086,20,3.609,22,1.067,23,3.247,28,4.086,30,0.241,31,3.709,32,3.793,33,1.887,34,1.163,36,0.106,37,0.006,40,2.564,42,0.008,43,0.008,96,1.491,106,2.08,198,1.258,455,3.112,457,1.703,466,3.55,471,3.876,482,1.997,486,2.442,500,2.267,543,2.19,544,2.023,602,3.341,625,1.484,787,2.661,830,3.797,947,2.955,948,4.944,949,4.944,950,4.87,951,3.4,952,4.87,953,3.4,954,4.87,955,3.4,956,3.4,957,3.4,958,3.4,959,4.232,960,3.4,961,3.4,962,3.4,963,4.87,964,3.4,965,3.4,966,3.4]],["title/modules/ProblemModule.html",[65,1.521,76,2.321]],["body/modules/ProblemModule.html",[1,3.211,3,0.13,4,0.112,5,0.13,13,0.014,22,1.336,30,0.274,36,0.148,37,0.008,42,0.011,43,0.011,49,3.702,58,1.075,65,2.347,67,2.259,68,2.912,76,4.512,80,3.211,81,1.75,82,2.369,84,3.385,85,2.951,89,3.154,90,2.369,455,3.054,457,2.369,462,2.255,473,3.398,481,3.702,482,2.778,507,4.066,530,4.717,791,3.702,830,3.385,967,4.111,968,4.111,969,4.111,970,4.731,971,3.702,972,4.111,973,4.731,974,4.731]],["title/injectables/ProblemService.html",[139,0.689,530,2.321]],["body/injectables/ProblemService.html",[1,2.302,3,0.04,4,0.078,5,0.04,7,0.137,9,0.934,10,2.071,12,0.646,13,0.015,14,0.736,17,1.008,20,1.262,22,1.746,24,1.283,30,0.236,31,1.735,34,0.505,36,0.046,37,0.003,39,0.867,40,0.778,42,0.004,43,0.004,44,3.652,49,1.156,54,0.799,57,1.941,58,0.336,63,2.059,90,0.74,96,1.089,106,1.105,125,2.913,139,0.439,140,0.505,159,2.095,160,2.095,162,3.579,198,0.546,234,1.203,235,2.427,242,2.846,243,1.982,244,3.269,247,0.74,359,1.061,375,6.009,377,1.322,455,1.262,457,1.262,459,4.656,460,2.19,462,1.441,473,1.061,477,1.972,478,2.798,481,1.156,482,0.867,530,1.48,533,2.039,537,1.378,543,0.569,544,0.525,559,1.156,587,0.921,600,1.908,602,3.505,625,0.645,627,1.629,629,1.777,631,2.24,633,0.592,634,1.01,755,4.419,787,2.58,788,2.798,791,1.156,795,3.049,798,2.58,799,2.58,800,2.58,803,2.58,804,2.58,805,2.58,807,2.056,830,1.829,854,2.43,855,2.43,856,1.156,872,2.367,887,2.864,888,2.864,948,1.283,949,1.283,959,1.283,971,1.156,972,1.283,975,1.283,976,3.296,977,2.52,978,1.477,979,4.015,980,3.296,981,3.296,982,1.477,983,1.477,984,1.477,985,1.477,986,2.52,987,1.477,988,1.477,989,1.477,990,1.477,991,1.477,992,1.477,993,1.477,994,1.477,995,1.477,996,1.477,997,1.477,998,1.477,999,1.477,1000,1.477,1001,3.895,1002,1.477,1003,1.477,1004,3.895,1005,1.477,1006,1.477,1007,1.477,1008,1.399,1009,1.477,1010,1.477,1011,1.477,1012,1.477,1013,1.477,1014,1.477,1015,1.477,1016,1.477,1017,1.477,1018,1.477,1019,1.477,1020,1.477,1021,3.296,1022,3.895,1023,1.477,1024,1.477,1025,2.52,1026,3.895,1027,2.52,1028,1.477,1029,1.477,1030,1.477,1031,2.52,1032,1.477,1033,1.477,1034,3.296,1035,3.296,1036,2.52,1037,3.296,1038,1.477,1039,3.296,1040,1.477,1041,1.477,1042,1.477,1043,1.477,1044,1.477,1045,1.477,1046,1.477,1047,1.477,1048,1.477,1049,1.477,1050,1.477,1051,1.477,1052,1.477,1053,1.477,1054,1.477,1055,1.477,1056,2.52,1057,1.477]],["title/interfaces/ProblemSource.html",[513,1.163,533,1.585]],["body/interfaces/ProblemSource.html",[3,0.113,4,0.097,5,0.113,7,0.383,8,1.264,9,1.167,12,0.617,13,0.015,14,1.261,22,0.901,30,0.222,36,0.242,42,0.01,43,0.01,47,1.084,96,1.13,106,1.913,198,1.522,243,1.902,246,1.577,277,1.577,278,1.636,462,1.522,513,2.277,515,1.877,533,2.23,537,2.325,543,2.597,544,2.399,555,1.795,556,1.65,557,1.65,558,1.65,594,1.965,596,1.965,600,2.749,621,2.325,622,1.965,623,2.656,624,1.877,625,1.795,626,1.795,627,1.72,628,2.061,629,1.877,630,2.325,631,1.72,632,1.72,633,1.65,634,1.65]],["title/interfaces/ProblemSourceColumn.html",[513,1.163,556,1.585]],["body/interfaces/ProblemSourceColumn.html",[3,0.115,4,0.099,5,0.115,7,0.389,8,1.279,9,1.187,12,0.551,13,0.015,14,1.257,22,0.917,30,0.224,36,0.243,42,0.01,43,0.01,47,1.102,96,1.143,106,1.926,198,1.548,243,1.924,246,1.595,277,1.595,278,1.655,462,1.548,513,2.284,515,1.909,533,1.678,537,2.352,543,1.611,544,1.488,555,1.826,556,2.256,557,1.678,558,1.678,594,1.998,596,1.998,600,3.186,621,2.352,622,1.998,623,2.686,624,1.909,625,1.826,626,1.826,627,1.75,628,2.096,629,1.909,630,2.352,631,1.75,632,1.75,633,1.678,634,1.678]],["title/interfaces/ProblemSourceMappedColumns.html",[513,1.163,627,1.652]],["body/interfaces/ProblemSourceMappedColumns.html",[3,0.116,4,0.099,5,0.116,9,1.195,12,0.554,13,0.015,14,1.254,17,0.679,22,0.924,30,0.225,36,0.243,42,0.01,43,0.01,47,1.111,96,1.149,106,1.932,198,1.559,243,1.934,246,1.603,277,1.603,278,1.663,353,2.34,462,1.559,513,2.287,515,1.923,533,1.69,537,2.363,543,1.623,544,1.499,555,1.84,556,1.69,557,1.69,558,1.69,594,2.013,596,2.013,600,2.783,621,2.363,622,2.013,623,2.7,624,1.923,625,1.84,626,1.84,627,2.363,628,2.831,629,1.923,630,2.363,631,1.763,632,1.763,633,1.69,634,1.69,1058,4.216,1059,4.216]],["title/interfaces/ProblemSourceSchema.html",[513,1.163,557,1.585]],["body/interfaces/ProblemSourceSchema.html",[3,0.115,4,0.099,5,0.115,7,0.389,8,1.279,9,1.187,12,0.551,13,0.015,14,1.257,22,0.917,30,0.224,36,0.243,42,0.01,43,0.01,47,1.102,96,1.143,106,1.926,198,1.548,243,1.924,246,1.595,277,1.595,278,1.655,462,1.548,513,2.284,515,1.909,533,1.678,537,2.352,543,1.611,544,1.488,555,1.826,556,1.678,557,2.256,558,1.678,594,3.244,596,1.998,600,2.773,621,2.352,622,1.998,623,2.686,624,1.909,625,1.826,626,1.826,627,1.75,628,2.096,629,1.909,630,2.352,631,1.75,632,1.75,633,1.678,634,1.678]],["title/interfaces/ProblemSourceTable.html",[513,1.163,558,1.585]],["body/interfaces/ProblemSourceTable.html",[3,0.115,4,0.099,5,0.115,7,0.389,8,1.279,9,1.187,12,0.551,13,0.015,14,1.257,22,0.917,30,0.224,36,0.243,42,0.01,43,0.01,47,1.102,96,1.143,106,1.926,198,1.548,243,1.924,246,1.595,277,1.595,278,1.655,462,1.548,513,2.284,515,1.909,533,1.678,537,2.352,543,1.611,544,1.488,555,1.826,556,1.678,557,1.678,558,2.256,594,1.998,596,3.244,600,2.773,621,2.352,622,1.998,623,2.686,624,1.909,625,1.826,626,1.826,627,1.75,628,2.096,629,1.909,630,2.352,631,1.75,632,1.75,633,1.678,634,1.678]],["title/classes/ProblemsRepository.html",[37,0.007,979,2.838]],["body/classes/ProblemsRepository.html",[3,0.162,4,0.139,5,0.162,13,0.014,22,1.295,30,0.247,34,2.022,36,0.185,37,0.01,42,0.012,43,0.012,45,2.022,47,1.844,48,3.735,971,4.627,979,5.027,1060,5.137]],["title/entities/RefreshToken.html",[0,1.462,94,1.98]],["body/entities/RefreshToken.html",[0,2.288,2,2.423,3,0.133,4,0.114,5,0.133,7,0.45,8,1.406,9,1.934,12,0.704,13,0.014,14,1.111,15,2.367,16,3.434,17,1.157,30,0.218,31,3.912,33,2.685,34,1.655,36,0.151,37,0.008,42,0.011,43,0.011,94,3.721,96,1.606,198,1.789,403,5.926,466,3.018,471,3.86,1061,4.204,1062,6.186,1063,4.838,1064,4.838,1065,4.838,1066,6.186,1067,4.838]],["title/classes/RefreshTokensRepository.html",[37,0.007,328,2.466]],["body/classes/RefreshTokensRepository.html",[3,0.162,4,0.139,5,0.162,13,0.014,30,0.247,34,2.022,36,0.185,37,0.01,42,0.012,43,0.012,45,2.022,47,1.844,48,3.735,94,2.961,327,4.627,328,4.367,1068,5.137]],["title/entities/Registry.html",[0,1.462,830,2.194]],["body/entities/Registry.html",[0,2.255,2,2.369,3,0.13,4,0.112,5,0.13,7,0.44,8,1.386,9,1.913,10,1.985,12,0.699,13,0.014,14,1.168,15,2.347,16,3.385,17,1.148,19,3.398,20,3.57,22,1.723,28,3.398,30,0.215,31,3.553,33,2.626,34,1.618,35,3.702,36,0.148,37,0.008,42,0.011,43,0.011,466,2.951,471,3.804,486,3.398,500,3.154,632,2.821,830,3.385,1069,4.111,1070,4.731,1071,4.731,1072,6.098,1073,4.731,1074,4.731]],["title/classes/SaveNewRegistrySelectedColumnsDto.html",[37,0.007,828,2.838]],["body/classes/SaveNewRegistrySelectedColumnsDto.html",[3,0.143,4,0.123,5,0.143,7,0.486,8,1.476,12,0.636,13,0.014,14,1.143,15,2.138,17,1.045,30,0.184,36,0.163,37,0.011,42,0.011,43,0.011,45,1.787,377,2.833,600,3.083,612,4.219,620,2.383,630,2.714,632,2.954,816,5.074,828,4.663,830,3.922,1008,3.922,1075,4.088,1076,4.539,1077,5.223]],["title/classes/SaveProblemAlgorithmDto.html",[37,0.007,833,2.838]],["body/classes/SaveProblemAlgorithmDto.html",[3,0.155,4,0.133,5,0.155,7,0.526,8,1.55,12,0.554,13,0.014,14,1.054,15,1.862,17,0.911,22,1.493,30,0.199,36,0.177,37,0.012,42,0.012,43,0.012,45,1.935,612,4.062,620,2.58,833,4.896,877,6.359,1008,3.784,1078,4.915,1079,5.656]],["title/classes/SaveProblemSourceColumnsDto.html",[37,0.007,854,2.466]],["body/classes/SaveProblemSourceColumnsDto.html",[3,0.134,4,0.176,5,0.134,7,0.454,8,1.414,12,0.671,13,0.014,14,1.177,15,2.255,17,1.103,22,1.58,30,0.172,36,0.153,37,0.011,42,0.011,43,0.011,45,1.669,474,5.405,475,5.405,476,5.405,477,4.868,612,3.801,620,2.226,634,2.746,854,3.881,1008,4.003,1080,4.24,1081,5.95,1082,5.95,1083,4.879,1084,6.22,1085,4.879,1086,5.95,1087,4.879,1088,4.879,1089,5.405,1090,4.879]],["title/classes/SaveProblemSourceColumnsTypeDto.html",[37,0.007,855,2.466]],["body/classes/SaveProblemSourceColumnsTypeDto.html",[3,0.13,4,0.174,5,0.13,7,0.441,8,1.389,12,0.662,13,0.014,14,1.169,15,2.225,17,1.088,22,1.563,30,0.167,36,0.148,37,0.011,39,3.587,40,3.217,41,4.781,42,0.011,43,0.011,45,1.623,602,4.66,612,3.751,620,2.164,634,2.709,855,3.811,1008,3.961,1081,5.872,1082,5.872,1086,5.872,1089,5.308,1091,4.122,1092,4.744,1093,6.109,1094,6.109,1095,4.744,1096,4.744,1097,4.744,1098,4.744]],["title/classes/SaveProblemSourceDto.html",[37,0.007,836,2.838]],["body/classes/SaveProblemSourceDto.html",[3,0.148,4,0.127,5,0.148,7,0.501,8,1.505,12,0.649,13,0.014,14,1.155,15,2.179,17,1.066,22,1.569,30,0.19,36,0.169,37,0.012,42,0.012,43,0.012,45,1.843,543,2.758,544,2.547,612,4.257,620,2.458,836,4.754,1008,3.976,1099,4.682,1100,5.388,1101,5.388]],["title/classes/SaveProblemSourceSelectedOrdinalColumns.html",[37,0.007,807,2.466]],["body/classes/SaveProblemSourceSelectedOrdinalColumns.html",[3,0.152,4,0.171,5,0.152,7,0.516,8,1.531,12,0.544,13,0.014,15,1.826,17,0.893,22,1.476,30,0.195,36,0.174,37,0.012,39,3.955,42,0.012,43,0.012,45,1.897,620,2.53,807,4.203,816,4.838,872,5.211,1008,3.739,1075,4.341,1076,4.819,1102,6.736,1103,7.255]],["title/modules/SendgridModule.html",[65,1.521,77,2.466]],["body/modules/SendgridModule.html",[3,0.147,4,0.127,5,0.147,13,0.014,30,0.233,36,0.168,37,0.009,42,0.011,43,0.011,58,1.221,65,2.543,67,2.565,68,3.155,77,4.931,79,4.798,80,3.478,81,1.987,82,2.69,84,3.667,507,4.404,1104,4.668,1105,5.371,1106,4.668,1107,5.371,1108,5.371]],["title/injectables/SendgridService.html",[79,2.321,139,0.689]],["body/injectables/SendgridService.html",[3,0.125,4,0.108,5,0.125,7,0.426,10,1.756,12,0.585,13,0.014,17,0.961,30,0.234,36,0.143,37,0.008,42,0.01,43,0.01,54,1.893,57,1.451,58,1.041,61,3.288,62,3.583,63,1.893,79,3.505,87,4.396,88,2.541,125,2.557,139,1.041,140,1.566,159,2.042,160,2.042,162,2.99,164,3.978,209,3.583,210,3.288,234,2.186,242,1.762,244,2.186,246,1.693,247,2.293,277,1.883,278,1.347,295,4.672,432,5.188,433,5.772,668,3.978,670,3.978,728,3.288,1109,3.978,1110,5.772,1111,4.578,1112,4.578,1113,4.578,1114,4.578,1115,4.578,1116,4.578,1117,4.578,1118,4.578,1119,4.578]],["title/entities/User.html",[0,1.462,96,0.803]],["body/entities/User.html",[0,1.995,2,1.97,3,0.108,4,0.093,5,0.108,7,0.366,8,1.226,9,1.745,11,4.818,12,0.719,13,0.015,14,1.156,15,2.417,16,2.994,17,1.182,20,3.317,22,1.57,23,4.104,30,0.233,31,3.774,32,4.416,33,2.184,34,1.346,36,0.123,37,0.007,42,0.009,43,0.009,94,3.59,96,1.096,106,2.032,133,2.276,167,3.614,174,4.818,486,2.825,499,2.825,500,2.623,625,1.717,756,5.349,1120,3.418,1121,6.155,1122,5.394,1123,6.623,1124,3.934,1125,3.934,1126,3.934,1127,3.934,1128,5.394,1129,3.934,1130,5.394,1131,3.934,1132,3.934,1133,3.934]],["title/modules/UserModule.html",[65,1.521,78,2.321]],["body/modules/UserModule.html",[3,0.141,4,0.122,5,0.141,13,0.014,30,0.259,36,0.161,37,0.009,42,0.011,43,0.011,58,1.173,65,2.48,67,2.464,68,3.077,78,4.601,80,3.393,81,1.908,82,2.585,84,3.577,85,3.219,89,4.296,90,2.585,96,1.049,336,4.512,507,4.296,1134,4.484,1135,4.484,1136,4.484,1137,5.16,1138,4.039,1139,5.16,1140,5.16]],["title/classes/UsersRepository.html",[37,0.007,1141,2.838]],["body/classes/UsersRepository.html",[3,0.162,4,0.139,5,0.162,13,0.014,30,0.247,34,2.022,36,0.185,37,0.01,42,0.012,43,0.012,45,2.022,47,1.844,48,3.735,96,1.202,1138,4.627,1141,5.027,1142,5.137]],["title/injectables/UsersService.html",[139,0.689,336,2.194]],["body/injectables/UsersService.html",[3,0.102,4,0.088,5,0.102,7,0.346,10,2.072,12,0.723,13,0.014,14,1.051,17,1.134,30,0.228,34,1.272,36,0.116,37,0.006,42,0.009,43,0.009,48,3.239,54,1.645,57,2.156,58,0.846,63,2.156,90,1.863,96,1.469,125,2.883,133,1.376,139,0.905,140,1.272,159,2.41,160,2.41,162,3.528,167,2.184,201,3.726,234,2.478,235,2.064,244,1.776,336,2.88,353,2.88,359,2.671,452,2.48,634,1.491,1138,2.911,1141,3.726,1143,3.232,1144,5.189,1145,5.189,1146,5.975,1147,5.189,1148,3.719,1149,3.719,1150,5.189,1151,3.719,1152,5.189,1153,3.719,1154,3.719,1155,5.189,1156,6.466,1157,3.719,1158,3.719,1159,7.228,1160,3.719,1161,4.509,1162,5.189,1163,3.719,1164,3.719,1165,3.719,1166,3.719,1167,3.719,1168,3.719,1169,3.719]],["title/injectables/ValidationPipe.html",[139,0.689,1170,3.093]],["body/injectables/ValidationPipe.html",[3,0.109,4,0.093,5,0.109,7,0.368,10,1.595,12,0.388,13,0.015,14,0.955,17,0.873,27,3.1,30,0.218,36,0.124,37,0.011,40,3.253,42,0.009,43,0.009,45,1.355,54,1.718,57,1.959,58,0.901,63,1.959,125,2.378,139,0.945,140,1.355,159,1.854,160,1.854,172,2.641,235,3.429,242,2.678,243,1.355,244,1.892,246,1.123,247,1.984,277,1.123,278,1.165,358,4.242,376,1.984,377,1.588,620,1.807,630,1.656,632,2.777,649,3.1,654,2.326,680,3.442,693,3.442,842,3.442,1161,3.442,1170,4.242,1171,3.442,1172,5.42,1173,5.42,1174,5.42,1175,3.961,1176,6.178,1177,5.42,1178,6.642,1179,3.961,1180,5.42,1181,3.961,1182,3.442,1183,3.961,1184,4.709,1185,3.961,1186,3.961,1187,3.961,1188,3.961,1189,5.42,1190,3.961,1191,3.961,1192,3.961,1193,3.961,1194,3.961,1195,3.961,1196,3.961,1197,3.961,1198,3.961,1199,3.961,1200,3.961,1201,3.961,1202,3.961,1203,3.961,1204,3.961,1205,3.961,1206,3.961,1207,3.961]],["title/coverage.html",[1208,4.235]],["body/coverage.html",[0,2.304,1,1.124,4,0.115,5,0.059,6,1.856,12,0.209,13,0.014,22,1.313,37,0.013,39,1.254,42,0.006,43,0.006,44,1.534,46,1.856,50,2.511,51,1.534,53,1.856,59,1.332,79,1.254,81,0.79,94,1.07,96,0.434,106,0.97,139,1.281,141,1.856,145,1.534,146,1.856,181,1.534,199,1.254,203,1.254,204,1.254,207,1.534,211,1.671,212,1.671,213,1.671,215,1.671,216,1.671,217,1.671,218,1.671,220,1.671,221,1.671,222,1.671,223,1.671,224,1.671,225,1.671,226,1.671,228,1.671,229,1.671,230,1.671,231,1.671,310,1.424,311,1.424,312,1.424,313,1.424,322,1.185,328,1.332,331,1.856,336,1.185,377,1.371,455,1.07,456,1.534,457,1.713,458,1.856,462,0.79,478,1.534,479,1.856,480,1.856,483,1.856,505,1.332,513,1.98,514,1.332,516,1.534,517,1.856,518,1.856,527,1.332,528,1.534,530,1.254,533,0.856,543,0.822,555,0.932,556,0.856,557,0.856,558,0.856,602,1.254,608,1.856,609,1.534,610,1.856,611,1.856,621,0.893,622,3.147,626,0.932,627,0.893,631,0.893,633,0.856,635,1.856,636,1.856,638,1.671,649,6.46,655,1.534,663,1.856,674,1.534,675,1.856,676,1.856,678,1.856,679,4.875,707,1.254,708,3.156,709,3.351,717,1.332,720,1.332,727,1.856,745,1.856,765,1.856,770,1.856,772,1.856,780,1.856,781,1.856,788,1.534,789,1.856,790,1.856,792,1.534,793,1.856,807,1.332,816,2.456,828,1.534,830,1.898,833,1.534,836,1.534,848,1.332,854,1.332,855,1.332,885,1.856,947,1.856,975,1.856,979,1.534,1008,3.168,1060,1.856,1061,1.856,1068,1.856,1069,1.856,1075,2.676,1078,1.856,1080,1.856,1091,1.856,1099,1.856,1109,1.856,1120,1.856,1141,1.534,1142,1.856,1143,1.856,1170,1.671,1171,1.856,1208,1.671,1209,2.136,1210,2.136,1211,2.136,1212,7.141,1213,4.277,1214,2.136,1215,6.962,1216,7.402,1217,7.93,1218,3.716,1219,3.716,1220,3.716,1221,4.249,1222,5.412,1223,4.249,1224,4.249,1225,2.136,1226,2.136,1227,1.856,1228,2.136,1229,1.856,1230,4.277,1231,2.136,1232,2.136,1233,2.136,1234,2.136]],["title/dependencies.html",[68,2.272,1235,2.861]],["body/dependencies.html",[13,0.014,34,1.723,37,0.011,42,0.011,43,0.011,58,1.145,68,2.406,88,2.796,90,2.523,91,4.378,195,4.378,197,3.618,205,3.143,208,3.943,210,3.618,316,3.943,318,2.406,360,3.943,620,2.298,624,2.298,734,4.634,1182,4.378,1236,6.95,1237,5.038,1238,5.038,1239,6.95,1240,5.038,1241,5.038,1242,5.038,1243,5.038,1244,5.038,1245,5.038,1246,5.038,1247,5.038,1248,5.038,1249,5.038,1250,5.038,1251,5.038,1252,5.038,1253,5.038,1254,5.038,1255,5.038,1256,5.038,1257,5.038,1258,5.038,1259,5.038,1260,5.038,1261,5.038]],["title/miscellaneous/functions.html",[1262,2.364,1263,4.135]],["body/miscellaneous/functions.html",[7,0.582,13,0.013,42,0.013,43,0.013,1227,5.439,1229,6.634,1262,4.495,1263,5.439,1264,6.259]],["title/index.html",[7,0.306,1265,3.292,1266,3.292]],["body/index.html",[4,0.113,13,0.014,42,0.011,43,0.011,48,2.396,260,4.157,371,4.157,447,4.157,1208,3.744,1267,4.784,1268,4.784,1269,6.142,1270,4.784,1271,4.784,1272,4.784,1273,4.784,1274,4.784,1275,4.784,1276,3.744,1277,6.784,1278,4.784,1279,4.784,1280,7.704,1281,4.784,1282,4.784,1283,4.784,1284,7.576,1285,4.784,1286,4.784,1287,6.142,1288,4.784,1289,4.784,1290,4.784,1291,6.142,1292,6.142,1293,4.784,1294,4.784,1295,4.784,1296,6.142,1297,6.142,1298,4.784,1299,4.784,1300,4.784,1301,4.784,1302,4.784,1303,4.157,1304,4.784,1305,4.784,1306,4.784,1307,4.784,1308,4.784,1309,4.784,1310,4.784,1311,4.784,1312,4.784,1313,4.157,1314,4.784,1315,4.784,1316,4.784,1317,4.784,1318,4.784,1319,4.784,1320,4.157]],["title/modules.html",[67,2.584]],["body/modules.html",[13,0.012,42,0.012,43,0.012,66,4.009,67,2.666,72,3.722,73,3.483,74,3.483,75,3.722,76,3.278,77,3.483,78,3.278,1303,6.985,1321,8.038,1322,8.038,1323,8.038]],["title/overview.html",[1324,4.702]],["body/overview.html",[2,1.77,13,0.014,42,0.009,43,0.009,45,1.209,52,2.075,59,3.626,66,5.75,67,1.688,68,2.39,69,3.071,70,3.071,71,3.071,72,5.276,73,4.822,74,4.445,75,4.936,76,4.274,77,4.445,78,4.274,79,4.274,80,2.636,81,1.307,82,1.77,140,1.209,199,3.413,307,3.071,308,3.071,310,3.875,311,3.875,312,3.875,313,3.875,336,3.955,501,3.071,502,3.071,503,3.071,505,4.445,515,1.612,527,4.445,530,4.183,658,3.071,659,3.071,660,3.071,848,3.626,879,3.071,881,3.071,967,3.071,968,3.071,969,3.071,1104,3.071,1106,3.071,1134,3.071,1135,3.071,1136,3.071,1324,3.071,1325,5.006,1326,3.534,1327,3.534,1328,3.534,1329,3.534]],["title/properties.html",[8,1.082,1235,2.861]],["body/properties.html",[8,1.407,13,0.014,42,0.013,43,0.013,1276,4.845,1313,5.379,1320,5.379,1330,6.19,1331,6.19,1332,6.19]],["title/miscellaneous/variables.html",[1262,2.364,1333,4.135]],["body/miscellaneous/variables.html",[3,0.079,7,0.161,8,1.665,9,0.819,12,0.795,13,0.015,14,1.157,42,0.005,43,0.005,81,0.642,96,1.284,133,1.914,167,3.039,170,2.057,174,2.26,201,2.073,211,2.26,212,2.26,213,2.26,215,2.26,216,2.26,217,2.26,218,2.26,220,2.26,221,2.26,222,2.26,223,2.26,224,2.26,225,2.26,226,2.26,228,2.26,229,2.26,230,2.26,231,2.26,243,1.641,246,1.468,277,1.468,278,1.523,322,1.602,376,0.869,377,1.486,379,1.508,380,1.358,414,2.509,431,1.508,435,1.508,442,1.508,451,2.901,500,4.736,544,2.34,632,2.97,679,4.668,708,0.914,709,1.695,713,4.102,715,1.083,717,1.801,718,1.925,719,1.083,779,2.509,920,2.509,1110,1.508,1184,6.799,1218,1.508,1219,1.508,1220,3.754,1221,1.508,1222,2.509,1223,4.168,1224,4.168,1262,1.246,1276,4.815,1333,1.508,1334,1.736,1335,3.707,1336,3.707,1337,4.32,1338,5.746,1339,4.796,1340,2.887,1341,1.736,1342,6.152,1343,6.152,1344,2.887,1345,1.736,1346,1.736,1347,1.736,1348,3.707,1349,3.707,1350,1.736,1351,1.736,1352,1.736,1353,1.736,1354,1.736,1355,2.887]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1331,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1233,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1232,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1212,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":582,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["1.0.0",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["11",{"_index":1329,"title":{},"body":{"overview.html":{}}}],["17",{"_index":1328,"title":{},"body":{"overview.html":{}}}],["17.6.0",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1327,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["201",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["202",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["3",{"_index":1326,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["4.0.0",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["7.2.0",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["7.7.0",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["7a7e65ab6bf44627bea5758e97fbb969",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":1325,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9.0.0",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":568,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["access",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["accesstokenpayload",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["algorithm",{"_index":1,"title":{"entities/Algorithm.html":{}},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["algorithm.dto",{"_index":859,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["algorithm.dto.ts",{"_index":1078,"title":{},"body":{"classes/SaveProblemAlgorithmDto.html":{},"coverage.html":{}}}],["algorithm.dto.ts:5",{"_index":1079,"title":{},"body":{"classes/SaveProblemAlgorithmDto.html":{}}}],["algorithm.entity",{"_index":965,"title":{},"body":{"entities/Problem.html":{}}}],["algorithm.problems",{"_index":950,"title":{},"body":{"entities/Problem.html":{}}}],["algorithmname",{"_index":877,"title":{},"body":{"controllers/ParameterizerController.html":{},"classes/SaveProblemAlgorithmDto.html":{}}}],["algorithms",{"_index":810,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["algorithmsrepository",{"_index":44,"title":{"classes/AlgorithmsRepository.html":{}},"body":{"classes/AlgorithmsRepository.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["algorithmtosave",{"_index":1056,"title":{},"body":{"injectables/ProblemService.html":{}}}],["alias",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["already",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":1304,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody(resetpasswordcorrectpayload",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody(signincorrectpayload",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody(signupcorrectpayload",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(recovepassworddescription",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(recovepassworddescription)@apiresponse(recoverpasswordsuccessfulresponse)@apiresponse(recoverpasswordbadrequest)@get('recover",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(refreshtokendescription",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(refreshtokendescription)@apiresponse(refreshtokensuccessfulresponse)@apiresponse(refreshtokenunauthorizedresponse)@useguards(jwtrefreshauthguard)@get('refresh",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(resetpassworddescription",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(resetpassworddescription)@apiresponse(resetpasswordsuccessfulresponse)@apiresponse(resetpasswordunauthorizedresponse)@apibody(resetpasswordcorrectpayload)@useguards(jwtresetauthguard)@patch('reset",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signindescription",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signindescription)@apiresponse(signinsuccessfulresponse)@apiresponse(signinunauthorizedresponse)@apibody(signincorrectpayload)@useguards(localauthguard)@post('sign",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signupdescription",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signupdescription)@apiresponse(signupsuccessfulresponse)@apiresponse(signupbadrequestresponse)@apibody(signupcorrectpayload)@post('sign",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(recoverpasswordbadrequest",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(recoverpasswordsuccessfulresponse",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(refreshtokensuccessfulresponse",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(refreshtokenunauthorizedresponse",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(resetpasswordsuccessfulresponse",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(resetpasswordunauthorizedresponse",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signinsuccessfulresponse",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signinunauthorizedresponse",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signupbadrequestresponse",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signupsuccessfulresponse",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":1282,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":51,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application/json",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":1275,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":66,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":59,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":686,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["args.constraints",{"_index":700,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["args.constraints.every((pattern",{"_index":691,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["argumentmetadata",{"_index":1178,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["array",{"_index":1206,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["assign",{"_index":1203,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["auth",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["auth.guard.ts",{"_index":709,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard.ts:16",{"_index":724,"title":{},"body":{"injectables/JwtBaseAuthGuard.html":{}}}],["auth.guard.ts:24",{"_index":714,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:32",{"_index":726,"title":{},"body":{"injectables/JwtResetAuthGuard.html":{}}}],["auth.guard.ts:40",{"_index":725,"title":{},"body":{"injectables/JwtRefreshAuthGuard.html":{}}}],["auth.service",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/password/reset?token=${resettoken",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth/refreshtoken.entity",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":145,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":716,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":723,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["authguard('local",{"_index":771,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":72,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1313,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":199,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":809,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["await",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["backers",{"_index":1305,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParameterizerService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception(error",{"_index":916,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["base",{"_index":787,"title":{},"body":{"entities/MappedValue.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{}}}],["basecasecolumn",{"_index":455,"title":{"entities/BaseCaseColumn.html":{}},"body":{"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["basecasecolumn.mappedvalues",{"_index":782,"title":{},"body":{"entities/MappedValue.html":{}}}],["basecasecolumns",{"_index":478,"title":{"classes/BaseCaseColumns.html":{}},"body":{"classes/BaseCaseColumns.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["basecasecolumnsrepository",{"_index":980,"title":{},"body":{"injectables/ProblemService.html":{}}}],["bcrypt",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"dependencies.html":{}}}],["bcrypt.compare(clientrefreshtoken",{"_index":759,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["bcrypt.compare(clientresetpasswordtoken",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(pass",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newrefreshtoken",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(resettoken",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["being",{"_index":919,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["body",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["body('password",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"injectables/ValidationPipe.html":{}}}],["booleancolumns",{"_index":1093,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["bootstrap",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1323,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1321,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1270,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":1123,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":457,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"classes/IsValidPassword.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["catch",{"_index":670,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/SendgridService.html":{}}}],["character",{"_index":698,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["characters",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters'})@validate(isvalidpassword",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["checkifloggedin",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkifloggedin(req",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkifsourceexists",{"_index":519,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["checkifsourceexists(problemsource",{"_index":532,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["class",{"_index":37,"title":{"classes/AlgorithmsRepository.html":{},"classes/BaseCaseColumns.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"classes/MappedValuesRepository.html":{},"classes/ProblemsRepository.html":{},"classes/RefreshTokensRepository.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"classes/UsersRepository.html":{}},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":45,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"classes/BaseCaseColumns.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"classes/MappedValuesRepository.html":{},"classes/ProblemsRepository.html":{},"classes/RefreshTokensRepository.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"classes/UsersRepository.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["client",{"_index":623,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{}}}],["client.connect",{"_index":669,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["clientrefreshtoken",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["clientresetpasswordtoken",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_connectionmodule",{"_index":501,"title":{},"body":{"modules/ConnectionModule.html":{},"overview.html":{}}}],["cluster_connectionmodule_exports",{"_index":502,"title":{},"body":{"modules/ConnectionModule.html":{},"overview.html":{}}}],["cluster_connectionmodule_imports",{"_index":504,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["cluster_connectionmodule_providers",{"_index":503,"title":{},"body":{"modules/ConnectionModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":658,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":659,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":660,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_parameterizermodule",{"_index":879,"title":{},"body":{"modules/ParameterizerModule.html":{},"overview.html":{}}}],["cluster_parameterizermodule_imports",{"_index":880,"title":{},"body":{"modules/ParameterizerModule.html":{}}}],["cluster_parameterizermodule_providers",{"_index":881,"title":{},"body":{"modules/ParameterizerModule.html":{},"overview.html":{}}}],["cluster_problemmodule",{"_index":967,"title":{},"body":{"modules/ProblemModule.html":{},"overview.html":{}}}],["cluster_problemmodule_exports",{"_index":969,"title":{},"body":{"modules/ProblemModule.html":{},"overview.html":{}}}],["cluster_problemmodule_providers",{"_index":968,"title":{},"body":{"modules/ProblemModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule",{"_index":1104,"title":{},"body":{"modules/SendgridModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule_exports",{"_index":1106,"title":{},"body":{"modules/SendgridModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule_providers",{"_index":1105,"title":{},"body":{"modules/SendgridModule.html":{}}}],["cluster_usermodule",{"_index":1134,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1136,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1135,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["column",{"_index":31,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["column({default",{"_index":486,"title":{},"body":{"entities/Connection.html":{},"entities/Problem.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["column({enum",{"_index":26,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{}}}],["column({nullable",{"_index":19,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Problem.html":{},"entities/Registry.html":{}}}],["column.entity",{"_index":482,"title":{},"body":{"classes/BaseCaseColumns.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["column.entity.ts",{"_index":458,"title":{},"body":{"entities/BaseCaseColumn.html":{},"coverage.html":{}}}],["column.entity.ts:14",{"_index":461,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:16",{"_index":465,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:18",{"_index":469,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:20",{"_index":470,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:22",{"_index":468,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:24",{"_index":464,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.problem",{"_index":952,"title":{},"body":{"entities/Problem.html":{}}}],["column.repository",{"_index":1010,"title":{},"body":{"injectables/ProblemService.html":{}}}],["column.repository.ts",{"_index":480,"title":{},"body":{"classes/BaseCaseColumns.html":{},"coverage.html":{}}}],["column.type",{"_index":1040,"title":{},"body":{"injectables/ProblemService.html":{}}}],["column_name",{"_index":598,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["columnname",{"_index":600,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{}}}],["columnnames",{"_index":547,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["columns",{"_index":602,"title":{},"body":{"injectables/ConnectionService.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"coverage.html":{}}}],["columns.dto",{"_index":857,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["columns.dto.ts",{"_index":1075,"title":{},"body":{"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["columns.dto.ts:5",{"_index":1076,"title":{},"body":{"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}}}],["columns.dto.ts:7",{"_index":1077,"title":{},"body":{"classes/SaveNewRegistrySelectedColumnsDto.html":{}}}],["columns.length",{"_index":933,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["columns.map",{"_index":1037,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columns.push",{"_index":605,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["columns.ts",{"_index":1080,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{},"coverage.html":{}}}],["columns.ts:10",{"_index":1085,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["columns.ts:12",{"_index":1087,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["columns.ts:5",{"_index":1088,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["columns[0][0",{"_index":1048,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columns_not_found",{"_index":934,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["columntosave",{"_index":1028,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columntosave.name",{"_index":1029,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columntosave.problem",{"_index":1032,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columntosave.target",{"_index":1030,"title":{},"body":{"injectables/ProblemService.html":{}}}],["comma",{"_index":1196,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["configmodule",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{}}}],["configservice.get('db_host",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_user",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_access_secret",{"_index":742,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":751,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["configservice.get('jwt_reset_password_secret",{"_index":769,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["connection",{"_index":106,"title":{"entities/Connection.html":{}},"body":{"modules/AppModule.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/User.html":{},"coverage.html":{}}}],["connection.entity",{"_index":510,"title":{},"body":{"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{}}}],["connection.problems",{"_index":954,"title":{},"body":{"entities/Problem.html":{}}}],["connection.service",{"_index":511,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["connection.user",{"_index":1122,"title":{},"body":{"entities/User.html":{}}}],["connection/connection.entity",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["connection/connection.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["connection_not_found",{"_index":564,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["connection_refused",{"_index":672,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["connectionentity",{"_index":569,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["connectionid",{"_index":534,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["connectionmodule",{"_index":73,"title":{"modules/ConnectionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConnectionModule.html":{},"modules/ParameterizerModule.html":{},"modules.html":{},"overview.html":{}}}],["connectionoptions",{"_index":514,"title":{"interfaces/ConnectionOptions.html":{}},"body":{"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{}}}],["connections",{"_index":1121,"title":{},"body":{"entities/User.html":{}}}],["connectionservice",{"_index":505,"title":{"injectables/ConnectionService.html":{}},"body":{"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{},"overview.html":{}}}],["connectionsrepository",{"_index":528,"title":{"classes/ConnectionsRepository.html":{}},"body":{"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"coverage.html":{}}}],["const",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{}}}],["constraint1",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":773,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":728,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{}}}],["constructor(connectionservice",{"_index":889,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["constructor(databaseservice",{"_index":526,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["constructor(private",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/SendgridService.html":{}}}],["constructor(problemsrepository",{"_index":978,"title":{},"body":{"injectables/ProblemService.html":{}}}],["constructor(usersrepository",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":712,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["controller",{"_index":50,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('parameterizer",{"_index":861,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["controllers",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"overview.html":{}}}],["cookie",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":1208,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["create(payload",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["createconnection",{"_index":520,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["createconnection(databasemetadata",{"_index":536,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["createconnectionoptionsdto",{"_index":609,"title":{"classes/CreateConnectionOptionsDto.html":{}},"body":{"classes/CreateConnectionOptionsDto.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["created",{"_index":920,"title":{},"body":{"injectables/ParameterizerService.html":{},"miscellaneous/variables.html":{}}}],["createnewaccesstoken",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewaccesstoken(user",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewconnection",{"_index":886,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["createnewconnection(databasemetadata",{"_index":891,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["createnewconnectionresponse",{"_index":621,"title":{"interfaces/CreateNewConnectionResponse.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["createnewconnectionresponsewitherror",{"_index":555,"title":{"interfaces/CreateNewConnectionResponseWithError.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["createnewrefreshtoken",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewrefreshtoken(user",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["createproblem",{"_index":976,"title":{},"body":{"injectables/ProblemService.html":{}}}],["createproblem(connection",{"_index":983,"title":{},"body":{"injectables/ProblemService.html":{}}}],["createquerybuilder",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["createquerybuilder(alias",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":181,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["credentials",{"_index":779,"title":{},"body":{"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":484,"title":{},"body":{"entities/Connection.html":{}}}],["custom",{"_index":1194,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["customresponse",{"_index":717,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["customresponse(info",{"_index":721,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["d",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{}}}],["database.service",{"_index":662,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseinstance",{"_index":626,"title":{"interfaces/DatabaseInstance.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["databasemetadata",{"_index":539,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{}}}],["databasemodule",{"_index":74,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":527,"title":{"injectables/DatabaseService.html":{}},"body":{"injectables/ConnectionService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"coverage.html":{},"overview.html":{}}}],["date",{"_index":1062,"title":{},"body":{"entities/RefreshToken.html":{}}}],["date(date.now",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["db",{"_index":577,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["db.query",{"_index":580,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["db_host",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["db_name",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["db_password",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["db_port",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["db_user",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"entities/Algorithm.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"entities/User.html":{}}}],["default",{"_index":500,"title":{},"body":{"entities/Connection.html":{},"entities/Problem.html":{},"entities/Registry.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":682,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["defaultmessage(args",{"_index":683,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["defined",{"_index":17,"title":{},"body":{"entities/Algorithm.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"injectables/ConnectionService.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":68,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1276,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["detail",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["detected",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["development",{"_index":1283,"title":{},"body":{"index.html":{}}}],["disable",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["distinct",{"_index":603,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["divide",{"_index":1199,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["documentation",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["droppableid",{"_index":1081,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["dtos/create",{"_index":846,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["dtos/get",{"_index":853,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["dtos/save",{"_index":851,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["dynamictemplatedata",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":1293,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1271,"title":{},"body":{"index.html":{}}}],["email",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email_already_exists",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Algorithm.html":{},"modules/AppModule.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/algorithm.entity",{"_index":49,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entities/base",{"_index":481,"title":{},"body":{"classes/BaseCaseColumns.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entities/mapped",{"_index":791,"title":{},"body":{"classes/MappedValuesRepository.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entities/problem.entity",{"_index":971,"title":{},"body":{"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"classes/ProblemsRepository.html":{}}}],["entities/registry.entity",{"_index":972,"title":{},"body":{"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entity",{"_index":0,"title":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{}},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{},"coverage.html":{}}}],["entry",{"_index":1049,"title":{},"body":{"injectables/ProblemService.html":{}}}],["entry.columnname",{"_index":1051,"title":{},"body":{"injectables/ProblemService.html":{}}}],["enum",{"_index":38,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{}}}],["err",{"_index":671,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["error",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":1186,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.foreach((e",{"_index":1190,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":1188,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["eslint",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["exceed",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exist",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existing",{"_index":761,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["exists",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"miscellaneous/variables.html":{}}}],["expiresat",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"entities/RefreshToken.html":{}}}],["expiresin",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":36,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":507,"title":{},"body":{"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{},"controllers/ParameterizerController.html":{},"dependencies.html":{}}}],["extends",{"_index":47,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"classes/BaseCaseColumns.html":{},"classes/ConnectionsRepository.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"classes/RefreshTokensRepository.html":{},"classes/UsersRepository.html":{}}}],["extractjwt",{"_index":732,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":739,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":749,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["extractjwt.fromurlqueryparameter('token",{"_index":768,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["factor",{"_index":477,"title":{},"body":{"entities/BaseCaseColumn.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsDto.html":{}}}],["factors",{"_index":475,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/SaveProblemSourceColumnsDto.html":{}}}],["false",{"_index":587,"title":{},"body":{"injectables/ConnectionService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/ProblemService.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["filter(boolean",{"_index":705,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["findone",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(options",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneby",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneby(property",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneoptions",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["formattederrors",{"_index":1189,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["formattederrors[e.property",{"_index":1192,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["found",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{}}}],["founduser",{"_index":753,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["founduser.refreshtokens.some",{"_index":758,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["framework",{"_index":1269,"title":{},"body":{"index.html":{}}}],["frontend_url",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1263,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('check",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('get",{"_index":808,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["get('problem",{"_index":812,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["get('recover",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["getavailablealgorithms",{"_index":795,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["getconnectionbyid",{"_index":521,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getconnectionbyid(connectionid",{"_index":540,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getcurrentproblemsourcecolumns",{"_index":522,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getcurrentproblemsourcecolumns(connection",{"_index":542,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getdatabaseinstance",{"_index":664,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getdatabaseinstance(options",{"_index":665,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["gethello",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getproblembeingcreated",{"_index":977,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblembeingcreated(relations",{"_index":986,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblemsourcecolumns",{"_index":796,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["getproblemsourceoptions",{"_index":797,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["getproblemsourceordinalvalues",{"_index":523,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblemsourceordinalvalues(connection",{"_index":546,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblemsourceschemas",{"_index":524,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{}}}],["getproblemsourceschemas(connection",{"_index":549,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblemsourceselectedcolumns",{"_index":798,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["getproblemsourceselectedcolumns(problem",{"_index":988,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblemsourceselectedcolumnsnewproblem",{"_index":799,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["getproblemsourceselectedcolumnsnewproblem(problem",{"_index":990,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblemsourceselectedordinalcolumns",{"_index":800,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["getproblemsourceselectedordinalcolumns(problem",{"_index":992,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblemsourcetables",{"_index":525,"title":{},"body":{"injectables/ConnectionService.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["getproblemsourcetables(body",{"_index":820,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["getproblemsourcetables(connection",{"_index":551,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblemsourcetables(schema",{"_index":899,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["getproblemsourcetablesdto",{"_index":674,"title":{"classes/GetProblemSourceTablesDto.html":{}},"body":{"classes/GetProblemSourceTablesDto.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getting",{"_index":1265,"title":{"index.html":{}},"body":{}}],["goal",{"_index":476,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/SaveProblemSourceColumnsDto.html":{}}}],["goalfactor",{"_index":1084,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["grow",{"_index":1300,"title":{},"body":{"index.html":{}}}],["hacked",{"_index":764,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["handlerequest",{"_index":710,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["handlerequest(err",{"_index":711,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["hash",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedresettoken",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedtoken",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":143,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["host",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{}}}],["hrivera@unal.edu.co",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["httponly",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1317,"title":{},"body":{"index.html":{}}}],["id",{"_index":9,"title":{},"body":{"entities/Algorithm.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/JwtStrategyRefreshToken.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1210,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":740,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["implements",{"_index":680,"title":{},"body":{"classes/IsValidPassword.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":30,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/UserModule.html":{}}}],["in')@useguards(jwtrefreshauthguard",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["in.ts",{"_index":1223,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Algorithm.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":1058,"title":{},"body":{"interfaces/ProblemSourceMappedColumns.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["info.message",{"_index":718,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["information_schema",{"_index":590,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["information_schema.columns",{"_index":599,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["information_schema.schemata",{"_index":589,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["information_schema.tables",{"_index":583,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["inject",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":139,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":140,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/ProblemService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(algorithm",{"_index":1019,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(basecasecolumn",{"_index":1016,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(connection",{"_index":562,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["injectrepository(mappedvalue",{"_index":1017,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(problem",{"_index":1015,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(refreshtoken",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(registry",{"_index":1018,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(user",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1279,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1281,"title":{},"body":{"index.html":{}}}],["interface",{"_index":513,"title":{"interfaces/ConnectionOptions.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{}},"body":{"interfaces/ConnectionOptions.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["interfaces",{"_index":515,"title":{},"body":{"interfaces/ConnectionOptions.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"overview.html":{}}}],["invalid",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["invalid_body",{"_index":1205,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["isarray",{"_index":1086,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["isbeingcreated",{"_index":948,"title":{},"body":{"entities/Problem.html":{},"injectables/ProblemService.html":{}}}],["isboolean",{"_index":617,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["isemail",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":1089,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["isenum({ordinalcolumns",{"_index":1092,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["isenum({predictingfactors",{"_index":1083,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["isglobal",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["isobject",{"_index":1103,"title":{},"body":{"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}}}],["isstring",{"_index":612,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{}}}],["isstring({message",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isvalidpassword",{"_index":655,"title":{"classes/IsValidPassword.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"coverage.html":{}}}],["joi",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().required().default(5432",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('admin",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('localhost",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('reasoner",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":1307,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":707,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["jwtbaseauthguard",{"_index":720,"title":{"injectables/JwtBaseAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":738,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["jwtmodule",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshauthguard",{"_index":203,"title":{"injectables/JwtRefreshAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"coverage.html":{}}}],["jwtresetauthguard",{"_index":204,"title":{"injectables/JwtResetAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"coverage.html":{}}}],["jwtservice",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":310,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategyrefreshtoken",{"_index":311,"title":{"injectables/JwtStrategyRefreshToken.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategyresetpassword",{"_index":312,"title":{"injectables/JwtStrategyResetPassword.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategyResetPassword.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1314,"title":{},"body":{"index.html":{}}}],["key",{"_index":628,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{}}}],["license",{"_index":1320,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1297,"title":{},"body":{"index.html":{}}}],["line",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["link",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":1201,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["literal",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"controllers/ParameterizerController.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"injectables/UsersService.html":{}}}],["local",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":207,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":313,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logged",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":695,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["mail",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["manytoone",{"_index":471,"title":{},"body":{"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{}}}],["manytoone(undefined",{"_index":466,"title":{},"body":{"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{}}}],["map((pattern",{"_index":701,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["mapped",{"_index":472,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["mappedvalue",{"_index":462,"title":{"entities/MappedValue.html":{}},"body":{"entities/BaseCaseColumn.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["mappedvalue.basecasecolumn",{"_index":463,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["mappedvalues",{"_index":459,"title":{},"body":{"entities/BaseCaseColumn.html":{},"injectables/ProblemService.html":{}}}],["mappedvalues.map",{"_index":1038,"title":{},"body":{"injectables/ProblemService.html":{}}}],["mappedvaluesrepository",{"_index":788,"title":{"classes/MappedValuesRepository.html":{}},"body":{"classes/MappedValuesRepository.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["mappedvaluetosave",{"_index":1043,"title":{},"body":{"injectables/ProblemService.html":{}}}],["mappedvaluetosave.basecasecolumn",{"_index":1044,"title":{},"body":{"injectables/ProblemService.html":{}}}],["mappedvaluetosave.mappedvalue",{"_index":1046,"title":{},"body":{"injectables/ProblemService.html":{}}}],["mappedvaluetosave.ordinalvalue",{"_index":1045,"title":{},"body":{"injectables/ProblemService.html":{}}}],["matching",{"_index":43,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["maximum",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(14",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":565,"title":{},"body":{"injectables/ConnectionService.html":{},"classes/CreateUserDto.html":{},"injectables/ParameterizerService.html":{}}}],["message.split",{"_index":1204,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["messages",{"_index":693,"title":{},"body":{"classes/IsValidPassword.html":{},"injectables/ValidationPipe.html":{}}}],["messages.flatmap((message",{"_index":1193,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["messages[index",{"_index":704,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["metadata",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":1176,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methods",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["minlength",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1262,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1296,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1287,"title":{},"body":{"index.html":{}}}],["module",{"_index":65,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":67,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1310,"title":{},"body":{"index.html":{}}}],["motherfucker",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["myśliwiec",{"_index":1315,"title":{},"body":{"index.html":{}}}],["name",{"_index":10,"title":{},"body":{"entities/Algorithm.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"entities/Registry.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["need",{"_index":1198,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["nest",{"_index":1277,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1319,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpassword",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["newproblem",{"_index":571,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newproblem.connection.id",{"_index":573,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newproblem.id",{"_index":575,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newproblem.user.id",{"_index":574,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newrefreshtoken",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefreshtokenentity",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["newregistry",{"_index":631,"title":{"interfaces/NewRegistry.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["newuser",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.id",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["no_problem_being_created",{"_index":918,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["node.js",{"_index":1268,"title":{},"body":{"index.html":{}}}],["none",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["not('goal",{"_index":1036,"title":{},"body":{"injectables/ProblemService.html":{}}}],["notfoundexception",{"_index":553,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{}}}],["npm",{"_index":1280,"title":{},"body":{"index.html":{}}}],["null",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{}}}],["nullable",{"_index":28,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Problem.html":{},"entities/Registry.html":{}}}],["number",{"_index":630,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"classes/IsValidPassword.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"injectables/ValidationPipe.html":{}}}],["number(port",{"_index":667,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["numeric",{"_index":41,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["numericcolumns",{"_index":1094,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["object",{"_index":1184,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["object.entries(selectedordinalcolumns",{"_index":1042,"title":{},"body":{"injectables/ProblemService.html":{}}}],["object.values(e.constraints",{"_index":1191,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["old",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":694,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["onetomany",{"_index":32,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/Problem.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":23,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/Problem.html":{},"entities/User.html":{}}}],["open",{"_index":1298,"title":{},"body":{"index.html":{}}}],["option",{"_index":1026,"title":{},"body":{"injectables/ProblemService.html":{}}}],["optional",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["options",{"_index":634,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":847,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["options.dto.ts",{"_index":611,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:11",{"_index":613,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":619,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:17",{"_index":615,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:20",{"_index":618,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:5",{"_index":614,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:8",{"_index":616,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.interface",{"_index":561,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/ParameterizerService.html":{}}}],["options.interface.ts",{"_index":517,"title":{},"body":{"interfaces/ConnectionOptions.html":{},"coverage.html":{}}}],["ordered",{"_index":1200,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["ordinal",{"_index":39,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"controllers/ParameterizerController.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["ordinalcolumns",{"_index":1098,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["ordinalvalue",{"_index":629,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{}}}],["out",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1324,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1235,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameterizer",{"_index":794,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["parameterizer.controller",{"_index":883,"title":{},"body":{"modules/ParameterizerModule.html":{}}}],["parameterizer.service",{"_index":849,"title":{},"body":{"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{}}}],["parameterizer.types",{"_index":850,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["parameterizer/parameterizer.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["parameterizercontroller",{"_index":792,"title":{"controllers/ParameterizerController.html":{}},"body":{"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"coverage.html":{}}}],["parameterizermodule",{"_index":75,"title":{"modules/ParameterizerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ParameterizerModule.html":{},"modules.html":{},"overview.html":{}}}],["parameterizerservice",{"_index":848,"title":{"injectables/ParameterizerService.html":{}},"body":{"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{},"overview.html":{}}}],["parameters",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["parser",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":537,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{}}}],["pass",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":734,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":735,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":736,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":752,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["passthrough",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password.strategy",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{}}}],["password.strategy.ts",{"_index":765,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{},"coverage.html":{}}}],["password.strategy.ts:10",{"_index":766,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["password.strategy.ts:19",{"_index":767,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["password.ts",{"_index":679,"title":{},"body":{"classes/IsValidPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.ts:13",{"_index":685,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["password.ts:9",{"_index":688,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["patch",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["patch('reset",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('save",{"_index":837,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["patched",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pattern.test(args.value",{"_index":703,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["pattern.test(text",{"_index":692,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["payload",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/UsersService.html":{}}}],["payload.sub",{"_index":743,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["payload.username",{"_index":744,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["personalizations",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":624,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"dependencies.html":{}}}],["pg_catalog",{"_index":591,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["pg_toast",{"_index":592,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["pipetransform",{"_index":1180,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoinstance",{"_index":1181,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoinstance(metatype",{"_index":1185,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":1308,"title":{},"body":{"index.html":{}}}],["port",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"injectables/DatabaseService.html":{}}}],["post",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["post('create",{"_index":825,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["post('get",{"_index":821,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["post('save",{"_index":829,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["post('sign",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["predicting",{"_index":474,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/SaveProblemSourceColumnsDto.html":{}}}],["predictingfactors",{"_index":1090,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["prefix",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["primarygeneratedcolumn",{"_index":33,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":16,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["private",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["problem",{"_index":22,"title":{"entities/Problem.html":{}},"body":{"entities/Algorithm.html":{},"modules/AppModule.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"classes/GetProblemSourceTablesDto.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/Registry.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"entities/User.html":{},"coverage.html":{}}}],["problem.algorithm",{"_index":24,"title":{},"body":{"entities/Algorithm.html":{},"injectables/ProblemService.html":{}}}],["problem.columns",{"_index":467,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["problem.connection",{"_index":493,"title":{},"body":{"entities/Connection.html":{},"injectables/ParameterizerService.html":{}}}],["problem.connection.id",{"_index":929,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["problem.entity",{"_index":35,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Registry.html":{}}}],["problem.id",{"_index":1034,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problem.registries",{"_index":1072,"title":{},"body":{"entities/Registry.html":{}}}],["problem.schema",{"_index":941,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["problem.service",{"_index":973,"title":{},"body":{"modules/ProblemModule.html":{}}}],["problem.table",{"_index":940,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["problem.user",{"_index":1128,"title":{},"body":{"entities/User.html":{}}}],["problem/entities/problem.entity",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["problem/problem.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["problemmodule",{"_index":76,"title":{"modules/ProblemModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConnectionModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules.html":{},"overview.html":{}}}],["problems",{"_index":11,"title":{},"body":{"entities/Algorithm.html":{},"entities/Connection.html":{},"entities/User.html":{}}}],["problemservice",{"_index":530,"title":{"injectables/ProblemService.html":{}},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"coverage.html":{},"overview.html":{}}}],["problemsource",{"_index":533,"title":{"interfaces/ProblemSource.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["problemsource.schema",{"_index":1023,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problemsource.table",{"_index":1024,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problemsourcecolumn",{"_index":556,"title":{"interfaces/ProblemSourceColumn.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["problemsourcecolumns",{"_index":1004,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problemsourceexists",{"_index":927,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["problemsourcemappedcolumns",{"_index":627,"title":{"interfaces/ProblemSourceMappedColumns.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["problemsourceschema",{"_index":557,"title":{"interfaces/ProblemSourceSchema.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["problemsourcesections",{"_index":1001,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problemsourcetable",{"_index":558,"title":{"interfaces/ProblemSourceTable.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["problemsrepository",{"_index":979,"title":{"classes/ProblemsRepository.html":{}},"body":{"injectables/ProblemService.html":{},"classes/ProblemsRepository.html":{},"coverage.html":{}}}],["problemsservice",{"_index":529,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["problesourceselectedcolumnsnewproblem",{"_index":633,"title":{"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["process.env.node_env",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["production",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["progressive",{"_index":1267,"title":{},"body":{"index.html":{}}}],["project",{"_index":1299,"title":{},"body":{"index.html":{}}}],["promise",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"classes/GetProblemSourceTablesDto.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"entities/User.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["provided",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{}}}],["query",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["query('email",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["query('token",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["read",{"_index":1309,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/ParameterizerController.html":{},"injectables/SendgridService.html":{}}}],["record",{"_index":1102,"title":{},"body":{"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}}}],["recovepassworddescription",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recoverpassword",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["recoverpassword(email",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["recoverpasswordbadrequest",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recoverpasswordsuccessfulresponse",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recovery",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["reflect",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refresh_token_hacked",{"_index":763,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshed",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":94,"title":{"entities/RefreshToken.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/User.html":{},"coverage.html":{}}}],["refreshtoken(req",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(userid",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken.entity",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/RefreshTokensRepository.html":{}}}],["refreshtoken.user",{"_index":1130,"title":{},"body":{"entities/User.html":{}}}],["refreshtokendescription",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenmatch",{"_index":757,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshtokenpayload",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":756,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"entities/User.html":{}}}],["refreshtokens.repository",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshtokensrepository",{"_index":328,"title":{"classes/RefreshTokensRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"coverage.html":{}}}],["refreshtokensuccessfulresponse",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenunauthorizedresponse",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refused",{"_index":673,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["registered",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registries",{"_index":949,"title":{},"body":{"entities/Problem.html":{},"injectables/ProblemService.html":{}}}],["registriesrepository",{"_index":981,"title":{},"body":{"injectables/ProblemService.html":{}}}],["registry",{"_index":830,"title":{"entities/Registry.html":{}},"body":{"controllers/ParameterizerController.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"coverage.html":{}}}],["registry.entity",{"_index":966,"title":{},"body":{"entities/Problem.html":{}}}],["registry.name",{"_index":1050,"title":{},"body":{"injectables/ProblemService.html":{}}}],["registry.problem",{"_index":959,"title":{},"body":{"entities/Problem.html":{},"injectables/ProblemService.html":{}}}],["registry.value",{"_index":1052,"title":{},"body":{"injectables/ProblemService.html":{}}}],["relations",{"_index":755,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/ProblemService.html":{}}}],["remove",{"_index":760,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["repositories/algorithms.repository",{"_index":1014,"title":{},"body":{"injectables/ProblemService.html":{}}}],["repositories/base",{"_index":1009,"title":{},"body":{"injectables/ProblemService.html":{}}}],["repositories/mapped",{"_index":1011,"title":{},"body":{"injectables/ProblemService.html":{}}}],["repositories/problems.repository",{"_index":1013,"title":{},"body":{"injectables/ProblemService.html":{}}}],["repository",{"_index":48,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"classes/BaseCaseColumns.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/MappedValuesRepository.html":{},"classes/ProblemsRepository.html":{},"classes/RefreshTokensRepository.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{},"controllers/ParameterizerController.html":{}}}],["req.cookies.refreshtoken",{"_index":750,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["req.error",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.userid",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{},"controllers/ParameterizerController.html":{}}}],["requesttype",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["res",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyResetPassword.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset_password_token_invalid_payload",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(password",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(userid",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpasswordcorrectpayload",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resetpassworddescription",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordsuccessfulresponse",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordtoken",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordunauthorizedresponse",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resettoken",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["resettokenpayload",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SendgridService.html":{}}}],["response.body.errors",{"_index":1119,"title":{},"body":{"injectables/SendgridService.html":{}}}],["response.clearcookie('refreshtoken",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.cookie('refreshtoken",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(202).json",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(401).json(req.error",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(statuscode).json(error",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["rest",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{}}}],["result",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProblemService.html":{}}}],["results",{"_index":42,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["returns",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["reuse",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["rimraf",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["row.column_name",{"_index":601,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["row.schema_name",{"_index":595,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["row.table_name",{"_index":597,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["row[columnname",{"_index":607,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rows",{"_index":579,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rows.map((row",{"_index":593,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rows[0].exists",{"_index":586,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rtr",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["run",{"_index":1284,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["samesite",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["save",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["save(user",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveconnectionoptions",{"_index":801,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveconnectionoptions(body",{"_index":824,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["savenewproblemselectedcolumns",{"_index":802,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["savenewproblemselectedcolumns(body",{"_index":827,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["savenewregistryselectedcolumns",{"_index":887,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["savenewregistryselectedcolumns(problem",{"_index":994,"title":{},"body":{"injectables/ProblemService.html":{}}}],["savenewregistryselectedcolumns(selectedvalues",{"_index":901,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["savenewregistryselectedcolumnsdto",{"_index":828,"title":{"classes/SaveNewRegistrySelectedColumnsDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"coverage.html":{}}}],["saveproblemalgorithm",{"_index":803,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["saveproblemalgorithm(algorithm",{"_index":904,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemalgorithm(body",{"_index":832,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemalgorithm(problem",{"_index":996,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemalgorithmdto",{"_index":833,"title":{"classes/SaveProblemAlgorithmDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"classes/SaveProblemAlgorithmDto.html":{},"coverage.html":{}}}],["saveproblemsource",{"_index":804,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["saveproblemsource(body",{"_index":835,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsource(problem",{"_index":998,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemsource(problemsource",{"_index":906,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemsourcecolumns",{"_index":805,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["saveproblemsourcecolumns(body",{"_index":839,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsourcecolumns(columns",{"_index":908,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemsourcecolumns(problem",{"_index":1000,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemsourcecolumnsdto",{"_index":854,"title":{"classes/SaveProblemSourceColumnsDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnstype",{"_index":806,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsourcecolumnstype(body",{"_index":841,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsourcecolumnstypedto",{"_index":855,"title":{"classes/SaveProblemSourceColumnsTypeDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnstypes",{"_index":888,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["saveproblemsourcecolumnstypes(columns",{"_index":910,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemsourcecolumnstypes(problem",{"_index":1003,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemsourcedto",{"_index":836,"title":{"classes/SaveProblemSourceDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"classes/SaveProblemSourceDto.html":{},"coverage.html":{}}}],["saveproblemsourceselectedordinalcolumns",{"_index":807,"title":{"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["saveproblemsourceselectedordinalcolumns(body",{"_index":844,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsourceselectedordinalcolumns(problem",{"_index":1006,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemsourceselectedordinalcolumns(selectedordinalcolumns",{"_index":912,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["scalable",{"_index":1272,"title":{},"body":{"index.html":{}}}],["schema",{"_index":544,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"classes/GetProblemSourceTablesDto.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveProblemSourceDto.html":{},"miscellaneous/variables.html":{}}}],["schema_name",{"_index":588,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["schemaname",{"_index":594,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{}}}],["schemas",{"_index":814,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["schemas.length",{"_index":922,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["schemas_not_found",{"_index":923,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["schema}.${table",{"_index":604,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["secret",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":741,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["section",{"_index":1025,"title":{},"body":{"injectables/ProblemService.html":{}}}],["section.droppableid",{"_index":1031,"title":{},"body":{"injectables/ProblemService.html":{}}}],["section.options",{"_index":1027,"title":{},"body":{"injectables/ProblemService.html":{}}}],["sections",{"_index":867,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["sectiontitle",{"_index":1082,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["secure",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":581,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["selected",{"_index":816,"title":{},"body":{"controllers/ParameterizerController.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["selectedordinalcolumns",{"_index":872,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}}}],["selectedvalues",{"_index":903,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["send",{"_index":1110,"title":{},"body":{"injectables/SendgridService.html":{},"miscellaneous/variables.html":{}}}],["send(mail",{"_index":1112,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["sendgrid.maildatarequired",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["sendgrid.send(mail",{"_index":1116,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid.service",{"_index":1108,"title":{},"body":{"modules/SendgridModule.html":{}}}],["sendgrid.setapikey(this.configservice.get('sendgrid_api_key",{"_index":1114,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid/mail",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{},"dependencies.html":{}}}],["sendgrid/sendgrid.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["sendgrid/sendgrid.service",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["sendgridmodule",{"_index":77,"title":{"modules/SendgridModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules.html":{},"overview.html":{}}}],["sendgridservice",{"_index":79,"title":{"injectables/SendgridService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"coverage.html":{},"overview.html":{}}}],["sengrid_error",{"_index":1118,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sent",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["separated",{"_index":1197,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["server",{"_index":1273,"title":{},"body":{"index.html":{}}}],["side",{"_index":1274,"title":{},"body":{"index.html":{}}}],["signin",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(req",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["signincorrectpayload",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signindescription",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinsuccessfulresponse",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinunauthorizedresponse",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signup",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(undefined",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupbadrequestresponse",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signupcorrectpayload",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signupdescription",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signupsuccessfulresponse",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{}}}],["source.dto",{"_index":852,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["source.dto.ts",{"_index":1099,"title":{},"body":{"classes/SaveProblemSourceDto.html":{},"coverage.html":{}}}],["source.dto.ts:5",{"_index":1100,"title":{},"body":{"classes/SaveProblemSourceDto.html":{}}}],["source.dto.ts:8",{"_index":1101,"title":{},"body":{"classes/SaveProblemSourceDto.html":{}}}],["source_not_found",{"_index":930,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["special",{"_index":697,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["specific",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["sponsors",{"_index":1302,"title":{},"body":{"index.html":{}}}],["src/.../jwt",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1264,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../recover",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../reset",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sign",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":142,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:134",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:152",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:171",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:62",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:77",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:98",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:112",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:136",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:189",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:66",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:85",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:94",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/create",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/is",{"_index":678,"title":{},"body":{"classes/IsValidPassword.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":708,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":727,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":731,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":729,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":770,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":772,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:13",{"_index":776,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:8",{"_index":774,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/refreshtoken.entity",{"_index":1133,"title":{},"body":{"entities/User.html":{}}}],["src/auth/refreshtoken.entity.ts",{"_index":1061,"title":{},"body":{"entities/RefreshToken.html":{},"coverage.html":{}}}],["src/auth/refreshtoken.entity.ts:11",{"_index":1063,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:13",{"_index":1067,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:7",{"_index":1064,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:9",{"_index":1065,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtokens.repository.ts",{"_index":1068,"title":{},"body":{"classes/RefreshTokensRepository.html":{},"coverage.html":{}}}],["src/auth/swagger/recover",{"_index":1218,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/swagger/refresh",{"_index":1219,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/swagger/reset",{"_index":1221,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/swagger/sign",{"_index":1222,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/connection/connection",{"_index":516,"title":{},"body":{"interfaces/ConnectionOptions.html":{},"injectables/DatabaseService.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{}}}],["src/connection/connection.entity",{"_index":625,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/User.html":{}}}],["src/connection/connection.entity.ts",{"_index":483,"title":{},"body":{"entities/Connection.html":{},"coverage.html":{}}}],["src/connection/connection.entity.ts:14",{"_index":490,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:16",{"_index":489,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:18",{"_index":492,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:20",{"_index":488,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:22",{"_index":498,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:24",{"_index":491,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:26",{"_index":495,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:28",{"_index":487,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:30",{"_index":494,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:32",{"_index":497,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.module",{"_index":884,"title":{},"body":{"modules/ParameterizerModule.html":{}}}],["src/connection/connection.module.ts",{"_index":506,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["src/connection/connection.service",{"_index":914,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/connection/connection.service.ts",{"_index":518,"title":{},"body":{"injectables/ConnectionService.html":{},"coverage.html":{}}}],["src/connection/connection.service.ts:100",{"_index":550,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:118",{"_index":552,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:135",{"_index":545,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:151",{"_index":548,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:18",{"_index":531,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:27",{"_index":541,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:44",{"_index":538,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:78",{"_index":535,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connections.repository.ts",{"_index":608,"title":{},"body":{"classes/ConnectionsRepository.html":{},"coverage.html":{}}}],["src/database/database.module",{"_index":508,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["src/database/database.module.ts",{"_index":661,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.service",{"_index":554,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/database/database.service.ts",{"_index":663,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/database/database.service.ts:8",{"_index":666,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/main.ts",{"_index":1227,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/parameterizer/dtos/create",{"_index":610,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{},"coverage.html":{}}}],["src/parameterizer/dtos/get",{"_index":675,"title":{},"body":{"classes/GetProblemSourceTablesDto.html":{},"coverage.html":{}}}],["src/parameterizer/dtos/save",{"_index":1008,"title":{},"body":{"injectables/ProblemService.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["src/parameterizer/parameterizer.controller.ts",{"_index":793,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["src/parameterizer/parameterizer.controller.ts:102",{"_index":819,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:109",{"_index":845,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:120",{"_index":818,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:127",{"_index":831,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:134",{"_index":811,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:139",{"_index":834,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:38",{"_index":826,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:48",{"_index":815,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:55",{"_index":823,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:65",{"_index":838,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:72",{"_index":813,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:79",{"_index":840,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:87",{"_index":817,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:94",{"_index":843,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.module.ts",{"_index":882,"title":{},"body":{"modules/ParameterizerModule.html":{}}}],["src/parameterizer/parameterizer.service.ts",{"_index":885,"title":{},"body":{"injectables/ParameterizerService.html":{},"coverage.html":{}}}],["src/parameterizer/parameterizer.service.ts:109",{"_index":907,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:143",{"_index":894,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:180",{"_index":909,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:202",{"_index":896,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:223",{"_index":911,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:245",{"_index":898,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:26",{"_index":890,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:272",{"_index":913,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:295",{"_index":897,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:317",{"_index":902,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:32",{"_index":892,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:339",{"_index":893,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:344",{"_index":905,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:46",{"_index":895,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:77",{"_index":900,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.types",{"_index":559,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/ProblemService.html":{}}}],["src/parameterizer/parameterizer.types.ts",{"_index":622,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"coverage.html":{}}}],["src/parameterizer/parameterizer.types.ts:43",{"_index":1059,"title":{},"body":{"interfaces/ProblemSourceMappedColumns.html":{}}}],["src/problem/entities/algorithm.entity",{"_index":858,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["src/problem/entities/algorithm.entity.ts",{"_index":6,"title":{},"body":{"entities/Algorithm.html":{},"coverage.html":{}}}],["src/problem/entities/algorithm.entity.ts:11",{"_index":29,"title":{},"body":{"entities/Algorithm.html":{}}}],["src/problem/entities/algorithm.entity.ts:13",{"_index":25,"title":{},"body":{"entities/Algorithm.html":{}}}],["src/problem/entities/algorithm.entity.ts:7",{"_index":18,"title":{},"body":{"entities/Algorithm.html":{}}}],["src/problem/entities/algorithm.entity.ts:9",{"_index":21,"title":{},"body":{"entities/Algorithm.html":{}}}],["src/problem/entities/base",{"_index":456,"title":{},"body":{"entities/BaseCaseColumn.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{}}}],["src/problem/entities/mapped",{"_index":780,"title":{},"body":{"entities/MappedValue.html":{},"coverage.html":{}}}],["src/problem/entities/problem.entity",{"_index":499,"title":{},"body":{"entities/Connection.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/User.html":{}}}],["src/problem/entities/problem.entity.ts",{"_index":947,"title":{},"body":{"entities/Problem.html":{},"coverage.html":{}}}],["src/problem/entities/problem.entity.ts:17",{"_index":956,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:19",{"_index":958,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:21",{"_index":957,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:23",{"_index":961,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:25",{"_index":962,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:27",{"_index":955,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:29",{"_index":964,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:31",{"_index":953,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:33",{"_index":960,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:35",{"_index":951,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/registry.entity.ts",{"_index":1069,"title":{},"body":{"entities/Registry.html":{},"coverage.html":{}}}],["src/problem/entities/registry.entity.ts:11",{"_index":1074,"title":{},"body":{"entities/Registry.html":{}}}],["src/problem/entities/registry.entity.ts:13",{"_index":1073,"title":{},"body":{"entities/Registry.html":{}}}],["src/problem/entities/registry.entity.ts:7",{"_index":1070,"title":{},"body":{"entities/Registry.html":{}}}],["src/problem/entities/registry.entity.ts:9",{"_index":1071,"title":{},"body":{"entities/Registry.html":{}}}],["src/problem/problem.module",{"_index":509,"title":{},"body":{"modules/ConnectionModule.html":{},"modules/ParameterizerModule.html":{}}}],["src/problem/problem.module.ts",{"_index":970,"title":{},"body":{"modules/ProblemModule.html":{}}}],["src/problem/problem.service",{"_index":560,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{}}}],["src/problem/problem.service.ts",{"_index":975,"title":{},"body":{"injectables/ProblemService.html":{},"coverage.html":{}}}],["src/problem/problem.service.ts:101",{"_index":991,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:125",{"_index":1005,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:145",{"_index":993,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:155",{"_index":1007,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:179",{"_index":995,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:197",{"_index":985,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:202",{"_index":997,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:25",{"_index":982,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:38",{"_index":984,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:47",{"_index":987,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:58",{"_index":999,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:71",{"_index":1002,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:91",{"_index":989,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/repositories/algorithms.repository.ts",{"_index":46,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"coverage.html":{}}}],["src/problem/repositories/base",{"_index":479,"title":{},"body":{"classes/BaseCaseColumns.html":{},"coverage.html":{}}}],["src/problem/repositories/mapped",{"_index":789,"title":{},"body":{"classes/MappedValuesRepository.html":{},"coverage.html":{}}}],["src/problem/repositories/problems.repository.ts",{"_index":1060,"title":{},"body":{"classes/ProblemsRepository.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.module",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/sendgrid/sendgrid.module.ts",{"_index":1107,"title":{},"body":{"modules/SendgridModule.html":{}}}],["src/sendgrid/sendgrid.service",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/sendgrid/sendgrid.service.ts",{"_index":1109,"title":{},"body":{"injectables/SendgridService.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.service.ts:11",{"_index":1113,"title":{},"body":{"injectables/SendgridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:6",{"_index":1111,"title":{},"body":{"injectables/SendgridService.html":{}}}],["src/users/user.entity",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Connection.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{}}}],["src/users/user.entity.ts",{"_index":1120,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:11",{"_index":1125,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:13",{"_index":1127,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:15",{"_index":1131,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:17",{"_index":1132,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":1129,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":1124,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":1126,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConnectionModule.html":{}}}],["src/users/users.module.ts",{"_index":1137,"title":{},"body":{"modules/UserModule.html":{}}}],["src/users/users.repository.ts",{"_index":1142,"title":{},"body":{"classes/UsersRepository.html":{},"coverage.html":{}}}],["src/users/users.service",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["src/users/users.service.ts",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:25",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:7",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/validation.pipe.ts",{"_index":1171,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/utils/validation.pipe.ts:12",{"_index":1179,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/utils/validation.pipe.ts:35",{"_index":1175,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["ssl",{"_index":485,"title":{},"body":{"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{}}}],["start",{"_index":1285,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1288,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1289,"title":{},"body":{"index.html":{}}}],["started",{"_index":1266,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1278,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1211,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":713,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["stay",{"_index":1311,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":733,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["strict",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["string",{"_index":14,"title":{},"body":{"entities/Algorithm.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["string(entry.value",{"_index":1053,"title":{},"body":{"injectables/ProblemService.html":{}}}],["sub",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["substrings",{"_index":1202,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["summary",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":737,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["super.handlerequest(err",{"_index":722,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["support",{"_index":1303,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1322,"title":{},"body":{"modules.html":{}}}],["swagger/recover",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/refresh",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/reset",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/sign",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["synchronize",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":543,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveProblemSourceDto.html":{},"coverage.html":{}}}],["table_name",{"_index":585,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["table_schema",{"_index":584,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["tablename",{"_index":596,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{}}}],["tables",{"_index":822,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["tables.length",{"_index":925,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["tables.ts",{"_index":676,"title":{},"body":{"classes/GetProblemSourceTablesDto.html":{},"coverage.html":{}}}],["tables.ts:5",{"_index":677,"title":{},"body":{"classes/GetProblemSourceTablesDto.html":{}}}],["tables_not_found",{"_index":926,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1234,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":460,"title":{},"body":{"entities/BaseCaseColumn.html":{},"injectables/ProblemService.html":{}}}],["templateid",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1292,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1295,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1294,"title":{},"body":{"index.html":{}}}],["testpassed",{"_index":702,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["tests",{"_index":1291,"title":{},"body":{"index.html":{}}}],["text",{"_index":689,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["thanks",{"_index":1301,"title":{},"body":{"index.html":{}}}],["this.algorithmsrepository.find",{"_index":1055,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.algorithmsrepository.findone",{"_index":1057,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.appservice.gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.recoverpassword(email",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(req.user",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(body",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":778,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.basecasecolumnsrepository.find",{"_index":1035,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.basecasecolumnsrepository.findone",{"_index":1039,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.basecasecolumnsrepository.save(column",{"_index":1041,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.basecasecolumnsrepository.save(columntosave",{"_index":1033,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.configservice.get",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('frontend_domain",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_expiration_time",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_expiration_time",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_reset_password_expiration_time",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_reset_password_secret",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.connectionservice.checkifsourceexists",{"_index":928,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.createconnection",{"_index":915,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.getcurrentproblemsourcecolumns",{"_index":932,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.getproblemsourceordinalvalues",{"_index":939,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.getproblemsourceschemas",{"_index":921,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.getproblemsourcetables",{"_index":924,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionsrepository.create(databasemetadata",{"_index":567,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.connectionsrepository.findoneby",{"_index":563,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.connectionsrepository.save",{"_index":570,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.createnewaccesstoken(user",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createnewrefreshtoken(user",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.databaseservice.getdatabaseinstance",{"_index":566,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.databaseservice.getdatabaseinstance(connection",{"_index":578,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.getconnectionbyid(connectionid",{"_index":576,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.jwtservice.sign(accesstokenpayload",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(refreshtokenpayload",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(resettokenpayload",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mappedvalues.save(mappedvaluetosave",{"_index":1047,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.parameterizerservice.createnewconnection(body",{"_index":862,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getavailablealgorithms",{"_index":876,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourcecolumns",{"_index":866,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourceschemas",{"_index":863,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourceselectedcolumns",{"_index":869,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourceselectedcolumnsnewproblem",{"_index":874,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourceselectedordinalcolumns",{"_index":871,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourcetables(schema",{"_index":864,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.savenewregistryselectedcolumns(body",{"_index":875,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemalgorithm(algorithmname",{"_index":878,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemsource(body",{"_index":865,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemsourcecolumns(sections",{"_index":868,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemsourcecolumnstypes(sections",{"_index":870,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemsourceselectedordinalcolumns",{"_index":873,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.problemservice.getavailablealgorithms",{"_index":945,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.getproblembeingcreated",{"_index":917,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.getproblemsourceselectedcolumns",{"_index":936,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.getproblemsourceselectedcolumnsnewproblem",{"_index":943,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.getproblemsourceselectedordinalcolumns(problem",{"_index":938,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.savenewregistryselectedcolumns",{"_index":944,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemalgorithm",{"_index":946,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemsource",{"_index":931,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemsourcecolumns",{"_index":935,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemsourcecolumnstypes",{"_index":937,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemsourceselectedordinalcolumns",{"_index":942,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemsrepository.create",{"_index":1020,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.problemsrepository.findone",{"_index":1022,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.problemsrepository.save(problem",{"_index":1021,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.problemsservice.createproblem",{"_index":572,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.refreshtokensrepository.create",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokensrepository.delete",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["this.refreshtokensrepository.save(newrefreshtokenentity",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.registriesrepository.save(registry",{"_index":1054,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.sendgridservice.send(mail",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tovalidate(metatype",{"_index":1183,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.usersrepository.create(payload",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.createquerybuilder(alias",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone(options",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby(property",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone",{"_index":754,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["this.usersservice.findoneby",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{}}}],["this.usersservice.save(newuser",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.save(user",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"miscellaneous/variables.html":{}}}],["token.strategy",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":745,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{}}}],["token.strategy.ts:14",{"_index":746,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["token.strategy.ts:30",{"_index":748,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["token.ts",{"_index":1220,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":762,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["tostring",{"_index":706,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["touch",{"_index":1312,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1172,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1174,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":1173,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":1177,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1182,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["transport",{"_index":1115,"title":{},"body":{"injectables/SendgridService.html":{}}}],["transport[0].statuscode",{"_index":1117,"title":{},"body":{"injectables/SendgridService.html":{}}}],["triggerederrors",{"_index":699,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["true",{"_index":20,"title":{},"body":{"entities/Algorithm.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"injectables/JwtStrategyRefreshToken.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["try",{"_index":668,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/SendgridService.html":{}}}],["twitter",{"_index":1318,"title":{},"body":{"index.html":{}}}],["type",{"_index":12,"title":{},"body":{"entities/Algorithm.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":34,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"entities/User.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/ProblemModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":974,"title":{},"body":{"modules/ProblemModule.html":{}}}],["typeormmodule.forfeature([connection",{"_index":512,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["typeormmodule.forfeature([refreshtoken",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1140,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":842,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ValidationPipe.html":{}}}],["types.dto",{"_index":856,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["types.dto.ts",{"_index":1091,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{},"coverage.html":{}}}],["types.dto.ts:11",{"_index":1095,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["types.dto.ts:13",{"_index":1096,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["types.dto.ts:5",{"_index":1097,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["types.includes(metatype",{"_index":1207,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["unauthorized",{"_index":719,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":715,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":27,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"injectables/ValidationPipe.html":{}}}],["unit",{"_index":1290,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/ValidationPipe.html":{}}}],["unlicensed",{"_index":1332,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["up",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["up.ts",{"_index":1224,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["upper",{"_index":696,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["usefactory",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["useguards(jwtauthguard",{"_index":860,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["useguards(jwtrefreshauthguard",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtresetauthguard",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":96,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Connection.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.clientrefreshtoken",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.connections",{"_index":496,"title":{},"body":{"entities/Connection.html":{}}}],["user.dto",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.entity",{"_index":1138,"title":{},"body":{"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.problems",{"_index":963,"title":{},"body":{"entities/Problem.html":{}}}],["user.refreshtokens",{"_index":1066,"title":{},"body":{"entities/RefreshToken.html":{}}}],["user.resetpasswordtoken",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userid",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["user_not_found",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["usermodule",{"_index":78,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"controllers/ParameterizerController.html":{}}}],["usernamefield",{"_index":777,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users.service",{"_index":1139,"title":{},"body":{"modules/UserModule.html":{}}}],["users/user.entity",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["usersrepository",{"_index":1141,"title":{"classes/UsersRepository.html":{}},"body":{"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersservice",{"_index":336,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"coverage.html":{}}}],["valid'})@minlength(8",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["validate(email",{"_index":775,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(isvalidpassword",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate(object",{"_index":1187,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(payload",{"_index":730,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["validate(req",{"_index":747,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["validate(text",{"_index":687,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validateuser",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1195,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationarguments",{"_index":684,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validationpipe",{"_index":1170,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validationschema",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":620,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":690,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validatorconstraintinterface",{"_index":681,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["value",{"_index":632,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["value.entity",{"_index":473,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/MappedValuesRepository.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["value.entity.ts",{"_index":781,"title":{},"body":{"entities/MappedValue.html":{},"coverage.html":{}}}],["value.entity.ts:10",{"_index":785,"title":{},"body":{"entities/MappedValue.html":{}}}],["value.entity.ts:15",{"_index":783,"title":{},"body":{"entities/MappedValue.html":{}}}],["value.entity.ts:6",{"_index":784,"title":{},"body":{"entities/MappedValue.html":{}}}],["value.entity.ts:8",{"_index":786,"title":{},"body":{"entities/MappedValue.html":{}}}],["values",{"_index":606,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["values.repository",{"_index":1012,"title":{},"body":{"injectables/ProblemService.html":{}}}],["values.repository.ts",{"_index":790,"title":{},"body":{"classes/MappedValuesRepository.html":{},"coverage.html":{}}}],["variable",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1333,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1330,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":1286,"title":{},"body":{"index.html":{}}}],["website",{"_index":1316,"title":{},"body":{"index.html":{}}}],["world",{"_index":144,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":1306,"title":{},"body":{"index.html":{}}}],["z",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Algorithm.html":{"url":"entities/Algorithm.html","title":"entity - Algorithm","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Algorithm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/algorithm.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                problems\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/algorithm.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/algorithm.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, problem => problem.algorithm)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/algorithm.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({enum: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/algorithm.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Problem } from './problem.entity';\n\n@Entity()\nexport class Algorithm {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  name: string;\n  @Column({ enum: ['ordinal', 'boolean', 'numeric'], nullable: true })\n  type: string;\n  @OneToMany(() => Problem, (problem) => problem.algorithm)\n  problems: Problem;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlgorithmsRepository.html":{"url":"classes/AlgorithmsRepository.html","title":"class - AlgorithmsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlgorithmsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/algorithms.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { Algorithm } from '../entities/algorithm.entity';\n\nexport class AlgorithmsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConnectionModule\n\nConnectionModule\n\nAppModule -->\n\nConnectionModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nParameterizerModule\n\nParameterizerModule\n\nAppModule -->\n\nParameterizerModule->AppModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nAppModule -->\n\nProblemModule->AppModule\n\n\n\n\n\nSendgridModule\n\nSendgridModule\n\nAppModule -->\n\nSendgridModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSendgridService\n\nSendgridService\n\nAppModule -->\n\nSendgridService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            SendgridService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConnectionModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ParameterizerModule\n                        \n                        \n                            ProblemModule\n                        \n                        \n                            SendgridModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as Joi from 'joi';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { RefreshToken } from './auth/refreshToken.entity';\nimport { User } from './users/user.entity';\nimport { UserModule } from './users/users.module';\nimport { SendgridService } from './sendgrid/sendgrid.service';\nimport { SendgridModule } from './sendgrid/sendgrid.module';\nimport { DatabaseModule } from './database/database.module';\nimport { ParameterizerModule } from './parameterizer/parameterizer.module';\nimport { ProblemModule } from './problem/problem.module';\nimport { Problem } from './problem/entities/problem.entity';\nimport { ConnectionModule } from './connection/connection.module';\nimport { Connection } from './connection/connection.entity';\n\n@Module({\n  imports: [\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: Joi.object({\n        DB_HOST: Joi.string().required().default('localhost'),\n        DB_PORT: Joi.number().required().default(5432),\n        DB_USER: Joi.string().required().default('admin'),\n        DB_PASSWORD: Joi.string().required(),\n        DB_NAME: Joi.string().required().default('reasoner'),\n      }),\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USER'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [User, RefreshToken, Connection, Problem],\n        synchronize: true,\n        autoLoadEntities: true,\n      }),\n    }),\n    UserModule,\n    SendgridModule,\n    DatabaseModule,\n    ParameterizerModule,\n    ProblemModule,\n    ConnectionModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, SendgridService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfLoggedIn\n                            \n                            \n                                    Async\n                                recoverPassword\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfLoggedIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfLoggedIn(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('check-if-logged-in')@UseGuards(JwtRefreshAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recoverPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    recoverPassword(email: string, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(recovePasswordDescription)@ApiResponse(recoverPasswordSuccessfulResponse)@ApiResponse(recoverPasswordBadRequest)@Get('recover-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(refreshTokenDescription)@ApiResponse(refreshTokenSuccessfulResponse)@ApiResponse(refreshTokenUnauthorizedResponse)@UseGuards(JwtRefreshAuthGuard)@Get('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(password: string, resetPasswordToken: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(resetPasswordDescription)@ApiResponse(resetPasswordSuccessfulResponse)@ApiResponse(resetPasswordUnauthorizedResponse)@ApiBody(resetPasswordCorrectPayload)@UseGuards(JwtResetAuthGuard)@Patch('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resetPasswordToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(signInDescription)@ApiResponse(signInSuccessfulResponse)@ApiResponse(signInUnauthorizedResponse)@ApiBody(signInCorrectPayload)@UseGuards(LocalAuthGuard)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(body: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(signUpDescription)@ApiResponse(signUpSuccessfulResponse)@ApiResponse(signUpBadRequestResponse)@ApiBody(signUpCorrectPayload)@Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Patch,\n  Post,\n  Query,\n  Request,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ApiBody, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { Response, Request as RequestType } from 'express';\nimport { User } from 'src/users/user.entity';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from './create-user.dto';\nimport { JwtRefreshAuthGuard, JwtResetAuthGuard } from './jwt-auth.guard';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport * as SendGrid from '@sendgrid/mail';\nimport {\n  refreshTokenDescription,\n  refreshTokenSuccessfulResponse,\n  refreshTokenUnauthorizedResponse,\n} from './swagger/refresh-token';\nimport {\n  signInCorrectPayload,\n  signInDescription,\n  signInSuccessfulResponse,\n  signInUnauthorizedResponse,\n} from './swagger/sign-in';\nimport {\n  signUpBadRequestResponse,\n  signUpCorrectPayload,\n  signUpDescription,\n  signUpSuccessfulResponse,\n} from './swagger/sign-up';\nimport {\n  recovePasswordDescription,\n  recoverPasswordBadRequest,\n  recoverPasswordSuccessfulResponse,\n} from './swagger/recover-password';\nimport {\n  resetPasswordCorrectPayload,\n  resetPasswordDescription,\n  resetPasswordSuccessfulResponse,\n  resetPasswordUnauthorizedResponse,\n} from './swagger/reset-password';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private configService: ConfigService,\n  ) {}\n\n  @ApiOperation(signUpDescription)\n  @ApiResponse(signUpSuccessfulResponse)\n  @ApiResponse(signUpBadRequestResponse)\n  @ApiBody(signUpCorrectPayload)\n  @Post('sign-up')\n  async signUp(@Body() body: CreateUserDto): Promise;\n  }> {\n    const { resource } = await this.authService.signUp(body);\n\n    return { error: null, resource };\n  }\n\n  @ApiOperation(signInDescription)\n  @ApiResponse(signInSuccessfulResponse)\n  @ApiResponse(signInUnauthorizedResponse)\n  @ApiBody(signInCorrectPayload)\n  @UseGuards(LocalAuthGuard)\n  @Post('sign-in')\n  async signIn(\n    @Request() req: RequestType & { user: User },\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const { resource } = await this.authService.signIn(req.user);\n    const { refreshToken, ...rest } = resource;\n    response.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      domain: this.configService.get('FRONTEND_DOMAIN'),\n      maxAge: 1000 * 60 * 60 * 24 * 30,\n    });\n    return { error: null, resource: rest };\n  }\n\n  @ApiOperation(refreshTokenDescription)\n  @ApiResponse(refreshTokenSuccessfulResponse)\n  @ApiResponse(refreshTokenUnauthorizedResponse)\n  @UseGuards(JwtRefreshAuthGuard)\n  @Get('refresh-token')\n  async refreshToken(\n    @Request()\n    req: RequestType & {\n      user: { userId: string; clientRefreshToken: string };\n    } & {\n      error: { code: string; detail: string };\n    },\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const { user } = req;\n    response.clearCookie('refreshToken', {\n      httpOnly: true,\n      sameSite: 'none',\n      secure: true,\n    });\n    if (req.error) {\n      // if reuse detected\n      return response.status(401).json(req.error);\n    }\n    const { resource } = await this.authService.refreshToken(\n      user.userId,\n      user.clientRefreshToken,\n    );\n    const { refreshToken, ...rest } = resource;\n    response.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      domain: this.configService.get('FRONTEND_DOMAIN'),\n      maxAge: 1000 * 60 * 60 * 24 * 30,\n    });\n    response.status(202).json({ error: null, resource: rest });\n  }\n\n  @Get('check-if-logged-in')\n  @UseGuards(JwtRefreshAuthGuard)\n  async checkIfLoggedIn(\n    @Request()\n    req: RequestType & {\n      user: { userId: string; clientRefreshToken: string };\n    } & {\n      error: { code: string; detail: string };\n    },\n  ): Promise {\n    return { error: null, resource: { userId: req.user.userId } };\n  }\n\n  @ApiOperation(recovePasswordDescription)\n  @ApiResponse(recoverPasswordSuccessfulResponse)\n  @ApiResponse(recoverPasswordBadRequest)\n  @Get('recover-password')\n  async recoverPassword(\n    @Query('email') email: string,\n    @Res() response: Response,\n  ): Promise {\n    const { statusCode, error, resource } =\n      await this.authService.recoverPassword(email);\n    response.status(statusCode).json(error ?? resource);\n    return;\n  }\n\n  @ApiOperation(resetPasswordDescription)\n  @ApiResponse(resetPasswordSuccessfulResponse)\n  @ApiResponse(resetPasswordUnauthorizedResponse)\n  @ApiBody(resetPasswordCorrectPayload)\n  @UseGuards(JwtResetAuthGuard)\n  @Patch('reset-password')\n  async resetPassword(\n    @Body('password') password: string,\n    @Query('token') resetPasswordToken: string,\n    @Request()\n    req: RequestType & { user: { userId: string; resetPasswordToken: string } },\n  ): Promise | null;\n  }> {\n    const { user } = req;\n    const { resource } = await this.authService.resetPassword(\n      user.userId,\n      password,\n      resetPasswordToken,\n    );\n    return { resource };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nSendgridModule\n\nSendgridModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSendgridModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nJwtStrategyRefreshToken\n\nJwtStrategyRefreshToken\n\nAuthModule -->\n\nJwtStrategyRefreshToken->AuthModule\n\n\n\n\n\nJwtStrategyResetPassword\n\nJwtStrategyResetPassword\n\nAuthModule -->\n\nJwtStrategyResetPassword->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtStrategyRefreshToken\n                        \n                        \n                            JwtStrategyResetPassword\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SendgridModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SendgridModule } from 'src/sendgrid/sendgrid.module';\nimport { UserModule } from 'src/users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategyRefreshToken } from './jwt-refresh-token.strategy';\nimport { JwtStrategyResetPassword } from './jwt-reset-password.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { RefreshToken } from './refreshToken.entity';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule,\n    TypeOrmModule.forFeature([RefreshToken]),\n    SendgridModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategyRefreshToken,\n    JwtStrategyResetPassword,\n    JwtStrategy,\n    RefreshTokensRepository,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewAccessToken\n                            \n                            \n                                    Async\n                                createNewRefreshToken\n                            \n                            \n                                    Async\n                                recoverPassword\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService, sendgridService: SendgridService, refreshTokensRepository: RefreshTokensRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sendgridService\n                                                  \n                                                        \n                                                                        SendgridService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensRepository\n                                                  \n                                                        \n                                                                        RefreshTokensRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createNewAccessToken\n                        \n                    \n                \n            \n            \n                \ncreateNewAccessToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewRefreshToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recoverPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    recoverPassword(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(userId: string, newPassword: string, clientResetPasswordToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientResetPasswordToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { SendgridService } from 'src/sendgrid/sendgrid.service';\nimport { User } from 'src/users/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { RefreshToken } from './refreshToken.entity';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\nimport * as SendGrid from '@sendgrid/mail';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private sendgridService: SendgridService,\n    @InjectRepository(RefreshToken)\n    private refreshTokensRepository: RefreshTokensRepository,\n  ) {}\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOneBy({ email });\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async signUp({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }): Promise | null;\n  }> {\n    const user = await this.usersService.findOneBy({ email });\n    if (user) {\n      throw new BadRequestException({\n        error: {\n          code: 'email_already_exists',\n          detail: 'email already exists',\n        },\n        resource: null,\n      });\n    }\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n    const newUser = this.usersService.create({\n      email,\n      password: hashedPassword,\n    });\n    await this.usersService.save(newUser);\n    return { resource: { id: newUser.id, email: newUser.email } };\n  }\n\n  async createNewRefreshToken(user: User): Promise {\n    const refreshTokenPayload = {\n      sub: user.id,\n    };\n    const newRefreshToken = this.jwtService.sign(refreshTokenPayload, {\n      expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION_TIME'),\n      secret: this.configService.get('JWT_REFRESH_SECRET'),\n    });\n    const salt = await bcrypt.genSalt();\n    const hashedToken = await bcrypt.hash(newRefreshToken, salt);\n    const newRefreshTokenEntity = this.refreshTokensRepository.create({\n      user,\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      refreshToken: hashedToken,\n    });\n    await this.refreshTokensRepository.save(newRefreshTokenEntity);\n    return newRefreshToken;\n  }\n\n  createNewAccessToken(user: User): string {\n    const accessTokenPayload = { email: user.email, sub: user.id };\n    const newAccessToken = this.jwtService.sign(accessTokenPayload, {\n      expiresIn: this.configService.get('JWT_ACCESS_EXPIRATION_TIME'),\n      secret: this.configService.get('JWT_ACCESS_SECRET'),\n    });\n    return newAccessToken;\n  }\n\n  async signIn(user: User): Promise {\n    const newAccessToken = this.createNewAccessToken(user);\n    const newRefreshToken = await this.createNewRefreshToken(user);\n    return {\n      error: null,\n      resource: {\n        accessToken: newAccessToken,\n        refreshToken: newRefreshToken,\n      },\n    };\n  }\n\n  async refreshToken(\n    userId: string,\n    refreshToken: string,\n  ): Promise {\n    // as we are using RTR, we must delete the specific refreshToken from the database\n    await this.refreshTokensRepository.delete({\n      refreshToken,\n    });\n    const user = await this.usersService.findOneBy({ id: userId });\n    const newAccessToken = this.createNewAccessToken(user);\n    const newRefreshToken = await this.createNewRefreshToken(user);\n    return {\n      resource: {\n        accessToken: newAccessToken,\n        refreshToken: newRefreshToken,\n      },\n    };\n  }\n\n  async recoverPassword(email: string): Promise;\n  }> {\n    const user = await this.usersService.findOneBy({ email });\n    if (!user) {\n      throw new BadRequestException({\n        error: {\n          code: 'user_not_found',\n          detail: 'user not found',\n        },\n      });\n    }\n    const resetTokenPayload = { sub: user.id };\n    const resetToken = this.jwtService.sign(resetTokenPayload, {\n      secret: this.configService.get('JWT_RESET_PASSWORD_SECRET'),\n      expiresIn: this.configService.get('JWT_RESET_PASSWORD_EXPIRATION_TIME'),\n    });\n    const salt = await bcrypt.genSalt();\n    const hashedResetToken = await bcrypt.hash(resetToken, salt);\n    user.resetPasswordToken = hashedResetToken;\n    await this.usersService.save(user); // update if the user exists\n    const mail: SendGrid.MailDataRequired = {\n      to: email,\n      from: 'hrivera@unal.edu.co',\n      subject: 'Password recovery',\n      templateId: 'd-7a7e65ab6bf44627bea5758e97fbb969',\n      personalizations: [\n        {\n          to: [\n            {\n              email,\n            },\n          ],\n          dynamicTemplateData: {\n            link: `${this.configService.get(\n              'FRONTEND_URL',\n            )}/auth/password/reset?token=${resetToken}`,\n          },\n        },\n      ],\n    };\n    //eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { templateId, personalizations, ...resource } = mail;\n    const { error, statusCode } = await this.sendgridService.send(mail);\n    return {\n      error,\n      statusCode,\n      resource,\n    };\n  }\n\n  async resetPassword(\n    userId: string,\n    newPassword: string,\n    clientResetPasswordToken: string,\n  ): Promise;\n  }> {\n    const user = await this.usersService.findOneBy({ id: userId });\n    // get out of here motherfucker\n    if (!user) {\n      throw new BadRequestException({\n        error: {\n          code: 'user_not_found',\n          detail: 'user not found',\n        },\n        resource: null,\n      });\n    }\n    if (\n      !(await bcrypt.compare(clientResetPasswordToken, user.resetPasswordToken))\n    ) {\n      throw new BadRequestException({\n        error: {\n          code: 'reset_password_token_invalid_payload',\n          detail: 'reset password token invalid payload',\n        },\n        resource: null,\n      });\n    }\n    // create new hash for the new password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    user.password = hashedPassword;\n\n    user.resetPasswordToken = '';\n    await this.usersService.save(user);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...rest } = user;\n    return {\n      resource: rest,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BaseCaseColumn.html":{"url":"entities/BaseCaseColumn.html","title":"entity - BaseCaseColumn","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BaseCaseColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/base-case-column.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                mappedValues\n                            \n                            \n                                name\n                            \n                            \n                                problem\n                            \n                            \n                                target\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mappedValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MappedValue[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, mappedValue => mappedValue.baseCaseColumn)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, problem => problem.columns)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({enum: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { MappedValue } from './mapped-value.entity';\nimport { Problem } from './problem.entity';\n\n@Entity()\nexport class BaseCaseColumn {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  name: string;\n  @Column({ enum: ['predicting-factors', 'goal-factor'] })\n  target: string;\n  @Column({ enum: ['ordinal', 'boolean', 'numeric'], nullable: true })\n  type: string;\n  @ManyToOne(() => Problem, (problem) => problem.columns)\n  problem: Problem;\n  @OneToMany(() => MappedValue, (mappedValue) => mappedValue.baseCaseColumn)\n  mappedValues: MappedValue[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseCaseColumns.html":{"url":"classes/BaseCaseColumns.html","title":"class - BaseCaseColumns","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseCaseColumns\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/base-case-column.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { BaseCaseColumn } from '../entities/base-case-column.entity';\n\nexport class BaseCaseColumns extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Connection.html":{"url":"entities/Connection.html","title":"entity - Connection","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Connection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection/connection.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                database\n                            \n                            \n                                host\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                port\n                            \n                            \n                                problems\n                            \n                            \n                                ssl\n                            \n                            \n                                user\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, problem => problem.connection)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ssl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.connections)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Problem } from 'src/problem/entities/problem.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Connection {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  host: string;\n  @Column()\n  port: string;\n  @Column()\n  database: string;\n  @Column()\n  username: string;\n  @Column()\n  password: string;\n  @Column()\n  ssl: boolean;\n  @Column({ default: true })\n  current: boolean;\n  @OneToMany(() => Problem, (problem) => problem.connection)\n  problems: Problem[];\n  @ManyToOne(() => User, (user) => user.connections)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConnectionModule.html":{"url":"modules/ConnectionModule.html","title":"module - ConnectionModule","body":"\n                   \n\n\n\n\n    Modules\n    ConnectionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConnectionModule\n\n\n\ncluster_ConnectionModule_exports\n\n\n\ncluster_ConnectionModule_providers\n\n\n\ncluster_ConnectionModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nConnectionModule\n\nConnectionModule\n\nConnectionModule -->\n\nDatabaseModule->ConnectionModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nConnectionModule -->\n\nProblemModule->ConnectionModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nConnectionModule -->\n\nUserModule->ConnectionModule\n\n\n\n\n\nConnectionService \n\nConnectionService \n\nConnectionService  -->\n\nConnectionModule->ConnectionService \n\n\n\n\n\nConnectionService\n\nConnectionService\n\nConnectionModule -->\n\nConnectionService->ConnectionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/connection/connection.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConnectionService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            ProblemModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConnectionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { ProblemModule } from 'src/problem/problem.module';\nimport { UserModule } from 'src/users/users.module';\nimport { Connection } from './connection.entity';\nimport { ConnectionService } from './connection.service';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    UserModule,\n    ProblemModule,\n    TypeOrmModule.forFeature([Connection]),\n  ],\n  providers: [ConnectionService],\n  exports: [ConnectionService],\n})\nexport class ConnectionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConnectionOptions.html":{"url":"interfaces/ConnectionOptions.html","title":"interface - ConnectionOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConnectionOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection/connection-options.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            database\n                                        \n                                \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            ssl\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        database:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ssl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ssl:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ConnectionOptions {\n  id: string;\n\n  host: string;\n\n  port: string;\n\n  database: string;\n\n  username: string;\n\n  password: string;\n\n  ssl: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConnectionService.html":{"url":"injectables/ConnectionService.html","title":"injectable - ConnectionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConnectionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection/connection.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfSourceExists\n                            \n                            \n                                    Async\n                                createConnection\n                            \n                            \n                                    Async\n                                getConnectionById\n                            \n                            \n                                    Async\n                                getCurrentProblemSourceColumns\n                            \n                            \n                                    Async\n                                getProblemSourceOrdinalValues\n                            \n                            \n                                    Async\n                                getProblemSourceSchemas\n                            \n                            \n                                    Async\n                                getProblemSourceTables\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, usersService: UsersService, connectionsRepository: Repository, problemsService: ProblemService)\n                    \n                \n                        \n                            \n                                Defined in src/connection/connection.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connectionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        problemsService\n                                                  \n                                                        \n                                                                        ProblemService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfSourceExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfSourceExists(problemSource: ProblemSource, connectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problemSource\n                                    \n                                                ProblemSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    connectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConnection(databaseMetaData: Partial, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    databaseMetaData\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionById(connectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCurrentProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentProblemSourceColumns(connection: Connection, table: string, schema: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    table\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceOrdinalValues\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceOrdinalValues(connection: Connection, table: string, schema: string, columnNames: literal type[])\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    table\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    columnNames\n                                    \n                                            literal type[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSchemas\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSchemas(connection: Connection)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceTables\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceTables(connection: Connection, schema: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DatabaseService } from 'src/database/database.service';\nimport {\n  CreateNewConnectionResponseWithError,\n  ProblemSource,\n  ProblemSourceColumn,\n  ProblemSourceSchema,\n  ProblemSourceTable,\n} from 'src/parameterizer/parameterizer.types';\nimport { ProblemService } from 'src/problem/problem.service';\nimport { UsersService } from 'src/users/users.service';\nimport { Repository } from 'typeorm';\nimport { ConnectionOptions } from './connection-options.interface';\nimport { Connection } from './connection.entity';\n\n@Injectable()\nexport class ConnectionService {\n  constructor(\n    private databaseService: DatabaseService,\n    private usersService: UsersService,\n    @InjectRepository(Connection)\n    private connectionsRepository: Repository,\n    private problemsService: ProblemService,\n  ) {}\n\n  async getConnectionById(connectionId: string): Promise {\n    const connection = await this.connectionsRepository.findOneBy({\n      id: connectionId,\n    });\n\n    if (!connection) {\n      throw new NotFoundException({\n        error: {\n          code: 'connection_not_found',\n          message: 'Connection not found',\n        },\n        resource: null,\n      });\n    }\n    return connection;\n  }\n\n  async createConnection(\n    databaseMetaData: Partial,\n    userId: string,\n  ): Promise {\n    const { error } = await this.databaseService.getDatabaseInstance(\n      databaseMetaData,\n    );\n    if (error) {\n      return { error, resource: null };\n    }\n    const connection = this.connectionsRepository.create(databaseMetaData);\n    const user = await this.usersService.findOneBy({ id: userId });\n    const { user: _, ...connectionEntity } =\n      await this.connectionsRepository.save({\n        user,\n        ...connection,\n      });\n    const newProblem = await this.problemsService.createProblem(\n      connectionEntity,\n      user,\n    );\n    return {\n      resource: {\n        connection,\n        problem: {\n          connection: { id: newProblem.connection.id },\n          user: { id: newProblem.user.id },\n          id: newProblem.id,\n        },\n      },\n      error: null,\n    };\n  }\n\n  async checkIfSourceExists(\n    problemSource: ProblemSource,\n    connectionId: string,\n  ): Promise {\n    const connection = await this.getConnectionById(connectionId);\n    const { schema, table } = problemSource;\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT EXISTS (\n          SELECT 1\n          FROM information_schema.tables\n          WHERE table_schema = '${schema}'\n          AND table_name = '${table}'\n        );`,\n      );\n      return rows[0].exists;\n    }\n    return false;\n  }\n\n  async getProblemSourceSchemas(\n    connection: Connection,\n  ): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT schema_name\n        FROM information_schema.schemata\n        WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast');`,\n      );\n      return rows.map((row) => ({\n        schemaName: row.schema_name,\n      }));\n    }\n    return null;\n  }\n\n  async getProblemSourceTables(\n    connection: Connection,\n    schema: string,\n  ): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT table_name\n        FROM information_schema.tables\n        WHERE table_schema = '${schema}';`,\n      );\n      return rows.map((row) => ({ tableName: row.table_name }));\n    }\n    return [];\n  }\n\n  async getCurrentProblemSourceColumns(\n    connection: Connection,\n    table: string,\n    schema: string,\n  ): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT column_name FROM information_schema.columns WHERE table_name = '${table}' AND table_schema = '${schema}';`,\n      );\n      return rows.map((row) => ({ columnName: row.column_name }));\n    }\n    return [];\n  }\n\n  async getProblemSourceOrdinalValues(\n    connection: Connection,\n    table: string,\n    schema: string,\n    columnNames: { columnName: string }[],\n  ): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    const columns = [];\n    if (!error) {\n      for (const { columnName } of columnNames) {\n        const { rows } = await db.query(\n          `SELECT DISTINCT ${columnName} FROM ${schema}.${table};`,\n        );\n        columns.push({\n          columnName,\n          values: rows.map((row) => row[columnName]),\n        });\n      }\n    }\n    return columns;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConnectionsRepository.html":{"url":"classes/ConnectionsRepository.html","title":"class - ConnectionsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConnectionsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection/connections.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { Connection } from './connection.entity';\n\nexport class ConnectionsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConnectionOptionsDto.html":{"url":"classes/CreateConnectionOptionsDto.html","title":"class - CreateConnectionOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConnectionOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/create-connection-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                database\n                            \n                            \n                                host\n                            \n                            \n                                password\n                            \n                            \n                                port\n                            \n                            \n                                ssl\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ssl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsString } from 'class-validator';\n\nexport class CreateConnectionOptionsDto {\n  @IsString()\n  host: string;\n\n  @IsString()\n  port: string;\n\n  @IsString()\n  database: string;\n\n  @IsString()\n  username: string;\n\n  @IsString()\n  password: string;\n\n  @IsBoolean()\n  ssl: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateNewConnectionResponse.html":{"url":"interfaces/CreateNewConnectionResponse.html","title":"interface - CreateNewConnectionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateNewConnectionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            resource\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resource:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateNewConnectionResponseWithError.html":{"url":"interfaces/CreateNewConnectionResponseWithError.html","title":"interface - CreateNewConnectionResponseWithError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateNewConnectionResponseWithError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateNewConnectionResponse\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'email is not valid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'password is not valid'})@MinLength(8, {message: 'the password should have at least $constraint1 characters '})@MaxLength(14, {message: 'the password should not exceed the maximum of $constraint1 characters'})@Validate(IsValidPassword, ['/[a-z]/', '/[A-Z]/', '/[!@*\"#$%&\\/()=]/', '/[0-9]/'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { IsValidPassword } from './is-valid-password';\n\nexport class CreateUserDto {\n  @IsEmail({}, { message: 'email is not valid' })\n  email: string;\n  @IsString({ message: 'password is not valid' })\n  @MinLength(8, {\n    message: 'the password should have at least $constraint1 characters ',\n  })\n  @MaxLength(14, {\n    message:\n      'the password should not exceed the maximum of $constraint1 characters',\n  })\n  @Validate(IsValidPassword, [/[a-z]/, /[A-Z]/, /[!@*\"#$%&\\/()=]/, /[0-9]/])\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseInstance.html":{"url":"interfaces/DatabaseInstance.html","title":"interface - DatabaseInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            resource\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resource:     Client\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Client\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from './database.service';\n\n@Module({\n  providers: [DatabaseService],\n  exports: [DatabaseService],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDatabaseInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatabaseInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatabaseInstance(options: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Client } from 'pg';\nimport { ConnectionOptions } from 'src/connection/connection-options.interface';\nimport { DatabaseInstance } from 'src/parameterizer/parameterizer.types';\n\n@Injectable()\nexport class DatabaseService {\n  async getDatabaseInstance(\n    options: Partial,\n  ): Promise {\n    const { username, port, ...rest } = options;\n    const client = new Client({ ...rest, user: username, port: Number(port) });\n    try {\n      await client.connect();\n      return { resource: client, error: null };\n    } catch (err) {\n      return {\n        resource: null,\n        error: { code: 'connection_refused', detail: 'Connection refused' },\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProblemSourceTablesDto.html":{"url":"classes/GetProblemSourceTablesDto.html","title":"class - GetProblemSourceTablesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProblemSourceTablesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/get-problem-source-tables.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                schema\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/get-problem-source-tables.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class GetProblemSourceTablesDto {\n  @IsString()\n  schema: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsValidPassword.html":{"url":"classes/IsValidPassword.html","title":"class - IsValidPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsValidPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/is-valid-password.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/is-valid-password.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/is-valid-password.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n@ValidatorConstraint({ name: 'IsValidPassword', async: false })\nexport class IsValidPassword implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments) {\n    return args.constraints.every((pattern) => pattern.test(text));\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    const messages = [\n      'the password should has at least one lower case',\n      'the password should has at least one upper case',\n      'the password should has at least one special character',\n      'the password should has at least one number',\n    ];\n    const triggeredErrors = args.constraints\n      .map((pattern, index) => {\n        const testPassed = pattern.test(args.value);\n        if (!testPassed) {\n          return messages[index];\n        }\n        return null;\n      })\n      .filter(Boolean)\n      .toString();\n    return triggeredErrors;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nconst customResponse = (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n};\n@Injectable()\nexport class JwtBaseAuthGuard extends AuthGuard() {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtResetAuthGuard extends AuthGuard('jwt-reset-password') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh-token') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtBaseAuthGuard.html":{"url":"injectables/JwtBaseAuthGuard.html","title":"injectable - JwtBaseAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtBaseAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nconst customResponse = (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n};\n@Injectable()\nexport class JwtBaseAuthGuard extends AuthGuard() {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtResetAuthGuard extends AuthGuard('jwt-reset-password') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh-token') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshAuthGuard.html":{"url":"injectables/JwtRefreshAuthGuard.html","title":"injectable - JwtRefreshAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nconst customResponse = (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n};\n@Injectable()\nexport class JwtBaseAuthGuard extends AuthGuard() {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtResetAuthGuard extends AuthGuard('jwt-reset-password') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh-token') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtResetAuthGuard.html":{"url":"injectables/JwtResetAuthGuard.html","title":"injectable - JwtResetAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtResetAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nconst customResponse = (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n};\n@Injectable()\nexport class JwtBaseAuthGuard extends AuthGuard() {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtResetAuthGuard extends AuthGuard('jwt-reset-password') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh-token') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategyRefreshToken.html":{"url":"injectables/JwtStrategyRefreshToken.html","title":"injectable - JwtStrategyRefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategyRefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService, refreshTokensRepository: RefreshTokensRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-refresh-token.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensRepository\n                                                  \n                                                        \n                                                                        RefreshTokensRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-refresh-token.strategy.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class JwtStrategyRefreshToken extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n    private refreshTokensRepository: RefreshTokensRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (req: Request) => req.cookies.refreshToken,\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: Request, payload: any) {\n    const clientRefreshToken = req.cookies.refreshToken;\n    const foundUser = await this.usersService.findOne({\n      where: {\n        id: payload.sub,\n      },\n      relations: ['refreshTokens'],\n    });\n    const refreshTokenMatch = foundUser.refreshTokens.some(({ refreshToken }) =>\n      bcrypt.compare(clientRefreshToken, refreshToken),\n    );\n    // Detected refresh token reuse we should remove all existing refresh tokens\n    if (!refreshTokenMatch) {\n      await this.refreshTokensRepository.delete({\n        user: foundUser,\n      });\n      return {\n        error: {\n          code: 'refresh_token_hacked',\n          detail: 'refresh token was hacked',\n        },\n        resource: null,\n      };\n    }\n    return {\n      userId: payload.sub,\n      clientRefreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategyResetPassword.html":{"url":"injectables/JwtStrategyResetPassword.html","title":"injectable - JwtStrategyResetPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategyResetPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-reset-password.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-reset-password.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-reset-password.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategyResetPassword extends PassportStrategy(\n  Strategy,\n  'jwt-reset-password',\n) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromUrlQueryParameter('token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_RESET_PASSWORD_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      userId: payload.sub,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { User } from 'src/users/user.entity';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise> {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException({\n        error: { code: 'unauthorized', detail: 'Invalid credentials' },\n      });\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MappedValue.html":{"url":"entities/MappedValue.html","title":"entity - MappedValue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MappedValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/mapped-value.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                baseCaseColumn\n                            \n                            \n                                id\n                            \n                            \n                                mappedValue\n                            \n                            \n                                ordinalValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        baseCaseColumn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseCaseColumn\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, baseCaseColumn => baseCaseColumn.mappedValues)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/mapped-value.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/mapped-value.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mappedValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/mapped-value.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ordinalValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/mapped-value.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BaseCaseColumn } from './base-case-column.entity';\n@Entity()\nexport class MappedValue {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  ordinalValue: string;\n  @Column()\n  mappedValue: number;\n  @ManyToOne(\n    () => BaseCaseColumn,\n    (baseCaseColumn) => baseCaseColumn.mappedValues,\n  )\n  baseCaseColumn: BaseCaseColumn;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MappedValuesRepository.html":{"url":"classes/MappedValuesRepository.html","title":"class - MappedValuesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MappedValuesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/mapped-values.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { MappedValue } from '../entities/mapped-value.entity';\n\nexport class MappedValuesRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NewRegistry.html":{"url":"interfaces/NewRegistry.html","title":"interface - NewRegistry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NewRegistry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            columnName\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columnName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columnName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ParameterizerController.html":{"url":"controllers/ParameterizerController.html","title":"controller - ParameterizerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ParameterizerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                parameterizer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAvailableAlgorithms\n                            \n                            \n                                    Async\n                                getProblemSourceColumns\n                            \n                            \n                                    Async\n                                getProblemSourceOptions\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumns\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumnsNewProblem\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedOrdinalColumns\n                            \n                            \n                                    Async\n                                getProblemSourceTables\n                            \n                            \n                                    Async\n                                saveConnectionOptions\n                            \n                            \n                                    Async\n                                saveNewProblemSelectedColumns\n                            \n                            \n                                    Async\n                                saveProblemAlgorithm\n                            \n                            \n                                    Async\n                                saveProblemSource\n                            \n                            \n                                    Async\n                                saveProblemSourceColumns\n                            \n                            \n                                    Async\n                                saveProblemSourceColumnsType\n                            \n                            \n                                    Async\n                                saveProblemSourceSelectedOrdinalColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvailableAlgorithms\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvailableAlgorithms()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-available-algorithms')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceColumns()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('problem-source-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceOptions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-problem-source-schemas')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumns()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-problem-source-selected-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumnsNewProblem\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumnsNewProblem()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-problem-source-selected-columns-new-problem')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedOrdinalColumns()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('get-problem-source-selected-ordinal-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceTables\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceTables(body: GetProblemSourceTablesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('get-problem-source-tables')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                GetProblemSourceTablesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveConnectionOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveConnectionOptions(body: CreateConnectionOptionsDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-connection')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateConnectionOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewProblemSelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewProblemSelectedColumns(body: SaveNewRegistrySelectedColumnsDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('save-new-registry-selected-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SaveNewRegistrySelectedColumnsDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemAlgorithm\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemAlgorithm(body: SaveProblemAlgorithmDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('save-problem-algorithm')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SaveProblemAlgorithmDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSource\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSource(body: SaveProblemSourceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('save-problem-source')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SaveProblemSourceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumns(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('save-problem-source-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumnsType\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumnsType(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('save-problem-source-columns-types')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceSelectedOrdinalColumns(body: SaveProblemSourceSelectedOrdinalColumns)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('save-problem-source-selected-ordinal-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SaveProblemSourceSelectedOrdinalColumns\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Patch,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateConnectionOptionsDto } from './dtos/create-connection-options.dto';\nimport { Request as RequestType } from 'express';\nimport { ParameterizerService } from './parameterizer.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport {\n  CreateNewConnectionResponse,\n  ProblemSourceColumn,\n  ProblemSourceSchema,\n  ProblemSourceTable,\n  ProbleSourceSelectedColumnsNewProblem,\n} from './parameterizer.types';\nimport { SaveProblemSourceDto } from './dtos/save-problem-source.dto';\nimport { Problem } from 'src/problem/entities/problem.entity';\nimport { GetProblemSourceTablesDto } from './dtos/get-problem-source-tables';\nimport { SaveProblemSourceColumnsDto } from './dtos/save-problem-source-columns';\nimport { SaveProblemSourceColumnsTypeDto } from './dtos/save-problem-source-columns-types.dto';\nimport { SaveProblemSourceSelectedOrdinalColumns } from './dtos/save-problem-source-selected-ordinal-columns.dto';\nimport { BaseCaseColumn } from 'src/problem/entities/base-case-column.entity';\nimport { SaveNewRegistrySelectedColumnsDto } from './dtos/save-new-registry-selected-columns.dto';\nimport { Algorithm } from 'src/problem/entities/algorithm.entity';\nimport { SaveProblemAlgorithmDto } from './dtos/save-problem-algorithm.dto';\n\n@UseGuards(JwtAuthGuard)\n@Controller('parameterizer')\nexport class ParameterizerController {\n  constructor(private readonly parameterizerService: ParameterizerService) {}\n\n  @Post('create-connection')\n  async saveConnectionOptions(\n    @Body() body: CreateConnectionOptionsDto,\n    @Request()\n    req: RequestType & { user: { userId: string; username: string } },\n  ): Promise {\n    const { user } = req;\n    return this.parameterizerService.createNewConnection(body, user.userId);\n  }\n\n  @Get('get-problem-source-schemas')\n  async getProblemSourceOptions(): Promise {\n    return this.parameterizerService.getProblemSourceSchemas();\n  }\n\n  @Post('get-problem-source-tables')\n  async getProblemSourceTables(\n    @Body() body: GetProblemSourceTablesDto,\n  ): Promise {\n    const { schema } = body;\n    return this.parameterizerService.getProblemSourceTables(schema);\n  }\n\n  @Patch('save-problem-source')\n  async saveProblemSource(\n    @Body() body: SaveProblemSourceDto,\n  ): Promise {\n    return this.parameterizerService.saveProblemSource(body);\n  }\n\n  @Get('problem-source-columns')\n  async getProblemSourceColumns(): Promise {\n    return this.parameterizerService.getProblemSourceColumns();\n  }\n\n  @Post('save-problem-source-columns')\n  async saveProblemSourceColumns(\n    @Body() body: { sections: SaveProblemSourceColumnsDto[] },\n  ): Promise {\n    const { sections } = body;\n    return this.parameterizerService.saveProblemSourceColumns(sections);\n  }\n\n  @Get('get-problem-source-selected-columns')\n  async getProblemSourceSelectedColumns(): Promise {\n    return this.parameterizerService.getProblemSourceSelectedColumns();\n  }\n\n  @Post('save-problem-source-columns-types')\n  async saveProblemSourceColumnsType(\n    @Body() body: { sections: SaveProblemSourceColumnsTypeDto[] },\n  ): Promise {\n    const { sections } = body;\n    return this.parameterizerService.saveProblemSourceColumnsTypes(sections);\n  }\n\n  @Get('get-problem-source-selected-ordinal-columns')\n  async getProblemSourceSelectedOrdinalColumns(): Promise {\n    return this.parameterizerService.getProblemSourceSelectedOrdinalColumns();\n  }\n\n  @Post('save-problem-source-selected-ordinal-columns')\n  async saveProblemSourceSelectedOrdinalColumns(\n    @Body()\n    body: SaveProblemSourceSelectedOrdinalColumns,\n  ): Promise {\n    const { selectedOrdinalColumns } = body;\n    return this.parameterizerService.saveProblemSourceSelectedOrdinalColumns(\n      selectedOrdinalColumns,\n    );\n  }\n\n  @Get('get-problem-source-selected-columns-new-problem')\n  async getProblemSourceSelectedColumnsNewProblem(): Promise {\n    return this.parameterizerService.getProblemSourceSelectedColumnsNewProblem();\n  }\n\n  @Post('save-new-registry-selected-columns')\n  async saveNewProblemSelectedColumns(\n    @Body() body: SaveNewRegistrySelectedColumnsDto[],\n  ): Promise {\n    return this.parameterizerService.saveNewRegistrySelectedColumns(body);\n  }\n\n  @Get('get-available-algorithms')\n  async getAvailableAlgorithms(): Promise {\n    return this.parameterizerService.getAvailableAlgorithms();\n  }\n\n  @Post('save-problem-algorithm')\n  async saveProblemAlgorithm(\n    @Body() body: SaveProblemAlgorithmDto,\n  ): Promise {\n    const { algorithmName } = body;\n    return this.parameterizerService.saveProblemAlgorithm(algorithmName);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParameterizerModule.html":{"url":"modules/ParameterizerModule.html","title":"module - ParameterizerModule","body":"\n                   \n\n\n\n\n    Modules\n    ParameterizerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParameterizerModule\n\n\n\ncluster_ParameterizerModule_imports\n\n\n\ncluster_ParameterizerModule_providers\n\n\n\n\nConnectionModule\n\nConnectionModule\n\n\n\nParameterizerModule\n\nParameterizerModule\n\nParameterizerModule -->\n\nConnectionModule->ParameterizerModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nParameterizerModule -->\n\nProblemModule->ParameterizerModule\n\n\n\n\n\nParameterizerService\n\nParameterizerService\n\nParameterizerModule -->\n\nParameterizerService->ParameterizerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/parameterizer/parameterizer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParameterizerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ParameterizerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConnectionModule\n                        \n                        \n                            ProblemModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ParameterizerService } from './parameterizer.service';\nimport { ParameterizerController } from './parameterizer.controller';\nimport { ConnectionModule } from 'src/connection/connection.module';\nimport { ProblemModule } from 'src/problem/problem.module';\n\n@Module({\n  providers: [ParameterizerService],\n  controllers: [ParameterizerController],\n  imports: [ConnectionModule, ProblemModule],\n})\nexport class ParameterizerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParameterizerService.html":{"url":"injectables/ParameterizerService.html","title":"injectable - ParameterizerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParameterizerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewConnection\n                            \n                            \n                                    Async\n                                getAvailableAlgorithms\n                            \n                            \n                                    Async\n                                getProblemSourceColumns\n                            \n                            \n                                    Async\n                                getProblemSourceSchemas\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumns\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumnsNewProblem\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedOrdinalColumns\n                            \n                            \n                                    Async\n                                getProblemSourceTables\n                            \n                            \n                                    Async\n                                saveNewRegistrySelectedColumns\n                            \n                            \n                                    Async\n                                saveProblemAlgorithm\n                            \n                            \n                                    Async\n                                saveProblemSource\n                            \n                            \n                                    Async\n                                saveProblemSourceColumns\n                            \n                            \n                                    Async\n                                saveProblemSourceColumnsTypes\n                            \n                            \n                                    Async\n                                saveProblemSourceSelectedOrdinalColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connectionService: ConnectionService, problemService: ProblemService)\n                    \n                \n                        \n                            \n                                Defined in src/parameterizer/parameterizer.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connectionService\n                                                  \n                                                        \n                                                                        ConnectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        problemService\n                                                  \n                                                        \n                                                                        ProblemService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewConnection(databaseMetaData: Partial, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    databaseMetaData\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvailableAlgorithms\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvailableAlgorithms()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:339\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceColumns()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSchemas\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSchemas()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumns()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumnsNewProblem\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumnsNewProblem()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:295\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedOrdinalColumns()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceTables\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceTables(schema: string)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewRegistrySelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewRegistrySelectedColumns(selectedValues: NewRegistry[])\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:317\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selectedValues\n                                    \n                                                NewRegistry[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemAlgorithm\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemAlgorithm(algorithm: string)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:344\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    algorithm\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSource\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSource(problemSource: ProblemSource)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problemSource\n                                    \n                                                ProblemSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumns(columns: SaveProblemSourceColumnsDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columns\n                                    \n                                                SaveProblemSourceColumnsDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumnsTypes\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumnsTypes(columns: SaveProblemSourceColumnsTypeDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columns\n                                    \n                                                SaveProblemSourceColumnsTypeDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceSelectedOrdinalColumns(selectedOrdinalColumns: ProblemSourceMappedColumns)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:272\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selectedOrdinalColumns\n                                    \n                                                ProblemSourceMappedColumns\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { ConnectionOptions } from 'src/connection/connection-options.interface';\nimport { ConnectionService } from 'src/connection/connection.service';\nimport { Algorithm } from 'src/problem/entities/algorithm.entity';\nimport { BaseCaseColumn } from 'src/problem/entities/base-case-column.entity';\nimport { Problem } from 'src/problem/entities/problem.entity';\nimport { ProblemService } from 'src/problem/problem.service';\nimport { SaveProblemSourceColumnsDto } from './dtos/save-problem-source-columns';\nimport { SaveProblemSourceColumnsTypeDto } from './dtos/save-problem-source-columns-types.dto';\nimport {\n  CreateNewConnectionResponse,\n  NewRegistry,\n  ProblemSource,\n  ProblemSourceColumn,\n  ProblemSourceMappedColumns,\n  ProblemSourceSchema,\n  ProblemSourceTable,\n  ProbleSourceSelectedColumnsNewProblem,\n} from './parameterizer.types';\n\n@Injectable()\nexport class ParameterizerService {\n  constructor(\n    private connectionService: ConnectionService,\n    private problemService: ProblemService,\n  ) {}\n\n  async createNewConnection(\n    databaseMetaData: Partial,\n    userId: string,\n  ): Promise {\n    const { error, resource } = await this.connectionService.createConnection(\n      databaseMetaData,\n      userId,\n    );\n    if (!error) {\n      return { resource };\n    }\n    throw new BadRequestException(error);\n  }\n\n  async getProblemSourceSchemas(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const { connection } = problem;\n    const schemas = await this.connectionService.getProblemSourceSchemas(\n      connection,\n    );\n    if (!schemas.length) {\n      throw new NotFoundException({\n        error: {\n          code: 'schemas_not_found',\n          detail: 'Schemas not found',\n        },\n        resource: null,\n      });\n    }\n    return { resource: schemas };\n  }\n\n  async getProblemSourceTables(\n    schema: string,\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const { connection } = problem;\n    const tables = await this.connectionService.getProblemSourceTables(\n      connection,\n      schema,\n    );\n    if (!tables.length) {\n      throw new NotFoundException({\n        error: {\n          code: 'tables_not_found',\n          detail: 'Tables not found',\n        },\n        resource: null,\n      });\n    }\n    return { resource: tables };\n  }\n\n  async saveProblemSource(problemSource: ProblemSource): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const problemSourceExists =\n      await this.connectionService.checkIfSourceExists(\n        problemSource,\n        problem.connection.id,\n      );\n    if (!problemSourceExists) {\n      throw new BadRequestException({\n        error: {\n          code: 'source_not_found',\n          message: 'Source not found',\n        },\n        resource: null,\n      });\n    }\n    const { resource } = await this.problemService.saveProblemSource(\n      problem,\n      problemSource,\n    );\n    return resource;\n  }\n\n  async getProblemSourceColumns(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const { connection, table, schema } = problem;\n\n    const columns = await this.connectionService.getCurrentProblemSourceColumns(\n      connection,\n      table,\n      schema,\n    );\n\n    if (!columns.length) {\n      throw new NotFoundException({\n        error: {\n          code: 'columns_not_found',\n          detail: 'Columns not found',\n        },\n        resource: null,\n      });\n    }\n    return {\n      resource: columns,\n    };\n  }\n\n  async saveProblemSourceColumns(\n    columns: SaveProblemSourceColumnsDto[],\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.saveProblemSourceColumns(\n      problem,\n      columns,\n    );\n    return resource;\n  }\n\n  async getProblemSourceSelectedColumns(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.getProblemSourceSelectedColumns(\n      problem,\n    );\n    return resource;\n  }\n\n  async saveProblemSourceColumnsTypes(\n    columns: SaveProblemSourceColumnsTypeDto[],\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.saveProblemSourceColumnsTypes(\n      problem,\n      columns,\n    );\n    return resource;\n  }\n\n  async getProblemSourceSelectedOrdinalColumns(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const { resource } =\n      await this.problemService.getProblemSourceSelectedOrdinalColumns(problem);\n\n    const columns = await this.connectionService.getProblemSourceOrdinalValues(\n      problem.connection,\n      problem.table,\n      problem.schema,\n      resource,\n    );\n    return { resource: columns };\n  }\n\n  async saveProblemSourceSelectedOrdinalColumns(\n    selectedOrdinalColumns: ProblemSourceMappedColumns,\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource =\n      await this.problemService.saveProblemSourceSelectedOrdinalColumns(\n        problem,\n        selectedOrdinalColumns,\n      );\n    return resource;\n  }\n\n  async getProblemSourceSelectedColumnsNewProblem(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource =\n      await this.problemService.getProblemSourceSelectedColumnsNewProblem(\n        problem,\n      );\n    return resource;\n  }\n\n  async saveNewRegistrySelectedColumns(\n    selectedValues: NewRegistry[],\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.saveNewRegistrySelectedColumns(\n      problem,\n      selectedValues,\n    );\n    return resource;\n  }\n\n  async getAvailableAlgorithms(): Promise {\n    const resource = await this.problemService.getAvailableAlgorithms();\n    return resource;\n  }\n\n  async saveProblemAlgorithm(\n    algorithm: string,\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.saveProblemAlgorithm(\n      problem,\n      algorithm,\n    );\n    return resource;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{"url":"interfaces/ProbleSourceSelectedColumnsNewProblem.html","title":"interface - ProbleSourceSelectedColumnsNewProblem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProbleSourceSelectedColumnsNewProblem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            columnName\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columnName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columnName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Problem.html":{"url":"entities/Problem.html","title":"entity - Problem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Problem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/problem.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                algorithm\n                            \n                            \n                                columns\n                            \n                            \n                                connection\n                            \n                            \n                                id\n                            \n                            \n                                isBeingCreated\n                            \n                            \n                                name\n                            \n                            \n                                registries\n                            \n                            \n                                schema\n                            \n                            \n                                table\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        algorithm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Algorithm\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, algorithm => algorithm.problems)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        columns\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseCaseColumn[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, column => column.problem)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Connection\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, connection => connection.problems)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBeingCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Registry[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, registry => registry.problem)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        table\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.problems)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Algorithm } from './algorithm.entity';\nimport { BaseCaseColumn } from './base-case-column.entity';\nimport { Registry } from './registry.entity';\n\n@Entity()\nexport class Problem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  name: string;\n  @Column({ default: true })\n  isBeingCreated: boolean;\n  @Column({ nullable: true })\n  schema: string;\n  @Column({ nullable: true })\n  table: string;\n  @ManyToOne(() => Connection, (connection) => connection.problems)\n  connection: Connection;\n  @ManyToOne(() => User, (user) => user.problems)\n  user: User;\n  @OneToMany(() => BaseCaseColumn, (column) => column.problem)\n  columns: BaseCaseColumn[];\n  @OneToMany(() => Registry, (registry) => registry.problem)\n  registries: Registry[];\n  @ManyToOne(() => Algorithm, (algorithm) => algorithm.problems)\n  algorithm: Algorithm;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProblemModule.html":{"url":"modules/ProblemModule.html","title":"module - ProblemModule","body":"\n                   \n\n\n\n\n    Modules\n    ProblemModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProblemModule\n\n\n\ncluster_ProblemModule_providers\n\n\n\ncluster_ProblemModule_exports\n\n\n\n\nProblemService \n\nProblemService \n\n\n\nProblemModule\n\nProblemModule\n\nProblemService  -->\n\nProblemModule->ProblemService \n\n\n\n\n\nProblemService\n\nProblemService\n\nProblemModule -->\n\nProblemService->ProblemModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/problem/problem.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProblemService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProblemService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Algorithm } from './entities/algorithm.entity';\nimport { BaseCaseColumn } from './entities/base-case-column.entity';\nimport { MappedValue } from './entities/mapped-value.entity';\nimport { Problem } from './entities/problem.entity';\nimport { Registry } from './entities/registry.entity';\nimport { ProblemService } from './problem.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Problem,\n      BaseCaseColumn,\n      MappedValue,\n      Registry,\n      Algorithm,\n    ]),\n  ],\n  providers: [ProblemService],\n  exports: [ProblemService],\n})\nexport class ProblemModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProblemService.html":{"url":"injectables/ProblemService.html","title":"injectable - ProblemService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProblemService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/problem.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProblem\n                            \n                            \n                                    Async\n                                getAvailableAlgorithms\n                            \n                            \n                                    Async\n                                getProblemBeingCreated\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumns\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumnsNewProblem\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedOrdinalColumns\n                            \n                            \n                                    Async\n                                saveNewRegistrySelectedColumns\n                            \n                            \n                                    Async\n                                saveProblemAlgorithm\n                            \n                            \n                                    Async\n                                saveProblemSource\n                            \n                            \n                                    Async\n                                saveProblemSourceColumns\n                            \n                            \n                                    Async\n                                saveProblemSourceColumnsTypes\n                            \n                            \n                                    Async\n                                saveProblemSourceSelectedOrdinalColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(problemsRepository: ProblemsRepository, baseCaseColumnsRepository: BaseCaseColumns, MappedValues: MappedValuesRepository, registriesRepository: ProblemsRepository, algorithmsRepository: AlgorithmsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/problem/problem.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        problemsRepository\n                                                  \n                                                        \n                                                                        ProblemsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseCaseColumnsRepository\n                                                  \n                                                        \n                                                                        BaseCaseColumns\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        MappedValues\n                                                  \n                                                        \n                                                                        MappedValuesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registriesRepository\n                                                  \n                                                        \n                                                                        ProblemsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        algorithmsRepository\n                                                  \n                                                        \n                                                                        AlgorithmsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProblem\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProblem(connection: Partial, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvailableAlgorithms\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvailableAlgorithms()\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemBeingCreated\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemBeingCreated(relations: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    relations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumns(problem: Problem)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumnsNewProblem\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumnsNewProblem(problem: Problem)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedOrdinalColumns(problem: Problem)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewRegistrySelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewRegistrySelectedColumns(problem: Problem, newRegistry: NewRegistry[])\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:179\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newRegistry\n                                    \n                                                NewRegistry[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemAlgorithm\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemAlgorithm(problem: Problem, algorithm: string)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    algorithm\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSource\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSource(problem: Problem, problemSource: ProblemSource)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    problemSource\n                                    \n                                                ProblemSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumns(problem: Problem, problemSourceSections: SaveProblemSourceColumnsDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    problemSourceSections\n                                    \n                                                SaveProblemSourceColumnsDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumnsTypes\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumnsTypes(problem: Problem, problemSourceColumns: SaveProblemSourceColumnsTypeDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    problemSourceColumns\n                                    \n                                                SaveProblemSourceColumnsTypeDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceSelectedOrdinalColumns(problem: Problem, selectedOrdinalColumns: ProblemSourceMappedColumns)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    selectedOrdinalColumns\n                                    \n                                                ProblemSourceMappedColumns\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Connection } from 'src/connection/connection.entity';\nimport { SaveProblemSourceColumnsDto } from 'src/parameterizer/dtos/save-problem-source-columns';\nimport { SaveProblemSourceColumnsTypeDto } from 'src/parameterizer/dtos/save-problem-source-columns-types.dto';\nimport {\n  NewRegistry,\n  ProblemSource,\n  ProblemSourceMappedColumns,\n  ProbleSourceSelectedColumnsNewProblem,\n} from 'src/parameterizer/parameterizer.types';\nimport { User } from 'src/users/user.entity';\nimport { Not } from 'typeorm';\nimport { BaseCaseColumn } from './entities/base-case-column.entity';\nimport { MappedValue } from './entities/mapped-value.entity';\nimport { Registry } from './entities/registry.entity';\nimport { Problem } from './entities/problem.entity';\nimport { BaseCaseColumns } from './repositories/base-case-column.repository';\nimport { MappedValuesRepository } from './repositories/mapped-values.repository';\nimport { ProblemsRepository } from './repositories/problems.repository';\nimport { Algorithm } from './entities/algorithm.entity';\nimport { AlgorithmsRepository } from './repositories/algorithms.repository';\n\n@Injectable()\nexport class ProblemService {\n  constructor(\n    @InjectRepository(Problem) private problemsRepository: ProblemsRepository,\n    @InjectRepository(BaseCaseColumn)\n    private baseCaseColumnsRepository: BaseCaseColumns,\n    @InjectRepository(MappedValue)\n    private MappedValues: MappedValuesRepository,\n    @InjectRepository(Registry)\n    private registriesRepository: ProblemsRepository,\n    @InjectRepository(Algorithm)\n    private algorithmsRepository: AlgorithmsRepository,\n  ) {}\n\n  async createProblem(\n    connection: Partial,\n    user: User,\n  ): Promise {\n    const problem = this.problemsRepository.create({ connection, user });\n    await this.problemsRepository.save(problem);\n    return problem;\n  }\n\n  async getProblemBeingCreated(relations: string[]): Promise {\n    const problem = await this.problemsRepository.findOne({\n      where: { isBeingCreated: true },\n      relations,\n    });\n    if (!problem) {\n      return null;\n    }\n    return problem;\n  }\n\n  async saveProblemSource(\n    problem: Problem,\n    problemSource: ProblemSource,\n  ): Promise {\n    problem = {\n      ...problem,\n      schema: problemSource.schema,\n      table: problemSource.table,\n    };\n    const result = await this.problemsRepository.save(problem);\n    return { resource: result };\n  }\n\n  async saveProblemSourceColumns(\n    problem: Problem,\n    problemSourceSections: SaveProblemSourceColumnsDto[],\n  ): Promise {\n    for (const section of problemSourceSections) {\n      for (const option of section.options) {\n        const columnToSave = new BaseCaseColumn();\n        columnToSave.name = option;\n        columnToSave.target = section.droppableId;\n        columnToSave.problem = problem;\n        await this.baseCaseColumnsRepository.save(columnToSave);\n      }\n    }\n    const result = await this.problemsRepository.findOne({\n      where: { id: problem.id },\n      relations: ['columns'],\n    });\n    return { resource: result };\n  }\n\n  async getProblemSourceSelectedColumns(\n    problem: Problem,\n  ): Promise {\n    const columns = await this.baseCaseColumnsRepository.find({\n      where: { problem, target: Not('goal-factor') },\n    });\n    const result = columns.map(({ name }) => ({ columnName: name }));\n    return { resource: result };\n  }\n\n  async getProblemSourceSelectedColumnsNewProblem(\n    problem: Problem,\n  ): Promise {\n    const columns = await this.baseCaseColumnsRepository.find({\n      where: { problem, target: Not('goal-factor') },\n      relations: ['mappedValues'],\n    });\n    const result = columns.map(({ name, type, mappedValues }) => {\n      const base = {\n        columnName: name,\n        type,\n        options: mappedValues.map(({ ordinalValue }) => ordinalValue),\n      };\n      if (type === 'boolean-columns') {\n        return {\n          ...base,\n          options: ['true', 'false'],\n        };\n      }\n      return base;\n    });\n    return { resource: result };\n  }\n\n  async saveProblemSourceColumnsTypes(\n    problem: Problem,\n    problemSourceColumns: SaveProblemSourceColumnsTypeDto[],\n  ): Promise {\n    for (const section of problemSourceColumns) {\n      for (const option of section.options) {\n        const column = await this.baseCaseColumnsRepository.findOne({\n          where: { name: option, problem },\n        });\n        column.type = section.droppableId;\n        await this.baseCaseColumnsRepository.save(column);\n      }\n    }\n    const result = await this.problemsRepository.findOne({\n      where: { id: problem.id },\n      relations: ['columns'],\n    });\n    return { resource: result };\n  }\n\n  async getProblemSourceSelectedOrdinalColumns(\n    problem: Problem,\n  ): Promise {\n    const columns = await this.baseCaseColumnsRepository.find({\n      where: { problem, type: 'ordinal-columns' },\n    });\n    const result = columns.map(({ name }) => ({ columnName: name }));\n    return { resource: result };\n  }\n\n  async saveProblemSourceSelectedOrdinalColumns(\n    problem: Problem,\n    selectedOrdinalColumns: ProblemSourceMappedColumns,\n  ): Promise {\n    const columns = Object.entries(selectedOrdinalColumns);\n    for (const [columnName, mappedValues] of columns) {\n      const column = await this.baseCaseColumnsRepository.findOne({\n        where: { name: columnName, problem },\n      });\n      for (const { ordinalValue, mappedValue } of mappedValues) {\n        const mappedValueToSave = new MappedValue();\n        mappedValueToSave.baseCaseColumn = column;\n        mappedValueToSave.ordinalValue = ordinalValue;\n        mappedValueToSave.mappedValue = mappedValue;\n        await this.MappedValues.save(mappedValueToSave);\n      }\n    }\n    const result = await this.baseCaseColumnsRepository.findOne({\n      where: { problem, name: columns[0][0] },\n      relations: ['mappedValues'],\n    });\n    return { resource: result };\n  }\n\n  async saveNewRegistrySelectedColumns(\n    problem: Problem,\n    newRegistry: NewRegistry[],\n  ): Promise {\n    for (const entry of newRegistry) {\n      const registry = new Registry();\n      registry.problem = problem;\n      registry.name = entry.columnName;\n      registry.value = String(entry.value);\n      await this.registriesRepository.save(registry);\n    }\n    const result = await this.problemsRepository.findOne({\n      where: { id: problem.id },\n      relations: ['registries'],\n    });\n    return { resource: result };\n  }\n\n  async getAvailableAlgorithms(): Promise {\n    const result = await this.algorithmsRepository.find();\n    return { resource: result };\n  }\n\n  async saveProblemAlgorithm(\n    problem: Problem,\n    algorithm: string,\n  ): Promise {\n    const algorithmToSave = await this.algorithmsRepository.findOne({\n      where: { name: algorithm },\n    });\n    problem.algorithm = algorithmToSave;\n    const result = await this.problemsRepository.save(problem);\n    return { resource: result };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSource.html":{"url":"interfaces/ProblemSource.html","title":"interface - ProblemSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            schema\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        schema\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        schema:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSourceColumn.html":{"url":"interfaces/ProblemSourceColumn.html","title":"interface - ProblemSourceColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSourceColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            columnName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columnName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columnName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSourceMappedColumns.html":{"url":"interfaces/ProblemSourceMappedColumns.html","title":"interface - ProblemSourceMappedColumns","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSourceMappedColumns\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type[]\n\n                    \n                \n                        \n                            \n                                Defined in src/parameterizer/parameterizer.types.ts:43\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSourceSchema.html":{"url":"interfaces/ProblemSourceSchema.html","title":"interface - ProblemSourceSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSourceSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            schemaName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        schemaName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        schemaName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSourceTable.html":{"url":"interfaces/ProblemSourceTable.html","title":"interface - ProblemSourceTable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSourceTable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            tableName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tableName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tableName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProblemsRepository.html":{"url":"classes/ProblemsRepository.html","title":"class - ProblemsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProblemsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/problems.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { Problem } from '../entities/problem.entity';\n\nexport class ProblemsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RefreshToken.html":{"url":"entities/RefreshToken.html","title":"entity - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refreshToken.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresAt\n                            \n                            \n                                id\n                            \n                            \n                                refreshToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.refreshTokens)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/users/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class RefreshToken {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  refreshToken: string;\n  @Column()\n  expiresAt: Date;\n  @ManyToOne(() => User, (user) => user.refreshTokens)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokensRepository.html":{"url":"classes/RefreshTokensRepository.html","title":"class - RefreshTokensRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokensRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refreshTokens.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { RefreshToken } from './refreshToken.entity';\n\nexport class RefreshTokensRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Registry.html":{"url":"entities/Registry.html","title":"entity - Registry","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Registry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/registry.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                problem\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/registry.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/registry.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, problem => problem.registries)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/registry.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/registry.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Problem } from './problem.entity';\n\n@Entity()\nexport class Registry {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  name: string;\n  @Column({ default: true })\n  value: string;\n  @ManyToOne(() => Problem, (problem) => problem.registries)\n  problem: Problem;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveNewRegistrySelectedColumnsDto.html":{"url":"classes/SaveNewRegistrySelectedColumnsDto.html","title":"class - SaveNewRegistrySelectedColumnsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveNewRegistrySelectedColumnsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-new-registry-selected-columns.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                columnName\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        columnName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-new-registry-selected-columns.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-new-registry-selected-columns.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class SaveNewRegistrySelectedColumnsDto {\n  @IsString()\n  columnName: string;\n  @IsString()\n  value: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemAlgorithmDto.html":{"url":"classes/SaveProblemAlgorithmDto.html","title":"class - SaveProblemAlgorithmDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemAlgorithmDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-algorithm.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                algorithmName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        algorithmName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-algorithm.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class SaveProblemAlgorithmDto {\n  @IsString()\n  algorithmName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemSourceColumnsDto.html":{"url":"classes/SaveProblemSourceColumnsDto.html","title":"class - SaveProblemSourceColumnsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemSourceColumnsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-source-columns.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                droppableId\n                            \n                            \n                                options\n                            \n                            \n                                sectionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        droppableId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum({predictingFactors: 'predicting-factors', goalFactor: 'goal-factor'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sectionTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsString } from 'class-validator';\n\nexport class SaveProblemSourceColumnsDto {\n  @IsString()\n  sectionTitle: string;\n  @IsEnum({\n    predictingFactors: 'predicting-factors',\n    goalFactor: 'goal-factor',\n  })\n  droppableId: string;\n  @IsArray()\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemSourceColumnsTypeDto.html":{"url":"classes/SaveProblemSourceColumnsTypeDto.html","title":"class - SaveProblemSourceColumnsTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemSourceColumnsTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-source-columns-types.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                droppableId\n                            \n                            \n                                options\n                            \n                            \n                                sectionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        droppableId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum({ordinalColumns: 'ordinal-columns', booleanColumns: 'boolean-columns', numericColumns: 'numeric-columns'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns-types.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns-types.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sectionTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns-types.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsString } from 'class-validator';\n\nexport class SaveProblemSourceColumnsTypeDto {\n  @IsString()\n  sectionTitle: string;\n  @IsEnum({\n    ordinalColumns: 'ordinal-columns',\n    booleanColumns: 'boolean-columns',\n    numericColumns: 'numeric-columns',\n  })\n  droppableId: string;\n  @IsArray()\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemSourceDto.html":{"url":"classes/SaveProblemSourceDto.html","title":"class - SaveProblemSourceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemSourceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-source.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                schema\n                            \n                            \n                                table\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        table\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class SaveProblemSourceDto {\n  @IsString()\n  schema: string;\n\n  @IsString()\n  table: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{"url":"classes/SaveProblemSourceSelectedOrdinalColumns.html","title":"class - SaveProblemSourceSelectedOrdinalColumns","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemSourceSelectedOrdinalColumns\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-source-selected-ordinal-columns.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                selectedOrdinalColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        selectedOrdinalColumns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-selected-ordinal-columns.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject } from 'class-validator';\n\nexport class SaveProblemSourceSelectedOrdinalColumns {\n  @IsObject()\n  selectedOrdinalColumns: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SendgridModule.html":{"url":"modules/SendgridModule.html","title":"module - SendgridModule","body":"\n                   \n\n\n\n\n    Modules\n    SendgridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SendgridModule\n\n\n\ncluster_SendgridModule_providers\n\n\n\ncluster_SendgridModule_exports\n\n\n\n\nSendgridService \n\nSendgridService \n\n\n\nSendgridModule\n\nSendgridModule\n\nSendgridService  -->\n\nSendgridModule->SendgridService \n\n\n\n\n\nSendgridService\n\nSendgridService\n\nSendgridModule -->\n\nSendgridService->SendgridModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sendgrid/sendgrid.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SendgridService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SendgridService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SendgridService } from './sendgrid.service';\n\n@Module({\n  providers: [SendgridService],\n  exports: [SendgridService],\n})\nexport class SendgridModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SendgridService.html":{"url":"injectables/SendgridService.html","title":"injectable - SendgridService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SendgridService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/sendgrid.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/sendgrid/sendgrid.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(mail: SendGrid.MailDataRequired)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                            SendGrid.MailDataRequired\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as SendGrid from '@sendgrid/mail';\n\n@Injectable()\nexport class SendgridService {\n  constructor(private readonly configService: ConfigService) {\n    SendGrid.setApiKey(this.configService.get('SENDGRID_API_KEY'));\n  }\n\n  async send(\n    mail: SendGrid.MailDataRequired,\n  ): Promise {\n    try {\n      const transport = await SendGrid.send(mail);\n      return { error: null, statusCode: transport[0].statusCode };\n    } catch ({ response, code }) {\n      return {\n        error: {\n          code: 'sengrid_error',\n          detail: response.body.errors,\n        },\n        statusCode: code,\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                connections\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                problems\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                resetPasswordToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        connections\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Connection[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, connection => connection.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, problem => problem.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshToken[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, refreshToken => refreshToken.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { RefreshToken } from 'src/auth/refreshToken.entity';\nimport { Connection } from 'src/connection/connection.entity';\nimport { Problem } from 'src/problem/entities/problem.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  email: string;\n  @Column()\n  password: string;\n  @OneToMany(() => RefreshToken, (refreshToken) => refreshToken.user)\n  refreshTokens: RefreshToken[];\n  @Column({ default: '' })\n  resetPasswordToken: string;\n  @OneToMany(() => Problem, (problem) => problem.user, { cascade: true })\n  problems: Problem[];\n  @OneToMany(() => Connection, (connection) => connection.user, {\n    cascade: true,\n  })\n  connections: Connection[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUserModule\n\nUserModule\n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersRepository.html":{"url":"classes/UsersRepository.html","title":"class - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { User } from './user.entity';\n\nexport class UsersRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                createQueryBuilder\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneBy\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createQueryBuilder\n                        \n                    \n                \n            \n            \n                \ncreateQueryBuilder(alias: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneBy\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneBy(property: FindOptionsWhere | FindOptionsWhere[])\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                FindOptionsWhere | FindOptionsWhere[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOneOptions, FindOptionsWhere, Repository } from 'typeorm';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) private usersRepository: Repository,\n  ) {}\n\n  async findOneBy(\n    property: FindOptionsWhere | FindOptionsWhere[],\n  ): Promise {\n    return this.usersRepository.findOneBy(property);\n  }\n\n  createQueryBuilder(alias: string) {\n    return this.usersRepository.createQueryBuilder(alias);\n  }\n\n  async findOne(options: FindOneOptions): Promise {\n    return this.usersRepository.findOne(options);\n  }\n  create(payload: { email: string; password: string }): User {\n    return this.usersRepository.create(payload);\n  }\n  async save(user: User): Promise {\n    return await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation.pipe.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation.pipe.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToInstance(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      const formattedErrors = {};\n      errors.forEach((e) => {\n        const messages = Object.values(e.constraints);\n        formattedErrors[e.property] = messages.flatMap((message) =>\n          // * the custom validation classes returns a comma separated string so we need to divide that string into an ordered list of substrings and assign it to the property\n          message.split(','),\n        );\n      });\n      throw new BadRequestException({\n        error: { code: 'invalid_body', detail: formattedErrors },\n        resource: null,\n      });\n    }\n    return value;\n  }\n\n  private toValidate(metatype): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/is-valid-password.ts\n            \n            class\n            IsValidPassword\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtBaseAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtRefreshAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtResetAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            variable\n            customResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtStrategyRefreshToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-reset-password.strategy.ts\n            \n            injectable\n            JwtStrategyResetPassword\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/refreshToken.entity.ts\n            \n            entity\n            RefreshToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/refreshTokens.repository.ts\n            \n            class\n            RefreshTokensRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recovePasswordDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recoverPasswordBadRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recoverPasswordSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/connection/connection-options.interface.ts\n            \n            interface\n            ConnectionOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/connection/connection.entity.ts\n            \n            entity\n            Connection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/connection/connection.service.ts\n            \n            injectable\n            ConnectionService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/connection/connections.repository.ts\n            \n            class\n            ConnectionsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/create-connection-options.dto.ts\n            \n            class\n            CreateConnectionOptionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/get-problem-source-tables.ts\n            \n            class\n            GetProblemSourceTablesDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-new-registry-selected-columns.dto.ts\n            \n            class\n            SaveNewRegistrySelectedColumnsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-algorithm.dto.ts\n            \n            class\n            SaveProblemAlgorithmDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-source-columns-types.dto.ts\n            \n            class\n            SaveProblemSourceColumnsTypeDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-source-columns.ts\n            \n            class\n            SaveProblemSourceColumnsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-source-selected-ordinal-columns.dto.ts\n            \n            class\n            SaveProblemSourceSelectedOrdinalColumns\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-source.dto.ts\n            \n            class\n            SaveProblemSourceDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.controller.ts\n            \n            controller\n            ParameterizerController\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.service.ts\n            \n            injectable\n            ParameterizerService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            CreateNewConnectionResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            CreateNewConnectionResponseWithError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            DatabaseInstance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            NewRegistry\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSource\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSourceColumn\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSourceMappedColumns\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSourceSchema\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSourceTable\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProbleSourceSelectedColumnsNewProblem\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/problem/entities/algorithm.entity.ts\n            \n            entity\n            Algorithm\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/base-case-column.entity.ts\n            \n            entity\n            BaseCaseColumn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/mapped-value.entity.ts\n            \n            entity\n            MappedValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/problem.entity.ts\n            \n            entity\n            Problem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/registry.entity.ts\n            \n            entity\n            Registry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/problem.service.ts\n            \n            injectable\n            ProblemService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/problem/repositories/algorithms.repository.ts\n            \n            class\n            AlgorithmsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/repositories/base-case-column.repository.ts\n            \n            class\n            BaseCaseColumns\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/repositories/mapped-values.repository.ts\n            \n            class\n            MappedValuesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/repositories/problems.repository.ts\n            \n            class\n            ProblemsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.service.ts\n            \n            injectable\n            SendgridService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            class\n            UsersRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.0\n        \n            @sendgrid/mail : ^7.7.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            joi : ^17.6.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConnectionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParameterizerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProblemModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SendgridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConnectionModule\n\n\n\ncluster_ConnectionModule_exports\n\n\n\ncluster_ConnectionModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_ParameterizerModule\n\n\n\ncluster_ParameterizerModule_providers\n\n\n\ncluster_ProblemModule\n\n\n\ncluster_ProblemModule_exports\n\n\n\ncluster_ProblemModule_providers\n\n\n\ncluster_SendgridModule\n\n\n\ncluster_SendgridModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConnectionModule\n\nConnectionModule\n\n\n\nParameterizerModule\n\nParameterizerModule\n\nParameterizerModule -->\n\nConnectionModule->ParameterizerModule\n\n\n\nAppModule -->\n\nConnectionModule->AppModule\n\n\n\n\n\nConnectionService \n\nConnectionService \n\nConnectionService  -->\n\nConnectionModule->ConnectionService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nConnectionModule -->\n\nDatabaseModule->ConnectionModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\nAppModule -->\n\nParameterizerModule->AppModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nConnectionModule -->\n\nProblemModule->ConnectionModule\n\n\n\nParameterizerModule -->\n\nProblemModule->ParameterizerModule\n\n\n\nAppModule -->\n\nProblemModule->AppModule\n\n\n\n\n\nProblemService \n\nProblemService \n\nProblemService  -->\n\nProblemModule->ProblemService \n\n\n\n\n\nSendgridModule\n\nSendgridModule\n\nAuthModule -->\n\nSendgridModule->AuthModule\n\n\n\nAppModule -->\n\nSendgridModule->AppModule\n\n\n\n\n\nSendgridService \n\nSendgridService \n\nSendgridService  -->\n\nSendgridModule->SendgridService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nConnectionModule -->\n\nUserModule->ConnectionModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSendgridService\n\nSendgridService\n\nSendgridModule -->\n\nSendgridService->SendgridModule\n\n\n\nAppModule -->\n\nSendgridService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nJwtStrategyRefreshToken\n\nJwtStrategyRefreshToken\n\nAuthModule -->\n\nJwtStrategyRefreshToken->AuthModule\n\n\n\n\n\nJwtStrategyResetPassword\n\nJwtStrategyResetPassword\n\nAuthModule -->\n\nJwtStrategyResetPassword->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nConnectionService\n\nConnectionService\n\nConnectionModule -->\n\nConnectionService->ConnectionModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nParameterizerService\n\nParameterizerService\n\nParameterizerModule -->\n\nParameterizerService->ParameterizerModule\n\n\n\n\n\nProblemService\n\nProblemService\n\nProblemModule -->\n\nProblemService->ProblemModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            customResponse   (src/.../jwt-auth.guard.ts)\n                        \n                        \n                            recovePasswordDescription   (src/.../recover-password.ts)\n                        \n                        \n                            recoverPasswordBadRequest   (src/.../recover-password.ts)\n                        \n                        \n                            recoverPasswordSuccessfulResponse   (src/.../recover-password.ts)\n                        \n                        \n                            refreshTokenDescription   (src/.../refresh-token.ts)\n                        \n                        \n                            refreshTokenSuccessfulResponse   (src/.../refresh-token.ts)\n                        \n                        \n                            refreshTokenUnauthorizedResponse   (src/.../refresh-token.ts)\n                        \n                        \n                            resetPasswordCorrectPayload   (src/.../reset-password.ts)\n                        \n                        \n                            resetPasswordDescription   (src/.../reset-password.ts)\n                        \n                        \n                            resetPasswordSuccessfulResponse   (src/.../reset-password.ts)\n                        \n                        \n                            resetPasswordUnauthorizedResponse   (src/.../reset-password.ts)\n                        \n                        \n                            signInCorrectPayload   (src/.../sign-in.ts)\n                        \n                        \n                            signInDescription   (src/.../sign-in.ts)\n                        \n                        \n                            signInSuccessfulResponse   (src/.../sign-in.ts)\n                        \n                        \n                            signInUnauthorizedResponse   (src/.../sign-in.ts)\n                        \n                        \n                            signUpBadRequestResponse   (src/.../sign-up.ts)\n                        \n                        \n                            signUpCorrectPayload   (src/.../sign-up.ts)\n                        \n                        \n                            signUpDescription   (src/.../sign-up.ts)\n                        \n                        \n                            signUpSuccessfulResponse   (src/.../sign-up.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/jwt-auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        customResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/recover-password.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recovePasswordDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  summary: 'Send email with link to reset password',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recoverPasswordBadRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 400,\n  description: 'User does not exist',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recoverPasswordSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 202,\n  description: 'Email sent',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              to: { type: 'string' },\n              from: { type: 'string' },\n              subject: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/refresh-token.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        refreshTokenDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  summary: 'Create a new refresh and access token',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokenSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 202,\n  description: 'Token refreshed',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              accessToken: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokenUnauthorizedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 401,\n  description: 'User provided invalid old refresh token',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/reset-password.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resetPasswordCorrectPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  schema: {\n    type: 'object',\n    properties: {\n      password: { type: 'string' },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { summary: 'Update password user' }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 200,\n  description: 'User patched',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              id: { type: 'string' },\n              email: { type: 'string' },\n              resetPasswordToken: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordUnauthorizedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 401,\n  description: 'User provided invalid credentials',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/sign-in.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        signInCorrectPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  schema: {\n    type: 'object',\n    properties: {\n      email: { type: 'string' },\n      password: { type: 'string' },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signInDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { summary: 'Log in a registered user' }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signInSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 201,\n  description: 'User created',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              accessToken: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signInUnauthorizedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 401,\n  description: 'User provided invalid credentials',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/sign-up.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        signUpBadRequestResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 400,\n  description: 'User already exists',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpCorrectPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  schema: {\n    type: 'object',\n    properties: {\n      email: { type: 'string' },\n      password: { type: 'string' },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { summary: 'Create a new user' }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 201,\n  description: 'User created',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              id: { type: 'string' },\n              email: { type: 'string' },\n              password: { type: 'string' },\n              resetPasswordToken: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
