var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Algorithm.html",[0,1.426,1,2.051]],["body/entities/Algorithm.html",[0,2.211,1,3.18,2,2.358,3,0.12,4,0.087,5,0.103,6,4.214,7,0.445,8,1.411,9,1.981,10,2.05,11,5.421,12,0.793,13,0.013,14,1.181,15,2.321,16,3.337,17,1.157,18,4.835,19,3.255,20,3.549,21,4.835,22,1.687,23,3.255,24,4.901,25,4.835,26,4.214,27,3.804,28,4.638,29,4.835,30,0.176,31,3.216,32,4.193,33,2.59,34,1.597,35,3.804,36,0.12,37,0.008,38,4.214,39,2.726,40,2.469,41,3.499,42,0.01,43,0.01]],["title/classes/AlgorithmsRepository.html",[37,0.006,44,2.907]],["body/classes/AlgorithmsRepository.html",[1,3.099,3,0.15,4,0.109,5,0.129,13,0.013,30,0.202,34,2.005,36,0.15,37,0.01,42,0.011,43,0.011,44,5.186,45,2.078,46,5.289,47,1.86,48,3.72,49,4.776]],["title/controllers/AppController.html",[50,2.152,51,2.907]],["body/controllers/AppController.html",[3,0.14,4,0.101,5,0.121,7,0.521,13,0.013,14,1.053,15,1.806,17,0.9,30,0.194,36,0.14,37,0.009,42,0.011,43,0.011,50,3.683,51,4.975,52,3.033,53,4.934,54,2.118,55,6.71,56,5.661,57,1.744,58,1.239,59,4.673,60,4.934,61,3.811,62,4.097,63,1.744,64,5.661]],["title/modules/AppModule.html",[65,1.479,66,2.907]],["body/modules/AppModule.html",[2,1.673,3,0.085,4,0.061,5,0.073,12,0.347,13,0.013,20,2.813,22,1.079,30,0.228,36,0.085,37,0.005,42,0.008,43,0.008,51,4.174,52,2.641,58,0.751,59,4.389,60,2.99,65,1.815,66,5.947,67,1.601,68,2.301,69,2.99,70,2.99,71,2.99,72,4.681,73,4.138,74,4.389,75,4.681,76,3.92,77,4.389,78,4.681,79,4.138,80,4.138,81,2.517,82,1.311,83,1.673,84,3.43,85,2.641,86,3.433,87,4.928,88,3.753,89,1.934,90,2.31,91,1.752,92,4.295,93,3.43,94,3.43,95,2.517,96,3.43,97,1.079,98,3.43,99,3.43,100,3.43,101,3.43,102,3.43,103,3.43,104,3.43,105,3.43,106,3.43,107,1.323,108,3.43,109,3.43,110,3.43,111,3.43,112,3.43,113,3.43,114,3.43,115,3.43,116,3.43,117,3.43,118,3.43,119,3.43,120,3.43,121,3.43,122,3.43,123,3.43,124,3.43,125,3.43,126,3.43,127,1.263,128,3.43,129,2.483,130,3.43,131,2.31,132,3.43,133,2.042,134,3.43,135,1.362,136,3.43,137,2.165,138,3.43,139,3.43,140,3.43]],["title/injectables/AppService.html",[59,2.536,141,0.713]],["body/injectables/AppService.html",[3,0.145,4,0.105,5,0.125,7,0.539,13,0.013,14,1.075,17,0.932,30,0.165,36,0.145,37,0.009,42,0.011,43,0.011,54,2.162,55,6.787,57,1.805,58,1.282,59,4.43,63,1.805,141,1.245,142,2.006,143,5.105,144,5.858,145,5.858,146,5.858]],["title/controllers/AuthController.html",[50,2.152,147,2.907]],["body/controllers/AuthController.html",[3,0.052,4,0.037,5,0.044,7,0.192,10,1.698,12,0.54,13,0.014,14,1.147,15,1.821,17,0.908,20,2.784,30,0.204,36,0.052,37,0.003,42,0.005,43,0.005,50,1.117,52,1.117,54,1.037,57,1.758,58,0.456,63,1.644,88,2.521,89,1.175,95,3.067,97,1.368,127,2.736,135,2.563,147,2.437,148,1.817,149,1.64,150,2.085,151,4.235,152,3.691,153,3.691,154,3.691,155,2.934,156,2.085,157,3.367,158,3.367,159,2.085,160,2.085,161,1.954,162,1.886,163,5.334,164,2.918,165,1.817,166,6.527,167,2.085,168,2.085,169,2.125,170,2.085,171,2.085,172,2.521,173,2.085,174,1.316,175,2.085,176,4.651,177,2.085,178,2.085,179,2.085,180,2.085,181,2.085,182,2.085,183,3.519,184,2.085,185,4.235,186,2.085,187,3.691,188,1.817,189,1.817,190,2.085,191,4.491,192,4.862,193,1.817,194,1.817,195,1.64,196,1.64,197,1.509,198,4.651,199,1.509,200,0.768,201,2.521,202,1.64,203,1.64,204,2.085,205,1.241,206,1.241,207,1.316,208,2.934,209,1.509,210,1.64,211,1.64,212,1.509,213,1.817,214,1.817,215,1.817,216,2.085,217,1.817,218,1.817,219,1.817,220,1.817,221,3.367,222,1.817,223,1.817,224,1.817,225,1.817,226,1.817,227,1.817,228,1.817,229,2.085,230,1.817,231,1.817,232,1.817,233,1.817,234,2.085,235,2.085,236,0.973,237,1.804,238,2.085,239,2.085,240,2.085,241,2.085,242,3.367,243,2.085,244,2.467,245,2.404,246,2.491,247,2.085,248,1.727,249,2.603,250,2.085,251,2.085,252,2.085,253,2.085,254,2.085,255,3.367,256,2.085,257,3.826,258,3.367,259,4.235,260,4.235,261,3.367,262,2.934,263,4.235,264,3.367,265,3.367,266,3.367,267,3.367,268,2.934,269,4.238,270,2.934,271,2.934,272,3.367,273,2.085,274,2.085,275,2.085,276,3.367,277,2.085,278,2.741,279,2.934,280,0.968,281,1.002,282,2.085,283,2.085,284,2.085,285,1.817,286,1.817,287,2.085,288,2.085,289,2.934,290,2.085,291,2.085,292,2.085,293,2.085,294,2.085,295,2.085,296,2.085,297,1.64,298,2.085,299,2.085,300,2.085,301,2.085,302,2.085,303,2.085,304,2.085,305,2.085,306,2.085,307,2.085,308,2.085]],["title/modules/AuthModule.html",[65,1.479,72,2.705]],["body/modules/AuthModule.html",[3,0.102,4,0.074,5,0.088,13,0.013,30,0.229,36,0.102,37,0.006,42,0.009,43,0.009,52,2.999,58,0.901,65,2.061,67,1.921,68,2.613,72,5.543,77,4.65,79,4.385,81,2.859,82,2.139,83,2.008,85,2.999,86,3.332,90,2.771,91,2.102,95,2.102,147,4.604,201,4.385,202,3.239,207,3.534,309,3.587,310,4.116,311,3.587,312,4.96,313,4.96,314,4.96,315,4.96,316,4.116,317,5.598,318,3.239,319,5.598,320,2.008,321,4.116,322,3.587,323,4.116,324,2.45,325,4.116,326,4.116,327,4.116,328,4.116,329,3.239,330,3.534,331,3.239,332,4.116]],["title/injectables/AuthService.html",[141,0.713,201,2.391]],["body/injectables/AuthService.html",[3,0.043,4,0.031,5,0.037,7,0.159,9,1.067,10,1.793,12,0.646,13,0.014,14,1.17,17,0.958,30,0.18,36,0.043,37,0.003,42,0.005,43,0.005,54,0.888,57,1.786,58,0.378,63,1.856,80,3.293,82,0.66,83,0.842,88,3.293,89,0.973,91,0.881,95,3.336,97,1.672,127,2.698,135,2.302,137,1.089,141,0.512,142,0.591,152,2.512,153,3.235,154,2.512,155,3.235,161,2.063,162,1.991,164,3.164,165,2.512,169,4.279,172,1.027,200,0.635,201,1.716,203,1.358,211,1.358,212,1.249,236,1.346,237,2.584,244,2.944,245,2.063,246,3.47,248,1.591,249,2.698,257,2.268,268,1.504,269,2.512,270,1.504,271,1.504,278,2.939,280,1.247,281,1.29,297,2.268,318,1.358,329,1.358,330,3.492,331,1.358,333,1.504,334,2.883,335,2.883,336,3.712,337,1.726,338,2.939,339,5.532,340,1.726,341,2.883,342,1.726,343,2.883,344,1.726,345,1.726,346,1.726,347,1.726,348,1.726,349,3.712,350,3.712,351,1.726,352,2.883,353,1.726,354,1.726,355,1.29,356,1.726,357,1.726,358,3.712,359,1.726,360,3.795,361,1.249,362,2.268,363,1.726,364,1.358,365,1.726,366,4.203,367,1.726,368,2.883,369,3.712,370,3.712,371,3.712,372,3.712,373,3.235,374,3.712,375,3.712,376,3.712,377,2.512,378,2.214,379,2.283,380,1.726,381,1.726,382,2.512,383,5.799,384,4.336,385,4.336,386,1.726,387,1.726,388,1.726,389,1.726,390,1.726,391,1.726,392,1.726,393,3.712,394,3.712,395,5.213,396,1.726,397,3.712,398,1.726,399,3.712,400,1.726,401,2.883,402,1.726,403,1.726,404,1.726,405,1.504,406,1.726,407,1.726,408,1.726,409,1.726,410,5.213,411,1.726,412,1.726,413,1.726,414,2.883,415,2.883,416,2.883,417,1.726,418,1.726,419,1.726,420,1.726,421,1.504,422,2.883,423,2.268,424,1.726,425,1.726,426,1.726,427,1.726,428,1.726,429,2.883,430,1.726,431,3.712,432,2.883,433,1.726,434,2.512,435,1.504,436,1.726,437,1.726,438,1.726,439,2.883,440,1.726,441,1.726,442,2.883,443,1.726,444,1.726,445,1.726,446,1.726,447,1.726,448,1.726,449,1.504,450,1.726,451,1.726,452,1.726,453,1.504,454,1.162,455,1.726,456,1.726]],["title/entities/BaseCaseColumn.html",[0,1.426,457,1.959]],["body/entities/BaseCaseColumn.html",[0,1.915,2,1.902,3,0.097,4,0.07,5,0.083,7,0.359,8,1.222,9,1.778,10,1.84,12,0.787,13,0.013,14,1.16,15,2.37,16,2.89,17,1.182,19,2.625,20,3.255,22,1.683,23,3.632,26,4.701,27,4.245,28,4.164,30,0.189,31,3.115,32,4.164,33,2.089,34,1.288,35,3.068,36,0.097,37,0.006,38,4.701,39,2.198,40,1.991,41,2.822,42,0.009,43,0.009,355,2.414,457,2.631,458,5.48,459,3.534,460,3.398,461,5.39,462,4.867,463,4.867,464,3.899,465,4.314,466,5.394,467,3.899,468,2.572,469,5.394,470,3.899,471,3.899,472,2.321,473,5.394,474,3.899,475,3.899,476,3.899,477,3.211,478,3.632,479,3.899,480,3.398,481,3.398,482,3.068,483,2.822]],["title/classes/BaseCaseColumns.html",[37,0.006,484,2.907]],["body/classes/BaseCaseColumns.html",[3,0.148,4,0.107,5,0.128,13,0.013,30,0.201,34,1.979,36,0.148,37,0.009,42,0.011,43,0.011,45,2.051,47,1.846,48,3.7,457,2.922,459,3.32,484,5.147,485,5.221,486,5.221,487,4.714,488,3.377]],["title/entities/Connection.html",[0,1.426,107,1.079]],["body/entities/Connection.html",[0,1.943,2,1.943,3,0.099,4,0.071,5,0.085,7,0.366,8,1.24,9,1.798,11,4.922,12,0.791,13,0.013,14,1.219,15,2.493,16,2.933,17,1.243,20,2.67,22,1.597,23,2.682,30,0.177,31,3.762,32,3.685,33,2.134,34,1.316,36,0.099,37,0.006,40,3.439,42,0.009,43,0.009,97,1.69,107,1.47,129,4.526,131,4.211,133,3.723,135,2.483,137,3.948,200,1.467,472,2.371,477,3.258,489,3.471,490,6.254,491,4.922,492,2.883,493,3.983,494,3.983,495,3.983,496,3.983,497,3.983,498,3.983,499,4.771,500,3.983,501,3.983,502,5.474,503,3.983,504,3.983,505,2.883,506,2.883]],["title/modules/ConnectionModule.html",[65,1.479,73,2.391]],["body/modules/ConnectionModule.html",[3,0.118,4,0.085,5,0.101,13,0.013,30,0.221,36,0.118,37,0.008,42,0.01,43,0.01,58,1.042,65,2.27,67,2.222,68,2.878,73,4.892,74,4.846,76,4.328,79,4.57,81,3.148,82,1.819,83,2.322,85,3.304,86,3.67,90,3.205,91,2.431,107,1.278,322,4.149,507,4.149,508,4.149,509,4.149,510,4.76,511,4.868,512,4.76,513,4.151,514,4.76,515,3.746,516,3.746,517,4.76,518,4.76]],["title/interfaces/ConnectionOptions.html",[519,1.079,520,2.536]],["body/interfaces/ConnectionOptions.html",[3,0.128,4,0.092,5,0.11,7,0.474,8,1.47,9,2.142,12,0.805,13,0.013,14,1.29,36,0.128,40,3.626,42,0.01,43,0.01,129,5.393,131,5.017,133,4.436,135,2.958,137,4.704,491,5.864,519,1.385,520,4.096,521,2.215,522,3.733,523,4.495]],["title/injectables/ConnectionService.html",[141,0.713,511,2.391]],["body/injectables/ConnectionService.html",[3,0.042,4,0.031,5,0.036,7,0.157,9,1.38,10,1.844,12,0.684,13,0.014,14,1.196,17,0.986,22,0.374,30,0.17,34,0.565,36,0.042,37,0.003,42,0.005,43,0.005,48,2.103,54,0.881,57,1.849,58,0.374,63,2.17,91,0.873,97,1.05,107,2.125,127,2.795,141,0.508,142,0.585,161,2.122,162,2.048,164,3.324,236,1.335,237,2.31,244,2.887,245,2.23,246,3.387,248,2.067,249,2.34,278,2.431,280,0.492,338,3.106,355,1.929,361,1.237,364,1.345,366,1.49,378,0.873,379,0.706,382,1.49,423,1.345,511,1.703,516,1.345,520,1.079,524,1.49,525,3.688,526,3.688,527,3.688,528,2.86,529,3.688,530,3.688,531,3.688,532,3.214,533,2.902,534,1.71,535,3.275,536,2.669,537,3.688,538,2.431,539,1.71,540,1.71,541,2.187,542,4.798,543,1.71,544,1.71,545,1.522,546,1.71,547,3.214,548,1.71,549,2.4,550,2.438,551,1.71,552,2.86,553,1.71,554,1.71,555,1.71,556,1.71,557,1.71,558,1.71,559,4.311,560,1.71,561,1.71,562,1.71,563,1.71,564,1.71,565,2.251,566,1.71,567,0.734,568,0.679,569,0.679,570,0.679,571,1.345,572,1.345,573,1.345,574,1.71,575,1.71,576,1.71,577,1.345,578,1.71,579,1.71,580,1.71,581,2.86,582,1.71,583,1.71,584,1.71,585,1.71,586,1.71,587,1.71,588,1.71,589,5.509,590,5.509,591,5.509,592,5.188,593,5.509,594,1.49,595,2.86,596,3.688,597,3.688,598,1.71,599,1.079,600,2.86,601,1.71,602,1.71,603,1.71,604,1.71,605,4.798,606,0.798,607,1.71,608,0.798,609,1.71,610,1.71,611,1.71,612,2.187,613,1.71,614,1.613,615,1.71,616,3.688,617,1.71,618,1.71,619,1.71,620,1.71,621,2.86,622,0.798,623,1.093,624,1.71,625,1.71,626,1.71,627,2.493,628,1.71,629,2.493,630,1.71,631,1.71]],["title/classes/ConnectionsRepository.html",[37,0.006,536,2.907]],["body/classes/ConnectionsRepository.html",[3,0.15,4,0.109,5,0.129,13,0.013,30,0.202,34,2.005,36,0.15,37,0.01,42,0.011,43,0.011,45,2.078,47,1.86,48,3.72,107,1.63,516,4.776,536,5.186,632,5.289]],["title/classes/CreateConnectionOptionsDto.html",[37,0.006,633,2.907]],["body/classes/CreateConnectionOptionsDto.html",[3,0.116,4,0.084,5,0.1,7,0.432,8,1.385,12,0.774,13,0.013,14,1.234,15,2.44,17,1.217,30,0.133,36,0.116,37,0.01,40,3.123,42,0.01,43,0.01,45,1.609,107,2.092,129,4.919,131,4.576,133,4.046,135,2.698,137,4.29,491,5.349,633,4.425,634,6.789,635,4.096,636,4.574,637,4.7,638,4.7,639,4.7,640,4.7,641,6.797,642,4.7,643,4.7,644,2.194]],["title/interfaces/CreateNewConnectionResponse.html",[519,1.079,645,1.658]],["body/interfaces/CreateNewConnectionResponse.html",[3,0.104,4,0.076,5,0.09,7,0.388,8,1.289,9,1.213,12,0.698,13,0.013,14,1.272,22,0.923,30,0.182,36,0.197,42,0.009,43,0.009,47,1.095,97,1.246,107,1.852,200,1.553,245,2.466,248,1.637,280,1.637,281,1.694,355,2.547,468,1.498,519,2.14,521,1.812,541,1.675,545,2.349,549,1.498,550,1.444,567,1.812,568,1.675,569,1.675,570,1.675,606,1.969,608,1.969,612,2.558,622,1.969,623,1.612,645,2.659,646,1.969,647,2.657,648,1.888,649,1.741,650,1.812,651,1.675,652,1.812,653,2.26,654,1.888,655,1.888,656,1.888,657,1.741,658,1.888,659,2.26,660,1.741,661,1.675]],["title/interfaces/CreateNewConnectionResponseWithError.html",[519,1.079,567,1.725]],["body/interfaces/CreateNewConnectionResponseWithError.html",[3,0.104,4,0.075,5,0.089,7,0.386,8,1.286,9,1.207,12,0.697,13,0.013,14,1.272,22,0.919,30,0.182,36,0.197,42,0.009,43,0.009,47,1.473,97,1.242,107,1.849,200,1.546,245,1.943,248,2.067,280,1.632,281,1.689,355,2.539,468,1.491,519,2.139,521,1.804,541,1.667,545,2.342,549,1.491,550,1.438,567,2.437,568,1.667,569,1.667,570,1.667,606,1.96,608,1.96,612,2.552,622,1.96,623,1.605,645,2.653,646,1.96,647,2.649,648,1.879,649,1.733,650,1.804,651,1.667,652,1.804,653,2.253,654,1.879,655,1.879,656,1.879,657,1.733,658,1.879,659,2.253,660,1.733,661,1.667]],["title/classes/CreateUserDto.html",[37,0.006,183,2.907]],["body/classes/CreateUserDto.html",[3,0.117,4,0.084,5,0.1,7,0.433,8,1.387,12,0.62,13,0.013,14,1.104,15,1.954,17,0.974,30,0.173,36,0.117,37,0.01,42,0.01,43,0.01,45,1.613,135,3.199,169,4.715,183,4.433,577,6.134,636,3.453,644,2.199,662,5.931,663,4.106,664,6.805,665,5.67,666,4.712,667,4.712,668,4.712,669,7.205,670,6.805,671,6.125,672,6.125,673,6.125,674,4.712,675,7.205,676,4.433,677,5.338,678,4.712,679,4.712,680,4.712,681,2.805,682,3.41,683,4.712,684,4.712]],["title/interfaces/DatabaseInstance.html",[519,1.079,650,1.725]],["body/interfaces/DatabaseInstance.html",[3,0.103,4,0.074,5,0.088,7,0.382,8,1.276,9,1.194,12,0.725,13,0.013,14,1.27,22,0.909,30,0.181,36,0.197,42,0.009,43,0.009,47,1.078,97,1.233,107,1.84,200,1.529,245,2.453,248,2.059,280,1.619,281,1.676,355,2.52,468,1.474,519,2.134,521,1.783,541,1.649,545,2.324,549,1.474,550,1.422,567,1.783,568,1.649,569,1.649,570,1.649,606,1.938,608,1.938,612,2.537,622,1.938,623,1.587,645,2.324,646,1.938,647,3.199,648,1.858,649,1.714,650,2.419,651,1.649,652,1.783,653,2.236,654,1.858,655,1.858,656,1.858,657,1.714,658,1.858,659,2.236,660,1.714,661,1.649]],["title/modules/DatabaseModule.html",[65,1.479,74,2.536]],["body/modules/DatabaseModule.html",[3,0.137,4,0.099,5,0.118,13,0.013,30,0.192,36,0.137,37,0.009,42,0.011,43,0.011,58,1.213,65,2.499,67,2.587,68,3.168,74,5.101,81,3.465,82,2.118,83,2.704,85,3.636,513,4.569,535,5.269,685,4.831,686,4.831,687,4.831,688,5.543,689,5.543]],["title/injectables/DatabaseService.html",[141,0.713,535,2.536]],["body/injectables/DatabaseService.html",[3,0.117,4,0.085,5,0.101,7,0.435,10,1.409,12,0.479,13,0.013,17,0.753,30,0.204,36,0.117,37,0.007,42,0.01,43,0.01,54,1.893,57,1.459,58,1.037,63,1.893,97,1.037,107,1.272,127,2.512,131,4.137,133,3.658,141,1.091,142,1.622,161,1.622,162,1.565,164,2.869,244,2.349,245,2.104,246,2.211,248,1.767,249,2.997,257,4.836,280,1.362,281,1.409,379,1.955,520,2.99,522,3.427,535,3.879,545,2.815,571,3.727,573,3.727,647,3.37,648,2.119,650,2.034,653,2.708,690,4.127,691,6.822,692,4.736,693,4.736,694,4.736,695,4.127,696,4.736,697,4.127,698,3.188,699,4.736,700,4.736]],["title/classes/GetProblemSourceTablesDto.html",[37,0.006,701,2.907]],["body/classes/GetProblemSourceTablesDto.html",[3,0.143,4,0.134,5,0.123,7,0.532,8,1.578,12,0.585,13,0.013,14,1.067,15,1.845,17,0.92,22,1.525,30,0.163,36,0.143,37,0.011,42,0.011,43,0.011,45,1.981,550,2.559,636,4.213,644,2.7,701,5.04,702,6.07,703,5.042,704,5.785]],["title/classes/IsValidPassword.html",[37,0.006,682,2.907]],["body/classes/IsValidPassword.html",[3,0.112,4,0.081,5,0.096,7,0.547,10,1.981,12,0.602,13,0.013,14,1.02,17,0.946,30,0.127,36,0.112,37,0.009,42,0.009,43,0.009,45,1.543,54,1.832,57,1.832,63,2.182,127,1.659,135,2.811,161,2.037,162,1.965,244,2.545,249,2.198,459,2.777,599,2.844,644,2.103,659,1.789,665,5.24,681,3.541,682,4.819,705,5.803,706,3.927,707,5.184,708,6.658,709,5.948,710,5.948,711,7.711,712,4.506,713,7.081,714,5.948,715,4.506,716,4.506,717,5.948,718,4.506,719,4.506,720,3.927,721,7.081,722,4.506,723,4.506,724,4.506,725,4.506,726,5.948,727,4.506,728,4.506,729,5.948,730,4.506,731,4.506,732,4.506,733,4.506]],["title/injectables/JwtAuthGuard.html",[141,0.713,734,2.391]],["body/injectables/JwtAuthGuard.html",[3,0.2,4,0.076,5,0.09,7,0.388,10,1.255,12,0.427,13,0.013,17,0.671,30,0.161,36,0.171,37,0.011,42,0.009,43,0.009,47,1.79,54,1.754,57,1.3,58,0.923,63,2.125,82,1.612,97,1.729,135,1.675,141,1.278,142,1.444,161,1.444,162,1.394,172,2.511,205,2.511,206,2.511,244,1.612,248,1.213,280,1.213,281,1.255,320,2.058,324,2.511,378,2.154,379,1.741,698,2.84,734,3.388,735,3.209,736,2.663,737,4.12,738,5.212,739,5.718,740,5.718,741,4.219,742,3.832,743,3.832,744,2.84,745,4.12,746,2.84,747,2.663,748,4.992,749,4.992,750,4.663]],["title/injectables/JwtBaseAuthGuard.html",[141,0.713,747,2.536]],["body/injectables/JwtBaseAuthGuard.html",[3,0.2,4,0.076,5,0.09,7,0.388,10,1.255,12,0.427,13,0.013,17,0.671,30,0.161,36,0.171,37,0.011,42,0.009,43,0.009,47,1.79,54,1.754,57,1.3,58,0.923,63,2.125,82,1.612,97,1.729,135,1.675,141,1.278,142,1.444,161,1.444,162,1.394,172,2.511,205,2.511,206,2.511,244,1.612,248,1.213,280,1.213,281,1.255,320,2.058,324,2.511,378,2.154,379,1.741,698,2.84,734,2.511,735,3.209,736,2.663,737,4.12,738,5.212,739,5.718,740,5.718,742,3.832,743,3.832,744,2.84,745,4.12,746,2.84,747,3.593,748,4.992,749,4.992,750,4.663,751,4.219]],["title/injectables/JwtRefreshAuthGuard.html",[141,0.713,205,2.391]],["body/injectables/JwtRefreshAuthGuard.html",[3,0.2,4,0.076,5,0.09,7,0.388,10,1.255,12,0.427,13,0.013,17,0.671,30,0.161,36,0.171,37,0.011,42,0.009,43,0.009,47,1.79,54,1.754,57,1.3,58,0.923,63,2.125,82,1.612,97,1.729,135,1.675,141,1.278,142,1.444,161,1.444,162,1.394,172,2.511,205,3.388,206,2.511,244,1.612,248,1.213,280,1.213,281,1.255,320,2.058,324,2.511,378,2.154,379,1.741,698,2.84,734,2.511,735,3.209,736,2.663,737,4.12,738,5.212,739,5.718,740,5.718,742,3.832,743,3.832,744,2.84,745,4.12,746,2.84,747,2.663,748,4.992,749,4.992,750,4.663,752,4.219]],["title/injectables/JwtResetAuthGuard.html",[141,0.713,206,2.391]],["body/injectables/JwtResetAuthGuard.html",[3,0.2,4,0.076,5,0.09,7,0.388,10,1.255,12,0.427,13,0.013,17,0.671,30,0.161,36,0.171,37,0.011,42,0.009,43,0.009,47,1.79,54,1.754,57,1.3,58,0.923,63,2.125,82,1.612,97,1.729,135,1.675,141,1.278,142,1.444,161,1.444,162,1.394,172,2.511,205,2.511,206,3.388,244,1.612,248,1.213,280,1.213,281,1.255,320,2.058,324,2.511,378,2.154,379,1.741,698,2.84,734,2.511,735,3.209,736,2.663,737,4.12,738,5.212,739,5.718,740,5.718,742,3.832,743,3.832,744,2.84,745,4.12,746,2.84,747,2.663,748,4.992,749,4.992,750,4.663,753,4.219]],["title/injectables/JwtStrategy.html",[141,0.713,312,2.705]],["body/injectables/JwtStrategy.html",[3,0.124,4,0.089,5,0.106,7,0.459,10,1.891,12,0.643,13,0.013,17,1.011,30,0.208,36,0.124,37,0.008,42,0.01,43,0.01,47,1.295,54,1.958,57,1.537,58,1.092,63,1.537,88,4.526,89,2.814,127,2.575,133,2.971,141,1.128,142,1.709,161,2.176,162,2.1,174,3.15,207,3.15,236,2.33,278,2.814,312,4.279,320,2.434,454,3.36,599,3.15,681,3.783,754,4.35,755,4.6,756,4.991,757,5.539,758,4.991,759,3.927,760,3.612,761,3.36,762,3.612,763,4.35,764,3.612,765,3.927,766,4.991,767,3.927,768,3.927,769,4.991,770,3.927,771,4.991]],["title/injectables/JwtStrategyRefreshToken.html",[141,0.713,313,2.705]],["body/injectables/JwtStrategyRefreshToken.html",[3,0.094,4,0.068,5,0.081,7,0.35,9,1.096,10,1.58,12,0.537,13,0.013,17,0.845,20,1.859,30,0.213,36,0.094,37,0.006,42,0.008,43,0.008,47,0.989,54,1.636,57,1.174,58,0.834,63,1.636,88,4.283,89,2.149,95,2.711,97,0.834,127,2.25,141,0.942,142,1.305,161,1.818,162,1.754,163,4.178,172,3.637,174,2.406,191,5.468,199,2.758,207,3.352,236,2.478,237,2.845,244,2.335,245,1.305,246,2.478,248,1.096,249,1.859,278,2.149,279,4.627,280,1.096,281,1.134,285,3.322,286,3.322,313,3.575,320,1.859,324,4.394,330,4.66,331,2.999,338,4.162,362,4.178,364,2.999,421,3.322,454,4.114,599,2.406,681,3.16,735,3.445,755,2.758,759,2.999,760,3.843,761,2.566,762,3.843,764,2.758,765,2.999,767,2.999,768,2.999,770,4.178,772,3.322,773,3.811,774,5.309,775,3.811,776,3.811,777,3.811,778,3.811,779,3.811,780,3.811,781,5.309,782,3.811,783,3.322,784,3.322,785,5.309,786,3.811,787,3.811,788,3.811,789,3.811,790,3.811,791,3.811,792,3.811]],["title/injectables/JwtStrategyResetPassword.html",[141,0.713,314,2.705]],["body/injectables/JwtStrategyResetPassword.html",[3,0.121,4,0.087,5,0.104,7,0.448,10,1.863,12,0.633,13,0.013,17,0.996,30,0.206,36,0.121,37,0.008,42,0.01,43,0.01,47,1.265,54,1.928,57,1.501,58,1.067,63,1.501,82,2.789,88,4.493,89,2.747,127,2.546,135,1.934,141,1.111,142,1.668,161,2.143,162,2.068,174,3.076,207,3.951,236,2.275,278,2.747,314,4.214,320,2.377,454,3.281,599,3.076,681,3.726,735,3.899,755,4.53,757,5.455,759,3.834,760,4.53,761,3.281,762,4.53,764,3.527,765,3.834,767,3.834,768,3.834,770,3.834,793,4.247,794,4.873,795,4.873,796,4.873,797,4.873]],["title/entities/LiteralValue.html",[0,1.426,465,2.391]],["body/entities/LiteralValue.html",[0,2.268,2,2.454,3,0.125,4,0.09,5,0.107,7,0.463,8,1.447,9,2.018,12,0.71,13,0.013,14,1.131,15,2.239,16,3.423,17,1.117,19,3.387,20,3.116,28,3.387,30,0.18,31,2.982,33,2.696,34,1.663,36,0.125,37,0.008,42,0.01,43,0.01,457,3.944,459,2.349,465,3.803,472,2.995,477,3.803,488,2.837,623,2.683,798,6.436,799,3.959,800,6.389,801,5.031,802,5.031,803,5.031,804,3.387]],["title/classes/LiteralValuesRepository.html",[37,0.006,805,2.907]],["body/classes/LiteralValuesRepository.html",[3,0.149,4,0.108,5,0.128,13,0.013,30,0.202,34,1.992,36,0.149,37,0.01,42,0.011,43,0.011,45,2.064,47,1.853,48,3.71,465,3.589,478,4.059,805,5.167,806,5.255,807,4.745,808,4.745]],["title/injectables/LocalAuthGuard.html",[141,0.713,209,2.907]],["body/injectables/LocalAuthGuard.html",[3,0.15,4,0.109,5,0.129,13,0.013,30,0.202,36,0.15,37,0.01,42,0.011,43,0.011,47,1.575,58,1.328,141,1.272,142,2.078,209,5.186,320,2.96,736,3.831,743,4.086,809,5.289,810,6.069]],["title/injectables/LocalStrategy.html",[141,0.713,315,2.705]],["body/injectables/LocalStrategy.html",[3,0.115,4,0.083,5,0.099,7,0.427,10,1.805,12,0.614,13,0.013,14,1.168,17,0.965,30,0.21,36,0.115,37,0.007,42,0.01,43,0.01,47,1.205,54,1.868,57,1.43,58,1.016,61,3.125,63,1.43,97,1.568,127,2.488,135,2.844,141,1.076,142,1.589,161,2.077,162,2.004,164,2.831,169,3.828,200,1.709,201,4.538,202,3.652,210,3.652,236,2.166,244,1.774,246,2.166,248,1.334,280,1.334,281,1.381,315,4.083,320,2.264,378,2.37,379,1.915,453,4.045,681,3.61,742,4.083,746,3.125,760,3.359,761,3.125,762,3.359,763,4.045,764,3.359,811,4.045,812,4.641,813,4.641,814,6.065,815,4.641,816,4.641,817,4.641,818,4.641]],["title/entities/MappedValue.html",[0,1.426,468,1.426]],["body/entities/MappedValue.html",[0,2.229,2,2.389,3,0.121,4,0.088,5,0.104,7,0.45,8,1.423,9,1.993,12,0.74,13,0.013,14,1.12,15,2.332,16,3.365,17,1.163,30,0.177,31,3.529,33,2.625,34,1.619,36,0.121,37,0.008,42,0.01,43,0.01,457,3.925,459,2.287,468,2.684,472,2.916,477,3.739,488,2.762,658,3.102,659,2.493,799,3.855,804,3.298,819,6.589,820,6.28,821,4.898,822,4.898,823,4.898,824,4.898]],["title/classes/MappedValuesRepository.html",[37,0.006,825,2.907]],["body/classes/MappedValuesRepository.html",[3,0.149,4,0.108,5,0.128,13,0.013,30,0.202,34,1.992,36,0.149,37,0.01,42,0.011,43,0.011,45,2.064,47,1.853,48,3.71,468,2.14,478,4.059,807,4.745,825,5.167,826,5.255,827,4.745]],["title/interfaces/NewRegistry.html",[519,1.079,660,1.658]],["body/interfaces/NewRegistry.html",[3,0.102,4,0.074,5,0.088,7,0.38,8,1.272,9,1.189,12,0.645,13,0.013,14,1.281,22,0.905,30,0.18,36,0.197,42,0.009,43,0.009,47,1.073,97,1.229,107,1.837,200,1.522,245,1.923,248,1.614,280,1.614,281,1.671,468,1.468,519,2.133,521,1.775,541,1.641,545,2.317,549,1.468,550,1.416,567,1.775,568,1.641,569,1.641,570,1.641,606,1.93,608,1.93,612,2.928,622,1.93,623,2.614,645,2.317,646,1.93,647,2.621,648,1.85,649,1.706,650,1.775,651,1.641,652,1.775,653,2.229,654,1.85,655,1.85,656,1.85,657,1.706,658,1.85,659,2.715,660,2.317,661,1.641]],["title/controllers/ParameterizerController.html",[50,2.152,828,2.907]],["body/controllers/ParameterizerController.html",[1,1.775,3,0.039,4,0.139,5,0.034,7,0.145,10,1.659,12,0.642,13,0.013,14,0.409,15,2.106,17,1.05,22,1.715,24,1.24,30,0.215,36,0.039,37,0.002,39,2.989,42,0.004,43,0.004,50,0.844,52,0.844,54,0.823,57,2.034,58,0.345,61,1.061,62,1.141,63,2.034,97,0.585,107,0.933,127,2.906,133,0.938,149,1.24,161,1.909,162,1.843,163,3.22,164,3.513,187,6.62,188,1.374,189,1.374,191,2.735,193,1.374,194,1.374,195,1.24,196,1.24,197,1.141,198,2.328,199,1.141,208,1.374,244,1.901,278,0.889,289,1.374,355,1.831,379,2.188,457,0.769,458,1.141,459,0.736,488,0.889,505,1.141,533,2.735,550,0.915,568,0.626,569,0.626,570,0.626,614,4.198,633,2.962,645,0.65,651,1.38,661,0.626,701,2.962,734,0.938,735,0.889,828,1.933,829,1.374,830,1.576,831,3.22,832,3.567,833,4.092,834,3.22,835,3.22,836,3.22,837,3.476,838,3.476,839,2.735,840,2.735,841,2.735,842,3.347,843,1.576,844,3.029,845,3.476,846,1.576,847,1.576,848,1.576,849,1.576,850,2.328,851,1.576,852,1.576,853,4.994,854,1.576,855,1.576,856,1.576,857,1.576,858,1.576,859,1.576,860,1.576,861,3.567,862,1.576,863,1.576,864,1.576,865,1.576,866,1.576,867,2.962,868,1.576,869,2.193,870,1.576,871,1.576,872,2.962,873,1.576,874,1.576,875,1.576,876,2.962,877,1.576,878,1.576,879,1.576,880,1.576,881,1.576,882,1.576,883,1.576,884,3.029,885,1.576,886,1.576,887,1.576,888,1.576,889,1.576,890,1.576,891,2.194,892,1.374,893,1.374,894,4.336,895,1.576,896,1.576,897,1.686,898,1.798,899,1.374,900,2.671,901,1.24,902,1.576,903,1.374,904,1.374,905,1.374,906,1.374,907,1.576,908,1.576,909,1.374,910,1.374,911,1.374,912,4.975,913,1.374,914,1.374,915,1.374,916,1.374,917,1.374,918,1.374,919,1.374,920,1.374,921,4.975,922,1.374,923,1.374,924,1.374,925,1.576,926,1.374,927,1.374,928,1.374,929,1.374,930,1.374,931,1.374,932,1.374,933,1.374,934,1.374,935,1.374,936,1.374,937,1.374,938,1.374,939,1.374,940,1.374,941,1.374,942,1.374,943,1.374,944,1.374,945,1.374,946,1.374,947,1.374,948,1.374,949,1.374,950,1.374,951,1.374,952,1.374,953,1.374,954,1.374,955,1.374,956,1.374,957,1.374,958,1.576,959,1.576,960,1.576,961,1.576,962,1.576,963,1.576,964,1.576,965,1.576,966,1.576,967,1.576,968,1.576,969,4.58,970,1.576,971,1.576,972,1.576,973,1.576,974,1.576,975,1.576,976,1.576,977,1.576,978,1.576,979,1.576,980,1.576,981,1.576,982,1.576,983,1.576,984,1.576,985,1.576,986,1.576,987,1.576,988,1.576,989,1.576,990,1.576,991,1.576,992,4.58,993,4.092,994,1.576,995,1.576,996,1.576,997,1.576,998,1.576,999,1.576,1000,1.576,1001,1.576,1002,1.576,1003,1.576,1004,1.576,1005,1.576,1006,1.576,1007,1.576,1008,1.576,1009,1.576,1010,1.576,1011,1.576,1012,1.933,1013,1.576,1014,1.576,1015,1.576,1016,1.576,1017,1.576,1018,1.576,1019,1.576,1020,1.576,1021,1.576,1022,1.576,1023,1.576,1024,1.576,1025,1.576,1026,1.576,1027,1.576,1028,1.576,1029,1.576,1030,1.576,1031,1.24,1032,1.576]],["title/modules/ParameterizerModule.html",[65,1.479,75,2.705]],["body/modules/ParameterizerModule.html",[3,0.127,4,0.092,5,0.109,13,0.013,30,0.217,36,0.127,37,0.008,42,0.01,43,0.01,52,3.465,58,1.123,65,2.381,67,2.394,68,3.019,73,4.66,75,5.502,76,4.413,81,3.302,82,1.96,83,2.502,85,3.465,86,3.849,515,4.036,828,5.126,891,4.941,892,4.47,1033,4.47,1034,4.47,1035,5.129,1036,5.129,1037,5.129,1038,4.47]],["title/injectables/ParameterizerService.html",[141,0.713,891,2.536]],["body/injectables/ParameterizerService.html",[1,1.941,3,0.035,4,0.068,5,0.03,7,0.13,10,1.649,12,0.561,13,0.014,14,0.849,17,1.033,22,1.734,30,0.163,31,1.493,36,0.035,37,0.002,42,0.004,43,0.004,54,0.748,57,1.964,58,0.309,63,2.033,107,1.822,127,2.866,141,0.431,142,0.483,161,1.898,162,1.831,164,3.444,236,1.133,237,1.301,244,2.888,245,2.665,246,3.462,248,1.951,249,3.22,278,2.143,280,1.898,281,1.933,355,1.086,360,1.911,378,3.42,379,2.764,423,2.991,457,0.688,458,1.02,459,0.658,488,0.795,499,2.116,505,1.02,511,2.788,520,0.89,522,1.02,532,3.313,533,2.517,538,2.828,541,1.992,545,1.32,547,2.787,549,0.862,550,1.467,565,5.194,568,0.56,569,0.56,570,0.56,572,1.109,573,1.109,577,1.109,612,0.56,614,3.661,645,0.582,651,0.964,652,1.043,655,0.631,657,1.569,660,1.569,661,0.56,831,2.991,832,3.313,834,2.991,835,2.991,836,2.991,839,2.517,840,1.911,841,2.517,842,2.019,850,2.787,861,2.787,891,1.533,893,1.228,894,2.116,897,2.399,898,2.559,899,1.228,901,1.109,1012,2.315,1039,1.228,1040,3.198,1041,2.787,1042,2.787,1043,1.41,1044,1.41,1045,1.41,1046,1.41,1047,1.41,1048,1.41,1049,1.41,1050,1.41,1051,1.41,1052,1.41,1053,1.41,1054,1.41,1055,1.41,1056,1.41,1057,3.198,1058,1.41,1059,1.41,1060,2.428,1061,1.41,1062,1.41,1063,1.41,1064,1.41,1065,1.41,1066,1.41,1067,1.41,1068,1.228,1069,1.41,1070,1.41,1071,5.317,1072,5.317,1073,5.317,1074,5.317,1075,1.41,1076,1.41,1077,1.41,1078,1.41,1079,1.41,1080,1.41,1081,2.428,1082,1.41,1083,1.41,1084,1.41,1085,1.41,1086,1.41,1087,1.41,1088,1.41,1089,1.41,1090,1.41,1091,1.41,1092,2.428,1093,2.428,1094,2.428,1095,1.41,1096,1.41,1097,2.428,1098,1.228,1099,1.41,1100,1.41,1101,2.116,1102,1.228,1103,1.41,1104,1.41,1105,1.41,1106,1.41,1107,1.41,1108,1.41,1109,1.41,1110,1.41,1111,1.41]],["title/interfaces/ProbleSourceSelectedColumnsNewProblem.html",[519,1.079,661,1.595]],["body/interfaces/ProbleSourceSelectedColumnsNewProblem.html",[3,0.102,4,0.074,5,0.088,7,0.378,8,1.266,9,1.181,12,0.762,13,0.013,14,1.285,22,0.899,30,0.179,36,0.196,42,0.009,43,0.009,47,1.066,97,1.224,107,1.832,200,1.512,245,1.914,248,1.607,280,1.607,281,1.663,468,1.458,519,2.13,521,1.764,541,1.63,545,2.307,549,1.458,550,1.406,567,1.764,568,1.63,569,1.63,570,1.63,606,1.917,608,1.917,612,2.922,622,1.917,623,1.57,645,2.307,646,1.917,647,2.609,648,1.837,649,1.695,650,1.764,651,1.63,652,1.764,653,2.833,654,1.837,655,1.837,656,1.837,657,1.695,658,1.837,659,2.219,660,1.695,661,2.219]],["title/entities/Problem.html",[0,1.426,22,0.879]],["body/entities/Problem.html",[0,1.802,1,3.849,2,1.744,3,0.089,4,0.064,5,0.076,7,0.329,8,1.15,9,1.697,10,1.756,12,0.773,13,0.013,14,1.135,15,2.438,16,2.72,17,1.216,19,3.974,20,3.614,22,1.111,23,3.418,28,3.974,30,0.199,31,3.384,32,3.974,33,1.916,34,1.182,36,0.089,37,0.006,40,2.592,42,0.008,43,0.008,97,1.65,107,2.024,200,1.317,457,3.134,459,1.669,472,3.514,477,3.825,488,2.016,492,2.588,506,2.588,549,2.095,550,2.021,614,3.328,649,1.476,804,2.408,869,3.777,1112,3.117,1113,5.144,1114,4.645,1115,5.077,1116,3.576,1117,5.077,1118,3.576,1119,5.077,1120,3.576,1121,3.576,1122,3.576,1123,3.576,1124,4.425,1125,3.576,1126,3.576,1127,3.576,1128,5.077,1129,3.576,1130,3.576,1131,3.576]],["title/modules/ProblemModule.html",[65,1.479,76,2.265]],["body/modules/ProblemModule.html",[1,3.175,3,0.119,4,0.086,5,0.103,13,0.013,22,1.361,30,0.227,36,0.119,37,0.008,42,0.01,43,0.01,49,3.795,58,1.056,65,2.289,67,2.251,68,2.902,76,4.418,81,3.175,82,1.843,83,2.352,85,3.331,86,2.87,90,3.247,91,2.462,457,3.033,459,2.251,465,3.701,468,2.207,478,4.186,487,3.795,488,2.719,513,4.186,538,4.619,808,3.795,827,3.795,869,3.331,1132,4.203,1133,4.203,1134,4.203,1135,4.822,1136,3.795,1137,4.203,1138,4.822,1139,4.822]],["title/injectables/ProblemService.html",[141,0.713,538,2.265]],["body/injectables/ProblemService.html",[1,2.131,3,0.033,4,0.042,5,0.029,7,0.124,9,0.89,10,2.177,12,0.695,13,0.014,14,1.028,17,1.037,20,1.141,22,1.76,24,1.062,30,0.187,31,2.291,34,0.446,36,0.033,37,0.002,39,0.761,40,0.689,42,0.004,43,0.004,44,3.551,49,1.062,54,0.721,57,1.974,58,0.296,63,2.092,91,0.689,97,1.137,107,0.991,127,2.872,141,0.415,142,0.462,161,2.194,162,2.117,164,3.453,200,0.497,236,1.092,237,2.45,244,2.891,245,2.107,246,3.298,249,0.658,355,1.047,361,0.977,377,5.985,379,1.523,457,1.141,459,1.092,461,2.039,462,4.726,463,1.841,465,2.197,468,1.623,478,1.575,483,1.693,484,2.671,487,1.062,488,0.761,538,1.319,541,1.948,545,1.277,549,0.479,550,0.462,571,1.062,599,0.852,612,2.496,614,3.386,623,0.894,649,0.557,651,1.465,653,1.229,657,1.523,658,2.046,660,2.143,661,0.536,783,4.925,804,2.485,805,2.24,808,1.062,825,2.671,827,1.062,831,2.905,834,2.435,835,2.435,836,2.435,839,2.435,840,2.435,841,2.435,842,1.954,869,1.658,897,2.33,1012,2.24,1041,2.697,1042,2.697,1098,2.697,1113,1.177,1114,1.062,1124,1.177,1136,1.062,1137,1.177,1140,1.177,1141,3.095,1142,3.095,1143,3.095,1144,3.095,1145,2.339,1146,1.35,1147,4.346,1148,3.095,1149,3.095,1150,1.35,1151,1.35,1152,1.35,1153,1.35,1154,1.35,1155,3.217,1156,1.35,1157,1.35,1158,1.35,1159,1.35,1160,1.35,1161,2.339,1162,1.35,1163,1.35,1164,1.35,1165,1.35,1166,1.35,1167,1.35,1168,1.35,1169,1.35,1170,1.35,1171,1.35,1172,1.35,1173,1.35,1174,1.35,1175,1.35,1176,3.691,1177,1.35,1178,1.35,1179,3.691,1180,1.35,1181,1.35,1182,1.35,1183,0.761,1184,1.35,1185,1.35,1186,1.35,1187,1.35,1188,1.35,1189,1.35,1190,1.35,1191,1.35,1192,1.35,1193,1.35,1194,1.35,1195,1.35,1196,1.35,1197,3.095,1198,3.691,1199,1.35,1200,1.35,1201,2.339,1202,3.691,1203,2.339,1204,1.35,1205,1.35,1206,1.35,1207,3.095,1208,1.35,1209,1.35,1210,3.095,1211,3.095,1212,2.339,1213,1.35,1214,1.35,1215,4.572,1216,1.177,1217,1.35,1218,1.35,1219,1.35,1220,1.35,1221,1.35,1222,1.35,1223,1.35,1224,1.35,1225,1.35,1226,1.35,1227,1.35,1228,1.35,1229,1.35,1230,1.35,1231,1.177,1232,1.35,1233,1.177,1234,1.35,1235,1.35,1236,1.35,1237,2.339,1238,1.35,1239,1.177,1240,1.35,1241,1.35,1242,1.35]],["title/interfaces/ProblemSource.html",[519,1.079,541,1.595]],["body/interfaces/ProblemSource.html",[3,0.103,4,0.075,5,0.089,7,0.384,8,1.28,9,1.199,12,0.648,13,0.013,14,1.282,22,0.913,30,0.181,36,0.197,42,0.009,43,0.009,47,1.083,97,1.237,107,1.844,200,1.536,245,1.934,248,1.624,280,1.624,281,1.681,468,1.481,519,2.136,521,1.791,541,2.243,545,2.331,549,2.437,550,2.351,567,1.791,568,1.656,569,1.656,570,1.656,606,1.947,608,1.947,612,2.543,622,1.947,623,1.594,645,2.331,646,1.947,647,2.637,648,1.866,649,1.722,650,1.791,651,1.656,652,1.791,653,2.243,654,1.866,655,1.866,656,1.866,657,1.722,658,1.866,659,2.243,660,1.722,661,1.656]],["title/interfaces/ProblemSourceColumn.html",[519,1.079,568,1.595]],["body/interfaces/ProblemSourceColumn.html",[3,0.105,4,0.076,5,0.09,7,0.39,8,1.293,9,1.219,12,0.578,13,0.013,14,1.279,22,0.928,30,0.182,36,0.197,42,0.009,43,0.009,47,1.1,97,1.25,107,1.856,200,1.561,245,1.955,248,1.642,280,1.642,281,1.699,468,1.504,519,2.142,521,1.82,541,1.682,545,2.357,549,1.504,550,1.451,567,1.82,568,2.267,569,1.682,570,1.682,606,1.978,608,1.978,612,2.95,622,1.978,623,1.62,645,2.357,646,1.978,647,2.665,648,1.896,649,1.749,650,1.82,651,1.682,652,1.82,653,2.267,654,1.896,655,1.896,656,1.896,657,1.749,658,1.896,659,2.267,660,1.749,661,1.682]],["title/interfaces/ProblemSourceMappedColumns.html",[519,1.079,657,1.658]],["body/interfaces/ProblemSourceMappedColumns.html",[3,0.106,4,0.076,5,0.091,9,1.227,12,0.58,13,0.013,14,1.277,17,0.679,22,0.934,30,0.183,36,0.198,42,0.009,43,0.009,47,1.108,97,1.256,107,1.861,200,1.571,245,1.964,248,1.649,280,1.649,281,1.707,355,1.909,468,1.515,519,2.145,521,1.833,541,1.694,545,2.367,549,1.515,550,1.461,567,1.833,568,1.694,569,1.694,570,1.694,606,1.992,608,1.992,612,2.573,622,2.678,623,1.631,645,2.367,646,1.992,647,2.678,648,1.909,649,1.761,650,1.833,651,1.694,652,1.833,653,2.277,654,1.909,655,1.909,656,1.909,657,2.367,658,1.909,659,2.277,660,1.761,661,1.694,1243,4.267,1244,4.267]],["title/interfaces/ProblemSourceSchema.html",[519,1.079,569,1.595]],["body/interfaces/ProblemSourceSchema.html",[3,0.105,4,0.076,5,0.09,7,0.39,8,1.293,9,1.219,12,0.578,13,0.013,14,1.279,22,0.928,30,0.182,36,0.197,42,0.009,43,0.009,47,1.1,97,1.25,107,1.856,200,1.561,245,1.955,248,1.642,280,1.642,281,1.699,468,1.504,519,2.142,521,1.82,541,1.682,545,2.357,549,1.504,550,1.451,567,1.82,568,1.682,569,2.267,570,1.682,606,3.226,608,1.978,612,2.564,622,1.978,623,1.62,645,2.357,646,1.978,647,2.665,648,1.896,649,1.749,650,1.82,651,1.682,652,1.82,653,2.267,654,1.896,655,1.896,656,1.896,657,1.749,658,1.896,659,2.267,660,1.749,661,1.682]],["title/interfaces/ProblemSourceTable.html",[519,1.079,570,1.595]],["body/interfaces/ProblemSourceTable.html",[3,0.105,4,0.076,5,0.09,7,0.39,8,1.293,9,1.219,12,0.578,13,0.013,14,1.279,22,0.928,30,0.182,36,0.197,42,0.009,43,0.009,47,1.1,97,1.25,107,1.856,200,1.561,245,1.955,248,1.642,280,1.642,281,1.699,468,1.504,519,2.142,521,1.82,541,1.682,545,2.357,549,1.504,550,1.451,567,1.82,568,1.682,569,1.682,570,2.267,606,1.978,608,3.226,612,2.564,622,1.978,623,1.62,645,2.357,646,1.978,647,2.665,648,1.896,649,1.749,650,1.82,651,1.682,652,1.82,653,2.267,654,1.896,655,1.896,656,1.896,657,1.749,658,1.896,659,2.267,660,1.749,661,1.682]],["title/classes/ProblemsRepository.html",[37,0.006,1147,2.907]],["body/classes/ProblemsRepository.html",[3,0.15,4,0.109,5,0.129,13,0.013,22,1.328,30,0.202,34,2.005,36,0.15,37,0.01,42,0.011,43,0.011,45,2.078,47,1.86,48,3.72,1136,4.776,1147,5.186,1245,5.289]],["title/entities/RefreshToken.html",[0,1.426,95,2.051]],["body/entities/RefreshToken.html",[0,2.264,2,2.448,3,0.124,4,0.09,5,0.107,7,0.461,8,1.445,9,2.016,12,0.746,13,0.013,14,1.13,15,2.353,16,3.417,17,1.173,30,0.18,31,3.555,33,2.689,34,1.658,36,0.124,37,0.008,42,0.01,43,0.01,95,3.889,97,1.769,200,1.848,405,6.11,472,2.987,477,3.796,1246,4.373,1247,6.378,1248,5.018,1249,5.018,1250,5.018,1251,6.378,1252,5.018]],["title/classes/RefreshTokensRepository.html",[37,0.006,330,2.536]],["body/classes/RefreshTokensRepository.html",[3,0.15,4,0.109,5,0.129,13,0.013,30,0.202,34,2.005,36,0.15,37,0.01,42,0.011,43,0.011,45,2.078,47,1.86,48,3.72,95,3.099,329,4.776,330,4.524,1253,5.289]],["title/entities/Registry.html",[0,1.426,869,2.152]],["body/entities/Registry.html",[0,2.233,2,2.396,3,0.122,4,0.088,5,0.105,7,0.452,8,1.425,9,1.996,10,2.065,12,0.741,13,0.013,14,1.186,15,2.335,16,3.371,17,1.164,19,3.307,20,3.57,22,1.762,28,3.307,30,0.178,31,3.24,33,2.632,34,1.623,35,3.865,36,0.122,37,0.008,42,0.01,43,0.01,472,2.924,477,3.745,492,3.555,506,3.555,623,2.653,869,3.371,1254,4.281,1255,4.911,1256,4.911,1257,6.291,1258,4.911,1259,4.911]],["title/interfaces/RemoteBaseCasesConnection.html",[519,1.079,1260,2.907]],["body/interfaces/RemoteBaseCasesConnection.html",[3,0.14,4,0.101,5,0.121,7,0.521,8,1.557,12,0.749,13,0.013,14,1.229,30,0.16,36,0.14,42,0.011,43,0.011,107,2.199,519,1.52,521,2.431,549,2.733,550,2.636,649,2.336,1260,4.975,1261,4.934]],["title/classes/SaveNewRegistrySelectedColumnsDto.html",[37,0.006,867,2.907]],["body/classes/SaveNewRegistrySelectedColumnsDto.html",[3,0.134,4,0.097,5,0.115,7,0.496,8,1.512,12,0.675,13,0.013,14,1.16,15,2.13,17,1.062,30,0.152,36,0.134,37,0.011,42,0.011,43,0.011,45,1.848,379,2.992,612,2.878,623,2.77,636,4.388,644,2.52,659,2.65,853,5.246,867,4.832,869,3.884,1183,4.087,1262,4.247,1263,4.704,1264,5.398]],["title/classes/SaveProblemAlgorithmDto.html",[37,0.006,872,2.907]],["body/classes/SaveProblemAlgorithmDto.html",[3,0.144,4,0.104,5,0.124,7,0.535,8,1.584,12,0.589,13,0.013,14,1.071,15,1.857,17,0.926,22,1.53,30,0.164,36,0.144,37,0.011,42,0.011,43,0.011,45,1.993,636,4.224,644,2.717,872,5.059,1031,5.896,1183,3.941,1265,5.073,1266,5.821]],["title/classes/SaveProblemSourceColumnsDto.html",[37,0.006,897,2.536]],["body/classes/SaveProblemSourceColumnsDto.html",[3,0.125,4,0.137,5,0.108,7,0.465,8,1.452,12,0.712,13,0.013,14,1.195,15,2.245,17,1.119,22,1.62,30,0.143,36,0.125,37,0.01,42,0.01,43,0.01,45,1.732,480,5.587,481,5.587,482,5.045,483,4.64,636,3.968,644,2.362,652,3.023,653,2.794,654,3.149,897,4.047,1183,4.172,1267,4.409,1268,5.059,1269,6.411,1270,5.059,1271,6.133,1272,5.059,1273,5.059,1274,5.587,1275,5.059]],["title/interfaces/SaveProblemSourceColumnsType.html",[519,1.079,651,1.595]],["body/interfaces/SaveProblemSourceColumnsType.html",[3,0.1,4,0.072,5,0.086,7,0.37,8,1.249,9,1.158,12,0.717,13,0.013,14,1.283,22,0.881,30,0.178,36,0.196,42,0.009,43,0.009,47,1.045,97,1.207,107,1.817,162,1.822,200,1.483,245,1.888,248,1.586,280,1.586,281,1.641,468,1.429,519,2.123,521,1.729,541,1.598,545,2.276,549,1.429,550,1.379,567,1.729,568,1.598,569,1.598,570,1.598,606,1.88,608,1.88,612,2.497,622,1.88,623,1.539,645,2.276,646,1.88,647,2.574,648,1.802,649,1.662,650,1.729,651,2.189,652,2.905,653,2.813,654,3.027,655,3.027,656,2.814,657,1.662,658,1.802,659,2.189,660,1.662,661,1.598]],["title/classes/SaveProblemSourceColumnsTypeDto.html",[37,0.006,898,2.705]],["body/classes/SaveProblemSourceColumnsTypeDto.html",[3,0.12,4,0.135,5,0.103,7,0.446,8,1.413,12,0.698,13,0.013,14,1.182,15,2.2,17,1.097,22,1.594,30,0.137,36,0.12,37,0.01,39,3.517,40,3.186,41,4.515,42,0.01,43,0.01,45,1.66,355,2.791,614,4.622,636,3.889,644,2.263,652,2.963,653,2.738,654,3.087,655,2.791,898,4.2,1183,4.106,1271,6.012,1274,5.437,1276,4.225,1277,4.847,1278,6.238,1279,6.238,1280,4.847,1281,4.847,1282,4.847,1283,4.847]],["title/classes/SaveProblemSourceDto.html",[37,0.006,876,2.907]],["body/classes/SaveProblemSourceDto.html",[3,0.138,4,0.1,5,0.118,7,0.511,8,1.54,12,0.688,13,0.013,14,1.172,15,2.169,17,1.081,22,1.608,30,0.157,36,0.138,37,0.011,42,0.011,43,0.011,45,1.904,549,2.607,550,2.515,636,4.425,644,2.595,876,4.92,1183,4.141,1284,4.845,1285,5.559,1286,5.559]],["title/classes/SaveProblemSourceSelectedOrdinalColumns.html",[37,0.006,842,2.536]],["body/classes/SaveProblemSourceSelectedOrdinalColumns.html",[3,0.141,4,0.133,5,0.122,7,0.525,8,1.566,12,0.578,13,0.013,15,1.823,17,0.909,22,1.513,30,0.161,36,0.141,37,0.011,39,3.897,42,0.011,43,0.011,45,1.956,644,2.667,656,3.093,842,4.364,853,5.003,1012,5.379,1183,3.897,1262,4.496,1263,4.98,1287,7.432]],["title/modules/SendgridModule.html",[65,1.479,77,2.536]],["body/modules/SendgridModule.html",[3,0.137,4,0.099,5,0.118,13,0.013,30,0.192,36,0.137,37,0.009,42,0.011,43,0.011,58,1.213,65,2.499,67,2.587,68,3.168,77,5.101,80,4.968,81,3.465,82,2.118,83,2.704,85,3.636,513,4.569,1288,4.831,1289,5.543,1290,4.831,1291,5.543,1292,5.543]],["title/injectables/SendgridService.html",[80,2.391,141,0.713]],["body/injectables/SendgridService.html",[3,0.118,4,0.085,5,0.101,7,0.438,10,1.835,12,0.624,13,0.013,17,0.981,30,0.193,36,0.118,37,0.008,42,0.01,43,0.01,54,1.899,57,1.466,58,1.042,61,3.205,62,3.445,63,1.899,80,3.67,88,4.57,89,2.684,127,2.518,141,1.094,142,1.63,161,2.111,162,2.037,164,2.878,166,4.149,211,3.746,212,3.445,236,2.222,244,1.819,246,2.222,248,1.773,249,2.322,280,1.966,281,1.417,297,4.852,434,5.374,435,5.96,695,4.149,697,4.149,755,3.445,1293,4.149,1294,6.839,1295,4.76,1296,4.76,1297,4.76,1298,4.76,1299,4.76,1300,4.76,1301,4.76,1302,4.76,1303,4.76]],["title/controllers/SolverController.html",[50,2.152,1304,2.907]],["body/controllers/SolverController.html",[3,0.131,4,0.095,5,0.113,7,0.486,13,0.013,15,1.687,17,0.841,30,0.212,36,0.131,37,0.008,42,0.01,43,0.01,50,2.834,52,2.834,54,2.031,57,1.63,58,1.158,61,3.561,62,3.828,63,1.63,127,2.645,149,4.163,164,3.078,195,4.163,196,4.163,197,3.828,1304,4.772,1305,4.61,1306,5.29,1307,6.553,1308,5.29,1309,5.29,1310,4.534,1311,4.61,1312,4.61,1313,4.61,1314,4.61,1315,5.29,1316,5.29,1317,5.29,1318,5.29,1319,5.29,1320,5.29,1321,5.29]],["title/modules/SolverModule.html",[65,1.479,78,2.705]],["body/modules/SolverModule.html",[3,0.127,4,0.092,5,0.109,13,0.013,30,0.217,36,0.127,37,0.008,42,0.01,43,0.01,52,3.465,58,1.123,65,2.381,67,2.394,68,3.019,73,4.66,76,4.413,78,5.502,81,3.302,82,1.96,83,2.502,85,3.465,86,3.849,515,4.036,1038,4.47,1304,5.126,1310,4.941,1311,4.47,1322,4.47,1323,5.129,1324,4.47,1325,5.129,1326,5.129]],["title/injectables/SolverService.html",[141,0.713,1310,2.536]],["body/injectables/SolverService.html",[1,3.116,3,0.041,4,0.029,5,0.035,7,0.151,10,1.607,12,0.635,13,0.014,14,1.101,17,0.859,22,0.919,30,0.132,31,1.669,36,0.041,37,0.003,39,0.924,40,0.837,41,1.186,42,0.004,43,0.004,54,0.85,57,1.564,58,0.359,63,2.12,107,1.127,127,2.596,137,1.034,141,0.49,142,0.561,161,1.738,162,1.678,164,2.648,174,1.742,236,1.289,237,1.479,244,2.921,245,1.738,246,3.213,248,0.471,249,0.799,280,0.471,281,0.488,355,1.878,378,0.837,379,0.676,459,0.765,462,1.29,463,2.172,468,1.663,482,1.29,483,1.186,511,3.215,538,2.862,549,1.27,550,1.225,565,2.172,572,1.29,594,3.658,612,2.959,614,2.641,627,5.145,629,4.944,656,2.807,659,2.732,676,1.998,804,1.858,869,0.878,901,1.29,1031,4.464,1068,1.428,1071,1.428,1072,1.428,1073,1.428,1074,1.428,1101,5.145,1102,1.428,1114,2.172,1155,5.821,1216,1.428,1231,1.428,1233,1.428,1239,3.117,1260,5.726,1307,3.658,1310,1.742,1327,1.428,1328,3.576,1329,3.576,1330,2.76,1331,3.576,1332,3.576,1333,1.639,1334,1.639,1335,1.639,1336,1.639,1337,1.639,1338,5.077,1339,4.197,1340,4.197,1341,1.639,1342,1.639,1343,1.639,1344,1.639,1345,1.639,1346,4.684,1347,1.428,1348,1.639,1349,3.576,1350,1.639,1351,5.672,1352,1.639,1353,1.639,1354,5.903,1355,1.639,1356,1.639,1357,4.684,1358,1.639,1359,1.639,1360,1.639,1361,1.639,1362,1.639,1363,2.76,1364,1.639,1365,1.639,1366,1.639,1367,1.639,1368,2.76,1369,1.639,1370,2.76,1371,1.639,1372,1.639,1373,1.639,1374,1.639,1375,2.76,1376,1.639,1377,2.76,1378,4.197,1379,2.76,1380,5.077,1381,4.684,1382,2.76,1383,4.684,1384,1.639,1385,1.639,1386,1.639,1387,3.576,1388,3.576,1389,1.639,1390,1.639,1391,1.639,1392,1.639,1393,2.76,1394,2.76,1395,2.76,1396,3.576,1397,1.639,1398,1.639,1399,2.76,1400,1.639,1401,1.639,1402,2.76,1403,1.639,1404,2.76,1405,3.576,1406,2.76,1407,1.639,1408,1.639,1409,1.639,1410,1.639,1411,1.639,1412,1.639,1413,5.672,1414,2.76,1415,1.639,1416,1.639,1417,1.639,1418,1.639,1419,1.639,1420,1.639,1421,2.76]],["title/entities/User.html",[0,1.426,97,0.879]],["body/entities/User.html",[0,1.987,2,2.008,3,0.102,4,0.074,5,0.088,7,0.378,8,1.268,9,1.829,11,5.006,12,0.763,13,0.013,14,1.175,15,2.404,16,2.999,17,1.199,20,3.33,22,1.613,23,4.283,30,0.193,31,3.439,32,4.597,33,2.205,34,1.36,36,0.102,37,0.006,42,0.009,43,0.009,95,3.762,97,1.225,107,1.978,135,2.525,169,4.016,176,5.544,492,2.979,505,2.979,506,2.979,649,1.699,784,5.544,1422,3.587,1423,6.362,1424,5.598,1425,6.827,1426,4.116,1427,4.116,1428,4.116,1429,4.116,1430,5.598,1431,4.116,1432,5.598,1433,4.116,1434,4.116,1435,4.116]],["title/modules/UserModule.html",[65,1.479,79,2.391]],["body/modules/UserModule.html",[3,0.132,4,0.096,5,0.114,13,0.013,30,0.213,36,0.132,37,0.008,42,0.01,43,0.01,58,1.168,65,2.441,67,2.491,68,3.094,79,4.772,81,3.385,82,2.039,83,2.602,85,3.552,86,3.176,90,4.463,91,2.725,97,1.168,338,4.683,513,4.463,1436,4.65,1437,4.65,1438,4.65,1439,5.335,1440,4.199,1441,5.335,1442,5.335]],["title/classes/UsersRepository.html",[37,0.006,1443,2.907]],["body/classes/UsersRepository.html",[3,0.15,4,0.109,5,0.129,13,0.013,30,0.202,34,2.005,36,0.15,37,0.01,42,0.011,43,0.011,45,2.078,47,1.86,48,3.72,97,1.328,1440,4.776,1443,5.186,1444,5.289]],["title/injectables/UsersService.html",[141,0.713,338,2.265]],["body/injectables/UsersService.html",[3,0.097,4,0.07,5,0.083,7,0.359,10,2.156,12,0.766,13,0.013,14,1.073,17,1.153,30,0.189,34,1.288,36,0.097,37,0.006,42,0.009,43,0.009,48,3.255,54,1.662,57,2.158,58,0.854,63,2.158,91,1.991,97,1.626,127,2.83,135,1.548,141,0.957,142,1.335,161,2.481,162,2.394,164,3.383,169,2.461,203,4.245,236,2.518,237,2.089,246,1.82,338,3.041,355,2.414,361,2.822,454,2.625,653,1.548,1440,3.068,1443,3.904,1445,3.398,1446,5.394,1447,5.394,1448,6.185,1449,5.394,1450,3.899,1451,3.899,1452,5.394,1453,3.899,1454,5.394,1455,3.899,1456,3.899,1457,5.394,1458,6.674,1459,3.899,1460,3.899,1461,7.429,1462,3.899,1463,4.701,1464,5.394,1465,3.899,1466,3.899,1467,3.899,1468,3.899,1469,3.899,1470,3.899,1471,3.899]],["title/injectables/ValidationPipe.html",[141,0.713,1472,3.161]],["body/injectables/ValidationPipe.html",[3,0.103,4,0.074,5,0.088,7,0.381,10,1.673,12,0.419,13,0.013,14,0.978,17,0.894,27,3.26,30,0.18,36,0.103,37,0.01,40,3.26,42,0.009,43,0.009,45,1.419,54,1.732,57,1.966,58,0.907,63,1.966,127,2.351,141,0.998,142,1.419,161,1.925,162,1.858,174,2.615,237,3.42,244,2.736,245,1.419,246,1.934,248,1.191,249,2.021,280,1.191,281,1.233,360,4.425,378,2.116,379,1.71,623,2.617,644,1.934,659,1.645,676,2.999,681,2.466,707,3.611,720,3.611,884,3.611,1463,3.611,1472,4.425,1473,3.611,1474,5.623,1475,5.623,1476,5.623,1477,4.143,1478,6.383,1479,5.623,1480,6.846,1481,4.143,1482,5.623,1483,4.143,1484,3.611,1485,4.143,1486,5.623,1487,4.143,1488,4.143,1489,4.143,1490,4.143,1491,5.623,1492,4.143,1493,4.143,1494,4.143,1495,4.143,1496,4.143,1497,4.143,1498,4.143,1499,4.143,1500,4.143,1501,4.143,1502,4.143,1503,4.143,1504,4.143,1505,4.143,1506,4.143,1507,4.143,1508,4.143,1509,4.143]],["title/coverage.html",[1510,4.333]],["body/coverage.html",[0,1.958,1,0.712,4,0.136,5,0.03,6,1.216,12,0.141,13,0.013,22,1.687,37,0.011,39,2.973,42,0.004,43,0.004,44,1.009,46,1.216,50,2.022,51,1.009,53,1.216,59,0.88,80,0.83,82,0.533,95,0.712,97,0.305,107,0.646,141,1.215,143,1.216,147,1.009,148,1.216,183,1.009,201,0.83,205,0.83,206,0.83,209,1.009,213,1.216,214,1.216,215,1.216,217,1.216,218,1.216,219,1.216,220,1.216,222,1.216,223,1.216,224,1.216,225,1.216,226,1.216,227,1.216,228,1.216,230,1.216,231,1.216,232,1.216,233,1.216,312,0.939,313,0.939,314,0.939,315,0.939,324,0.83,330,0.88,333,1.216,338,0.786,379,2.277,457,0.68,458,1.009,459,1.123,460,1.216,465,0.83,468,0.495,484,1.009,485,1.216,486,1.216,489,1.216,511,0.83,519,1.671,520,0.88,522,1.009,523,1.216,524,1.216,535,0.88,536,1.009,538,0.786,541,0.554,549,0.495,567,0.599,568,0.554,569,0.554,570,0.554,614,2.973,632,1.216,633,1.009,634,1.216,635,1.216,645,0.576,646,2.761,650,0.599,651,0.554,657,0.576,660,0.576,661,0.554,662,1.216,663,1.216,665,1.098,676,6.095,682,1.009,690,1.216,701,1.009,702,1.216,703,3.711,705,1.216,706,4.596,734,0.83,735,2.813,736,2.939,744,0.939,747,0.88,754,1.216,772,1.216,793,1.216,798,1.216,799,1.893,805,1.009,806,1.216,807,1.893,809,1.216,811,1.216,819,1.216,825,1.009,826,1.216,828,1.009,829,1.216,842,0.88,844,2.765,853,4.956,867,1.009,869,2.495,872,1.009,876,1.009,891,0.88,897,0.88,898,0.939,903,1.216,904,1.216,905,1.216,906,1.216,909,1.216,910,1.216,911,1.216,913,1.216,914,1.216,915,1.216,916,1.216,917,1.216,918,1.216,919,1.216,920,1.216,922,1.216,923,1.216,924,1.216,926,1.216,927,1.216,928,1.216,929,1.216,930,1.216,931,1.216,932,1.216,933,1.216,934,1.216,935,1.216,936,1.216,937,1.216,938,1.216,939,1.216,940,1.216,941,1.216,942,1.216,943,1.216,944,1.216,945,1.216,946,1.216,947,1.216,948,1.216,949,1.216,950,1.216,951,1.216,952,1.216,953,1.216,954,1.216,955,1.216,956,1.216,957,1.216,1039,1.216,1112,1.216,1140,1.216,1147,1.009,1183,2.625,1245,1.216,1246,1.216,1253,1.216,1254,1.216,1260,1.009,1261,1.216,1262,1.893,1265,1.216,1267,6.151,1276,1.216,1284,1.216,1293,1.216,1304,1.009,1305,1.216,1310,0.88,1312,1.216,1313,1.216,1314,1.216,1327,1.216,1347,1.216,1422,1.216,1443,1.009,1444,1.216,1445,1.216,1472,1.098,1473,1.216,1510,1.098,1511,1.395,1512,1.395,1513,1.395,1514,6.58,1515,3.172,1516,1.395,1517,6.224,1518,8.151,1519,8.274,1520,3.172,1521,3.172,1522,3.172,1523,3.774,1524,5.273,1525,3.774,1526,3.774,1527,2.406,1528,1.395,1529,1.216,1530,1.216,1531,3.774,1532,1.395,1533,1.395,1534,1.395,1535,3.774,1536,3.774,1537,6.848,1538,3.172,1539,3.172,1540,3.172,1541,3.172,1542,7.173,1543,3.774,1544,3.774,1545,3.774,1546,1.395,1547,3.172,1548,1.395]],["title/dependencies.html",[68,2.258,1549,2.914]],["body/dependencies.html",[13,0.013,34,1.723,37,0.01,42,0.01,43,0.01,58,1.142,68,2.435,89,2.94,91,2.663,92,4.545,197,3.774,199,3.774,207,3.292,210,4.104,212,3.774,318,4.104,320,2.544,362,4.104,644,2.435,648,2.334,761,4.805,1484,4.545,1550,7.137,1551,5.215,1552,5.215,1553,7.137,1554,5.215,1555,5.215,1556,5.215,1557,5.215,1558,5.215,1559,5.215,1560,5.215,1561,5.215,1562,5.215,1563,5.215,1564,5.215,1565,5.215,1566,5.215,1567,5.215,1568,5.215,1569,5.215,1570,5.215,1571,5.215,1572,5.215,1573,5.215,1574,5.215,1575,5.215]],["title/miscellaneous/functions.html",[1576,2.914,1577,4.216]],["body/miscellaneous/functions.html",[7,0.589,13,0.012,42,0.012,43,0.012,1529,5.582,1530,6.795,1576,5.582,1577,5.582,1578,6.404]],["title/index.html",[7,0.307,1579,3.343,1580,3.343]],["body/index.html",[4,0.089,13,0.013,42,0.01,43,0.01,48,2.421,262,4.326,373,4.326,449,4.326,1510,3.906,1581,4.964,1582,4.964,1583,6.334,1584,4.964,1585,4.964,1586,4.964,1587,4.964,1588,4.964,1589,4.964,1590,4.326,1591,6.976,1592,4.964,1593,4.964,1594,7.889,1595,4.964,1596,4.964,1597,4.964,1598,7.762,1599,4.964,1600,4.964,1601,6.334,1602,4.964,1603,4.964,1604,4.964,1605,6.334,1606,6.334,1607,4.964,1608,4.964,1609,4.964,1610,6.334,1611,6.334,1612,4.964,1613,4.964,1614,4.964,1615,4.964,1616,4.964,1617,4.326,1618,4.964,1619,4.964,1620,4.964,1621,4.964,1622,4.964,1623,4.964,1624,4.964,1625,4.964,1626,4.964,1627,4.326,1628,4.964,1629,4.964,1630,4.964,1631,4.964,1632,4.964,1633,4.964,1634,4.326]],["title/modules.html",[67,2.57]],["body/modules.html",[13,0.011,42,0.011,43,0.011,66,4.097,67,2.643,72,3.811,73,3.37,74,3.574,75,3.811,76,3.192,77,3.574,78,3.811,79,3.37,1617,7.189,1635,8.249,1636,8.249,1637,8.249]],["title/overview.html",[1638,4.799]],["body/overview.html",[2,1.734,13,0.013,42,0.008,43,0.008,45,1.217,52,1.905,59,3.714,66,5.937,67,1.66,68,2.36,69,3.099,70,3.099,71,3.099,72,5.424,73,4.716,74,4.569,75,5.068,76,4.244,77,4.569,78,5.068,79,4.404,80,4.404,81,2.582,82,1.359,83,1.734,142,1.217,201,3.502,309,3.099,311,3.099,312,3.961,313,3.961,314,3.961,315,3.961,338,4.081,507,3.099,508,3.099,509,3.099,511,4.309,521,1.527,535,4.569,538,4.081,677,4.406,685,3.099,686,3.099,687,3.099,891,3.714,1033,3.099,1034,3.099,1132,3.099,1133,3.099,1134,3.099,1288,3.099,1290,3.099,1310,3.714,1322,3.099,1324,3.099,1436,3.099,1437,3.099,1438,3.099,1638,3.099,1639,3.555,1640,3.555,1641,3.555,1642,3.555]],["title/properties.html",[8,1.096,1549,2.914]],["body/properties.html",[8,1.436,13,0.013,42,0.012,43,0.012,1590,5.524,1627,5.524,1634,5.524,1643,6.339,1644,6.339,1645,6.339]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":676,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1644,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1533,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":594,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/SolverService.html":{}}}],["1.0.0",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["13",{"_index":1642,"title":{},"body":{"overview.html":{}}}],["17.6.0",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1641,"title":{},"body":{"overview.html":{}}}],["19",{"_index":1640,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1385,"title":{},"body":{"injectables/SolverService.html":{}}}],["2.2.0",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["3.0.2",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["4",{"_index":1639,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["7.2.0",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["7.7.0",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["7a7e65ab6bf44627bea5758e97fbb969",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["8.0.0",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1567,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":677,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["9.0.0",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":580,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["acc",{"_index":1101,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["acc.globalsimilitude",{"_index":1411,"title":{},"body":{"injectables/SolverService.html":{}}}],["acc.max",{"_index":1393,"title":{},"body":{"injectables/SolverService.html":{}}}],["accesstoken",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenpayload",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["accpromise",{"_index":1402,"title":{},"body":{"injectables/SolverService.html":{}}}],["algorithm",{"_index":1,"title":{"entities/Algorithm.html":{}},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"injectables/SolverService.html":{},"coverage.html":{}}}],["algorithm.dto",{"_index":902,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["algorithm.dto.ts",{"_index":1265,"title":{},"body":{"classes/SaveProblemAlgorithmDto.html":{},"coverage.html":{}}}],["algorithm.dto.ts:5",{"_index":1266,"title":{},"body":{"classes/SaveProblemAlgorithmDto.html":{}}}],["algorithm.entity",{"_index":1130,"title":{},"body":{"entities/Problem.html":{}}}],["algorithm.name",{"_index":1378,"title":{},"body":{"injectables/SolverService.html":{}}}],["algorithm.problems",{"_index":1115,"title":{},"body":{"entities/Problem.html":{}}}],["algorithmname",{"_index":1031,"title":{},"body":{"controllers/ParameterizerController.html":{},"classes/SaveProblemAlgorithmDto.html":{},"injectables/SolverService.html":{}}}],["algorithms",{"_index":845,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["algorithms.ts",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["algorithmsrepository",{"_index":44,"title":{"classes/AlgorithmsRepository.html":{}},"body":{"classes/AlgorithmsRepository.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["algorithmtosave",{"_index":1237,"title":{},"body":{"injectables/ProblemService.html":{}}}],["alias",{"_index":1456,"title":{},"body":{"injectables/UsersService.html":{}}}],["allbasecases",{"_index":1349,"title":{},"body":{"injectables/SolverService.html":{}}}],["allbasecases.map((basecase",{"_index":1369,"title":{},"body":{"injectables/SolverService.html":{}}}],["allbasecases.map(async",{"_index":1412,"title":{},"body":{"injectables/SolverService.html":{}}}],["already",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1618,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["apibody(createconnectioncorrectpayload",{"_index":963,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apibody(getproblemsourcetablescorrectpayload",{"_index":974,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apibody(resetpasswordcorrectpayload",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody(savenewregistryselectedcolumnscorrectpayload",{"_index":1021,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apibody(saveproblemalgorithmcorrectpayload",{"_index":1030,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apibody(saveproblemsourcecolumnscorrectpayload",{"_index":991,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apibody(saveproblemsourcecolumnstypescorrectpayload",{"_index":1002,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apibody(saveproblemsourcecorrectpayload",{"_index":980,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apibody(saveproblemsourceselectedordinalcolumnscorrectpayload",{"_index":1011,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apibody(signincorrectpayload",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody(signupcorrectpayload",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{},"controllers/SolverController.html":{}}}],["apioperation(createconnectiondescription",{"_index":960,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(createconnectiondescription)@apiresponse(createconnectionsuccessfulresponse)@apiresponse(createconnectionbadrequestresponse)@apibody(createconnectioncorrectpayload)@post('create",{"_index":864,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getavailablealgorithmsdescription",{"_index":1023,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getavailablealgorithmsdescription)@apiresponse(getavailablealgorithmssuccessfulresponse)@apiresponse(getavailablealgorithmsbadrequestresponse)@get('get",{"_index":843,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourceschemasdescription",{"_index":966,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourceschemasdescription)@apiresponse(getproblemsourceschemassuccessfulresponse)@apiresponse(getproblemsourceschemasbadrequestresponse)@get('get",{"_index":849,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourceselectedcolumnsdescription",{"_index":995,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourceselectedcolumnsdescription)@apiresponse(getproblemsourceselectedcolumnssuccessfulresponse)@apiresponse(getproblemsourceselectedcolumnsbadrequestresponse)@get('get",{"_index":852,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourceselectedcolumnsnewproblemdescription",{"_index":1014,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourceselectedcolumnsnewproblemdescription)@apiresponse(getproblemsourceselectedcolumnsnewproblemsuccessfulresponse)@apiresponse(getproblemsourceselectedcolumnsnewproblembadrequestresponse)@get('get",{"_index":855,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourceselectedordinalcolumnsdescription",{"_index":1004,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourceselectedordinalcolumnsdescription)@apiresponse(getproblemsourceselectedordinalcolumnssuccessfulresponse)@apiresponse(getproblemsourceselectedordinalcolumnsbadrequestresponse)@get('get",{"_index":857,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourcetablesdescription",{"_index":971,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(getproblemsourcetablesdescription)@apiresponse(getproblemsourcetablessuccessfulresponse)@apiresponse(getproblemsourcetablesbadrequestresponse)@apibody(getproblemsourcetablescorrectpayload)@post('get",{"_index":860,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(problemsourcecolumnsdescription",{"_index":983,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(problemsourcecolumnsdescription)@apiresponse(problemsourcecolumnssuccessfulresponse)@apiresponse(problemsourcecolumnsbadrequestresponse)@get('problem",{"_index":847,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(recovepassworddescription",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(recovepassworddescription)@apiresponse(recoverpasswordsuccessfulresponse)@apiresponse(recoverpasswordbadrequest)@get('recover",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(refreshtokendescription",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(refreshtokendescription)@apiresponse(refreshtokensuccessfulresponse)@apiresponse(refreshtokenunauthorizedresponse)@useguards(jwtrefreshauthguard)@get('refresh",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(resetpassworddescription",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(resetpassworddescription)@apiresponse(resetpasswordsuccessfulresponse)@apiresponse(resetpasswordunauthorizedresponse)@apibody(resetpasswordcorrectpayload)@useguards(jwtresetauthguard)@patch('reset",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(savenewregistryselectedcolumnsdescription",{"_index":1018,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(savenewregistryselectedcolumnsdescription)@apiresponse(savenewregistryselectedcolumnssuccessfulresponse)@apiresponse(savenewregistryselectedcolumnsbadrequestresponse)@apibody(savenewregistryselectedcolumnscorrectpayload)@post('save",{"_index":868,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemalgorithmdescription",{"_index":1027,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemalgorithmdescription)@apiresponse(saveproblemalgorithmsuccessfulresponse)@apiresponse(saveproblemalgorithmbadrequestresponse)@apibody(saveproblemalgorithmcorrectpayload)@post('save",{"_index":873,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemsourcecolumnsdescription",{"_index":988,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemsourcecolumnsdescription)@apiresponse(saveproblemsourcecolumnssuccessfulresponse)@apiresponse(saveproblemsourcecolumnsbadrequestresponse)@apibody(saveproblemsourcecolumnscorrectpayload)@post('save",{"_index":880,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemsourcecolumnstypesdescription",{"_index":999,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemsourcecolumnstypesdescription)@apiresponse(saveproblemsourcecolumnstypessuccessfulresponse)@apiresponse(saveproblemsourcecolumnstypesbadrequestresponse)@apibody(saveproblemsourcecolumnstypescorrectpayload)@post('save",{"_index":883,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemsourcedescription",{"_index":977,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemsourcedescription)@apiresponse(saveproblemsourcesuccessfulresponse)@apiresponse(saveproblemsourcebadrequestresponse)@apibody(saveproblemsourcecorrectpayload)@patch('save",{"_index":877,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemsourceselectedordinalcolumnsdescription",{"_index":1008,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(saveproblemsourceselectedordinalcolumnsdescription)@apiresponse(saveproblemsourceselectedordinalcolumnssuccessfulresponse)@apiresponse(saveproblemsourceselectedordinalcolumnsbadrequestresponse)@apibody(saveproblemsourceselectedordinalcolumnscorrectpayload)@post('save",{"_index":887,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apioperation(signindescription",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signindescription)@apiresponse(signinsuccessfulresponse)@apiresponse(signinunauthorizedresponse)@apibody(signincorrectpayload)@useguards(localauthguard)@post('sign",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signupdescription",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signupdescription)@apiresponse(signupsuccessfulresponse)@apiresponse(signupbadrequestresponse)@apibody(signupcorrectpayload)@post('sign",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(solvedescription",{"_index":1317,"title":{},"body":{"controllers/SolverController.html":{}}}],["apioperation(solvedescription)@apiresponse(solvesuccessfulresponse)@apiresponse(solvebadrequestresponse)@get('solve",{"_index":1308,"title":{},"body":{"controllers/SolverController.html":{}}}],["apiresponse",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{},"controllers/SolverController.html":{}}}],["apiresponse(createconnectionbadrequestresponse",{"_index":962,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(createconnectionsuccessfulresponse",{"_index":961,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getavailablealgorithmsbadrequestresponse",{"_index":1025,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getavailablealgorithmssuccessfulresponse",{"_index":1024,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourceschemasbadrequestresponse",{"_index":968,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourceschemassuccessfulresponse",{"_index":967,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourceselectedcolumnsbadrequestresponse",{"_index":997,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourceselectedcolumnsnewproblembadrequestresponse",{"_index":1016,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourceselectedcolumnsnewproblemsuccessfulresponse",{"_index":1015,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourceselectedcolumnssuccessfulresponse",{"_index":996,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourceselectedordinalcolumnsbadrequestresponse",{"_index":1006,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourceselectedordinalcolumnssuccessfulresponse",{"_index":1005,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourcetablesbadrequestresponse",{"_index":973,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(getproblemsourcetablessuccessfulresponse",{"_index":972,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(problemsourcecolumnsbadrequestresponse",{"_index":985,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(problemsourcecolumnssuccessfulresponse",{"_index":984,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(recoverpasswordbadrequest",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(recoverpasswordsuccessfulresponse",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(refreshtokensuccessfulresponse",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(refreshtokenunauthorizedresponse",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(resetpasswordsuccessfulresponse",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(resetpasswordunauthorizedresponse",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(savenewregistryselectedcolumnsbadrequestresponse",{"_index":1020,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(savenewregistryselectedcolumnssuccessfulresponse",{"_index":1019,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemalgorithmbadrequestresponse",{"_index":1029,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemalgorithmsuccessfulresponse",{"_index":1028,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemsourcebadrequestresponse",{"_index":979,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemsourcecolumnsbadrequestresponse",{"_index":990,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemsourcecolumnssuccessfulresponse",{"_index":989,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemsourcecolumnstypesbadrequestresponse",{"_index":1001,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemsourcecolumnstypessuccessfulresponse",{"_index":1000,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemsourceselectedordinalcolumnsbadrequestresponse",{"_index":1010,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemsourceselectedordinalcolumnssuccessfulresponse",{"_index":1009,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(saveproblemsourcesuccessfulresponse",{"_index":978,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["apiresponse(signinsuccessfulresponse",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signinunauthorizedresponse",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signupbadrequestresponse",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signupsuccessfulresponse",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(solvebadrequestresponse",{"_index":1319,"title":{},"body":{"controllers/SolverController.html":{}}}],["apiresponse(solvesuccessfulresponse",{"_index":1318,"title":{},"body":{"controllers/SolverController.html":{}}}],["app",{"_index":1596,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":51,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1589,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":66,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":59,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":713,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["args.constraints",{"_index":727,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["args.constraints.every((pattern",{"_index":718,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["argumentmetadata",{"_index":1480,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["array",{"_index":1508,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["assign",{"_index":1505,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["auth",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["auth.guard.ts",{"_index":736,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:16",{"_index":751,"title":{},"body":{"injectables/JwtBaseAuthGuard.html":{}}}],["auth.guard.ts:24",{"_index":741,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:32",{"_index":753,"title":{},"body":{"injectables/JwtResetAuthGuard.html":{}}}],["auth.guard.ts:40",{"_index":752,"title":{},"body":{"injectables/JwtRefreshAuthGuard.html":{}}}],["auth.service",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/password/reset?token=${resettoken",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth/refreshtoken.entity",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":147,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":743,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":750,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["authguard('local",{"_index":810,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":72,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1627,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":201,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":844,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["await",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["backers",{"_index":1619,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParameterizerService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception(error",{"_index":1070,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["base",{"_index":804,"title":{},"body":{"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["basecase",{"_index":1357,"title":{},"body":{"injectables/SolverService.html":{}}}],["basecase[object.keys(basecase)[0",{"_index":1409,"title":{},"body":{"injectables/SolverService.html":{}}}],["basecasecolumn",{"_index":457,"title":{"entities/BaseCaseColumn.html":{}},"body":{"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["basecasecolumn.literalvalues",{"_index":800,"title":{},"body":{"entities/LiteralValue.html":{}}}],["basecasecolumn.mappedvalues",{"_index":820,"title":{},"body":{"entities/MappedValue.html":{}}}],["basecasecolumns",{"_index":484,"title":{"classes/BaseCaseColumns.html":{}},"body":{"classes/BaseCaseColumns.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["basecasecolumnsrepository",{"_index":1148,"title":{},"body":{"injectables/ProblemService.html":{}}}],["bcrypt",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"dependencies.html":{}}}],["bcrypt.compare(clientrefreshtoken",{"_index":787,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["bcrypt.compare(clientresetpasswordtoken",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(pass",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newrefreshtoken",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(resettoken",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["being",{"_index":1073,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["body",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["body('password",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["booleancolumns",{"_index":1278,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["bootstrap",{"_index":1530,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1637,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1635,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1584,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":1425,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":459,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"classes/IsValidPassword.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"injectables/SolverService.html":{},"coverage.html":{}}}],["casebasefactorx",{"_index":1340,"title":{},"body":{"injectables/SolverService.html":{}}}],["cases",{"_index":1364,"title":{},"body":{"injectables/SolverService.html":{}}}],["catch",{"_index":697,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/SendgridService.html":{}}}],["character",{"_index":725,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["characters",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters'})@validate(isvalidpassword",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["checkifloggedin",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkifloggedin(req",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkifsourceexists",{"_index":525,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["checkifsourceexists(problemsource",{"_index":540,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["class",{"_index":37,"title":{"classes/AlgorithmsRepository.html":{},"classes/BaseCaseColumns.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"classes/LiteralValuesRepository.html":{},"classes/MappedValuesRepository.html":{},"classes/ProblemsRepository.html":{},"classes/RefreshTokensRepository.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"classes/UsersRepository.html":{}},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":45,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"classes/BaseCaseColumns.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"classes/LiteralValuesRepository.html":{},"classes/MappedValuesRepository.html":{},"classes/ProblemsRepository.html":{},"classes/RefreshTokensRepository.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"classes/UsersRepository.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["client",{"_index":647,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{}}}],["client.connect",{"_index":696,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["clientrefreshtoken",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["clientresetpasswordtoken",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_connectionmodule",{"_index":507,"title":{},"body":{"modules/ConnectionModule.html":{},"overview.html":{}}}],["cluster_connectionmodule_exports",{"_index":508,"title":{},"body":{"modules/ConnectionModule.html":{},"overview.html":{}}}],["cluster_connectionmodule_imports",{"_index":510,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["cluster_connectionmodule_providers",{"_index":509,"title":{},"body":{"modules/ConnectionModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":685,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":687,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":686,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_parameterizermodule",{"_index":1033,"title":{},"body":{"modules/ParameterizerModule.html":{},"overview.html":{}}}],["cluster_parameterizermodule_imports",{"_index":1035,"title":{},"body":{"modules/ParameterizerModule.html":{}}}],["cluster_parameterizermodule_providers",{"_index":1034,"title":{},"body":{"modules/ParameterizerModule.html":{},"overview.html":{}}}],["cluster_problemmodule",{"_index":1132,"title":{},"body":{"modules/ProblemModule.html":{},"overview.html":{}}}],["cluster_problemmodule_exports",{"_index":1133,"title":{},"body":{"modules/ProblemModule.html":{},"overview.html":{}}}],["cluster_problemmodule_providers",{"_index":1134,"title":{},"body":{"modules/ProblemModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule",{"_index":1288,"title":{},"body":{"modules/SendgridModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule_exports",{"_index":1290,"title":{},"body":{"modules/SendgridModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule_providers",{"_index":1289,"title":{},"body":{"modules/SendgridModule.html":{}}}],["cluster_solvermodule",{"_index":1322,"title":{},"body":{"modules/SolverModule.html":{},"overview.html":{}}}],["cluster_solvermodule_imports",{"_index":1323,"title":{},"body":{"modules/SolverModule.html":{}}}],["cluster_solvermodule_providers",{"_index":1324,"title":{},"body":{"modules/SolverModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1436,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1437,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1438,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["column",{"_index":31,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"injectables/SolverService.html":{},"entities/User.html":{}}}],["column({default",{"_index":492,"title":{},"body":{"entities/Connection.html":{},"entities/Problem.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["column({enum",{"_index":26,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{}}}],["column({nullable",{"_index":19,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/LiteralValue.html":{},"entities/Problem.html":{},"entities/Registry.html":{}}}],["column.columnname",{"_index":1416,"title":{},"body":{"injectables/SolverService.html":{}}}],["column.droppableid",{"_index":1099,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["column.entity",{"_index":488,"title":{},"body":{"classes/BaseCaseColumns.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["column.entity.ts",{"_index":460,"title":{},"body":{"entities/BaseCaseColumn.html":{},"coverage.html":{}}}],["column.entity.ts:15",{"_index":464,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:17",{"_index":471,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:19",{"_index":475,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:24",{"_index":476,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:26",{"_index":474,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:28",{"_index":470,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.entity.ts:30",{"_index":467,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["column.mappedvalues",{"_index":1242,"title":{},"body":{"injectables/ProblemService.html":{}}}],["column.mappedvalues.find",{"_index":1241,"title":{},"body":{"injectables/ProblemService.html":{}}}],["column.mappedvalues.length",{"_index":1240,"title":{},"body":{"injectables/ProblemService.html":{}}}],["column.name",{"_index":1363,"title":{},"body":{"injectables/SolverService.html":{}}}],["column.problem",{"_index":1117,"title":{},"body":{"entities/Problem.html":{}}}],["column.repository",{"_index":1185,"title":{},"body":{"injectables/ProblemService.html":{}}}],["column.repository.ts",{"_index":486,"title":{},"body":{"classes/BaseCaseColumns.html":{},"coverage.html":{}}}],["column.type",{"_index":1216,"title":{},"body":{"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["column_name",{"_index":610,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["columnname",{"_index":612,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SolverService.html":{}}}],["columnnames",{"_index":559,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["columns",{"_index":614,"title":{},"body":{"injectables/ConnectionService.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"injectables/SolverService.html":{},"coverage.html":{}}}],["columns.dto",{"_index":900,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["columns.dto.ts",{"_index":1262,"title":{},"body":{"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["columns.dto.ts:5",{"_index":1263,"title":{},"body":{"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}}}],["columns.dto.ts:7",{"_index":1264,"title":{},"body":{"classes/SaveNewRegistrySelectedColumnsDto.html":{}}}],["columns.find",{"_index":1372,"title":{},"body":{"injectables/SolverService.html":{}}}],["columns.length",{"_index":1087,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["columns.map",{"_index":1098,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["columns.map((column",{"_index":1362,"title":{},"body":{"injectables/SolverService.html":{}}}],["columns.push",{"_index":617,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["columns.ts",{"_index":1267,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{},"coverage.html":{}}}],["columns.ts:10",{"_index":1270,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["columns.ts:12",{"_index":1272,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["columns.ts:5",{"_index":1273,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["columns[0][0",{"_index":1229,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columns_not_found",{"_index":1088,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["columnswithliteralcolumnsupdated",{"_index":1097,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["columntosave",{"_index":1204,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columntosave.name",{"_index":1205,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columntosave.problem",{"_index":1208,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columntosave.target",{"_index":1206,"title":{},"body":{"injectables/ProblemService.html":{}}}],["columntype",{"_index":1354,"title":{},"body":{"injectables/SolverService.html":{}}}],["columntypes",{"_index":1351,"title":{},"body":{"injectables/SolverService.html":{}}}],["columntypes.find",{"_index":1415,"title":{},"body":{"injectables/SolverService.html":{}}}],["columnvalue",{"_index":1155,"title":{},"body":{"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["comma",{"_index":1498,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["conection",{"_index":908,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["conection.ts",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["configmodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{}}}],["configservice.get('db_host",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_user",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_access_secret",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":778,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["configservice.get('jwt_reset_password_secret",{"_index":797,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["connection",{"_index":107,"title":{"entities/Connection.html":{}},"body":{"modules/AppModule.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"coverage.html":{}}}],["connection.entity",{"_index":516,"title":{},"body":{"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{}}}],["connection.problems",{"_index":1119,"title":{},"body":{"entities/Problem.html":{}}}],["connection.service",{"_index":517,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["connection.user",{"_index":1424,"title":{},"body":{"entities/User.html":{}}}],["connection/connection.entity",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["connection/connection.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["connection_not_found",{"_index":576,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["connection_refused",{"_index":699,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["connectionentity",{"_index":581,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["connectionid",{"_index":542,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["connectionmodule",{"_index":73,"title":{"modules/ConnectionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConnectionModule.html":{},"modules/ParameterizerModule.html":{},"modules/SolverModule.html":{},"modules.html":{},"overview.html":{}}}],["connectionoptions",{"_index":520,"title":{"interfaces/ConnectionOptions.html":{}},"body":{"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{}}}],["connections",{"_index":1423,"title":{},"body":{"entities/User.html":{}}}],["connectionservice",{"_index":511,"title":{"injectables/ConnectionService.html":{}},"body":{"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{},"coverage.html":{},"overview.html":{}}}],["connectionsrepository",{"_index":536,"title":{"classes/ConnectionsRepository.html":{}},"body":{"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"coverage.html":{}}}],["const",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["constraint1",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":812,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":755,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{}}}],["constructor(connectionservice",{"_index":1043,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["constructor(databaseservice",{"_index":534,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["constructor(private",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{}}}],["constructor(problemservice",{"_index":1333,"title":{},"body":{"injectables/SolverService.html":{}}}],["constructor(problemsrepository",{"_index":1146,"title":{},"body":{"injectables/ProblemService.html":{}}}],["constructor(usersrepository",{"_index":1450,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":739,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["controller",{"_index":50,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{},"controllers/SolverController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{},"controllers/SolverController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('parameterizer",{"_index":959,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["controller('solver",{"_index":1316,"title":{},"body":{"controllers/SolverController.html":{}}}],["controllers",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"overview.html":{}}}],["cookie",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":1510,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["create(payload",{"_index":1452,"title":{},"body":{"injectables/UsersService.html":{}}}],["createconnection",{"_index":526,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["createconnection(databasemetadata",{"_index":544,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["createconnectionbadrequestresponse",{"_index":903,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["createconnectioncorrectpayload",{"_index":904,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["createconnectiondescription",{"_index":905,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["createconnectionoptionsdto",{"_index":633,"title":{"classes/CreateConnectionOptionsDto.html":{}},"body":{"classes/CreateConnectionOptionsDto.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["createconnectionsuccessfulresponse",{"_index":906,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["created",{"_index":1074,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["createnewaccesstoken",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewaccesstoken(user",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewconnection",{"_index":1040,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["createnewconnection(databasemetadata",{"_index":1045,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["createnewconnectionresponse",{"_index":645,"title":{"interfaces/CreateNewConnectionResponse.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["createnewconnectionresponsewitherror",{"_index":567,"title":{"interfaces/CreateNewConnectionResponseWithError.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["createnewrefreshtoken",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewrefreshtoken(user",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["createproblem",{"_index":1141,"title":{},"body":{"injectables/ProblemService.html":{}}}],["createproblem(connection",{"_index":1151,"title":{},"body":{"injectables/ProblemService.html":{}}}],["createquerybuilder",{"_index":1446,"title":{},"body":{"injectables/UsersService.html":{}}}],["createquerybuilder(alias",{"_index":1454,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":183,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["credentials",{"_index":818,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["curr",{"_index":1102,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["curr.columnname",{"_index":1103,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["curr.values",{"_index":1104,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["current",{"_index":490,"title":{},"body":{"entities/Connection.html":{}}}],["custom",{"_index":1496,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["customresponse",{"_index":744,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"coverage.html":{}}}],["customresponse(info",{"_index":748,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["d",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"injectables/SolverService.html":{}}}],["database.service",{"_index":689,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseinstance",{"_index":650,"title":{"interfaces/DatabaseInstance.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["databasemetadata",{"_index":547,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{}}}],["databasemodule",{"_index":74,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":535,"title":{"injectables/DatabaseService.html":{}},"body":{"injectables/ConnectionService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"coverage.html":{},"overview.html":{}}}],["date",{"_index":1247,"title":{},"body":{"entities/RefreshToken.html":{}}}],["date(date.now",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["db",{"_index":589,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["db.query",{"_index":592,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["db.query(`select",{"_index":620,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["db_host",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["db_name",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["db_password",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["db_port",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["db_user",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"entities/Algorithm.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"controllers/SolverController.html":{},"entities/User.html":{}}}],["default",{"_index":506,"title":{},"body":{"entities/Connection.html":{},"entities/Problem.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["defaultmessage",{"_index":709,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["defaultmessage(args",{"_index":710,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["defined",{"_index":17,"title":{},"body":{"entities/Algorithm.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"injectables/ConnectionService.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":68,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1590,"title":{},"body":{"index.html":{},"properties.html":{}}}],["detail",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["detected",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["development",{"_index":1597,"title":{},"body":{"index.html":{}}}],["disable",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["distance",{"_index":1380,"title":{},"body":{"injectables/SolverService.html":{}}}],["distancefunction",{"_index":1339,"title":{},"body":{"injectables/SolverService.html":{}}}],["distinct",{"_index":615,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["divide",{"_index":1501,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["documentation",{"_index":1511,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["droppableid",{"_index":652,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["dtos/create",{"_index":889,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["dtos/get",{"_index":896,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["dtos/save",{"_index":894,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["dynamictemplatedata",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":1607,"title":{},"body":{"index.html":{}}}],["each",{"_index":1360,"title":{},"body":{"injectables/SolverService.html":{}}}],["efficient",{"_index":1585,"title":{},"body":{"index.html":{}}}],["email",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["email_already_exists",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Algorithm.html":{},"modules/AppModule.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/algorithm.entity",{"_index":49,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entities/base",{"_index":487,"title":{},"body":{"classes/BaseCaseColumns.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entities/literal",{"_index":808,"title":{},"body":{"classes/LiteralValuesRepository.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entities/mapped",{"_index":827,"title":{},"body":{"classes/MappedValuesRepository.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entities/problem.entity",{"_index":1136,"title":{},"body":{"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"classes/ProblemsRepository.html":{}}}],["entities/registry.entity",{"_index":1137,"title":{},"body":{"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["entity",{"_index":0,"title":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{}},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{},"coverage.html":{}}}],["entry",{"_index":1230,"title":{},"body":{"injectables/ProblemService.html":{}}}],["entry.columnname",{"_index":1232,"title":{},"body":{"injectables/ProblemService.html":{}}}],["enum",{"_index":38,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{}}}],["err",{"_index":698,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["error",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["errors",{"_index":1488,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.foreach((e",{"_index":1492,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":1490,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["eslint",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["euclidian",{"_index":1379,"title":{},"body":{"injectables/SolverService.html":{}}}],["exceed",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["existing",{"_index":789,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["exists",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{}}}],["expiresat",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"entities/RefreshToken.html":{}}}],["expiresin",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":36,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":513,"title":{},"body":{"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{},"controllers/ParameterizerController.html":{},"dependencies.html":{}}}],["extends",{"_index":47,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"classes/BaseCaseColumns.html":{},"classes/ConnectionsRepository.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"classes/RefreshTokensRepository.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/UsersRepository.html":{}}}],["extractjwt",{"_index":759,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":776,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["extractjwt.fromurlqueryparameter('token",{"_index":796,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["factor",{"_index":483,"title":{},"body":{"entities/BaseCaseColumn.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"injectables/SolverService.html":{}}}],["factors",{"_index":481,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/SaveProblemSourceColumnsDto.html":{}}}],["false",{"_index":599,"title":{},"body":{"injectables/ConnectionService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/ProblemService.html":{}}}],["fetched",{"_index":1365,"title":{},"body":{"injectables/SolverService.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["filter(([columnname",{"_index":1371,"title":{},"body":{"injectables/SolverService.html":{}}}],["filter(boolean",{"_index":732,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["find",{"_index":1095,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["findone",{"_index":1447,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(options",{"_index":1457,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneby",{"_index":1448,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneby(property",{"_index":1460,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneoptions",{"_index":1458,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":1461,"title":{},"body":{"injectables/UsersService.html":{}}}],["formattedbasecases",{"_index":1368,"title":{},"body":{"injectables/SolverService.html":{}}}],["formattederrors",{"_index":1491,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["formattederrors[e.property",{"_index":1494,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["formattednewcase",{"_index":1375,"title":{},"body":{"injectables/SolverService.html":{}}}],["found",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{}}}],["founduser",{"_index":781,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["founduser.refreshtokens.some",{"_index":786,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["framework",{"_index":1583,"title":{},"body":{"index.html":{}}}],["frontend_url",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":1347,"title":{},"body":{"injectables/SolverService.html":{},"coverage.html":{}}}],["functions",{"_index":1577,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('check",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('get",{"_index":969,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["get('problem",{"_index":986,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["get('recover",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('solve",{"_index":1320,"title":{},"body":{"controllers/SolverController.html":{}}}],["getallrows",{"_index":527,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getallrows(connection",{"_index":548,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getavailablealgorithms",{"_index":831,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["getavailablealgorithmsbadrequestresponse",{"_index":951,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getavailablealgorithmsdescription",{"_index":952,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getavailablealgorithmssuccessfulresponse",{"_index":953,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getbasecolumnmappedvalue",{"_index":1142,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getbasecolumnmappedvalue(columnname",{"_index":1154,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getbasecolumnmappedvalues",{"_index":1143,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getbasecolumnmappedvalues(columnname",{"_index":1157,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getbasecolumnmi",{"_index":1144,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getbasecolumnmi(columnname",{"_index":1159,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getconnectionbyid",{"_index":528,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getconnectionbyid(connectionid",{"_index":552,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getcurrentproblemsourcecolumns",{"_index":529,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getcurrentproblemsourcecolumns(connection",{"_index":554,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getdatabaseinstance",{"_index":691,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getdatabaseinstance(options",{"_index":692,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["gethello",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getminandmax",{"_index":1328,"title":{},"body":{"injectables/SolverService.html":{}}}],["getminandmax(columnname",{"_index":1335,"title":{},"body":{"injectables/SolverService.html":{}}}],["getnearestneighbor",{"_index":1329,"title":{},"body":{"injectables/SolverService.html":{}}}],["getnearestneighbor(normalizedbasecases",{"_index":1337,"title":{},"body":{"injectables/SolverService.html":{}}}],["getnumericcolumnminmax",{"_index":530,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getnumericcolumnminmax(undefined",{"_index":556,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblembeingcreated",{"_index":1145,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblembeingcreated(relations",{"_index":1161,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblemsourcecolumns",{"_index":832,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["getproblemsourcedistinctvalues",{"_index":531,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblemsourcedistinctvalues(connection",{"_index":558,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblemsourceoptions",{"_index":833,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["getproblemsourceschemas",{"_index":532,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{}}}],["getproblemsourceschemas(connection",{"_index":561,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblemsourceschemasbadrequestresponse",{"_index":909,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceschemasdescription",{"_index":910,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceschemassuccessfulresponse",{"_index":911,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedcolumns",{"_index":834,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["getproblemsourceselectedcolumns(problem",{"_index":1163,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblemsourceselectedcolumnsbadrequestresponse",{"_index":930,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedcolumnsdescription",{"_index":931,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedcolumnsnewproblem",{"_index":835,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["getproblemsourceselectedcolumnsnewproblem(problem",{"_index":1165,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblemsourceselectedcolumnsnewproblembadrequestresponse",{"_index":944,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedcolumnsnewproblemdescription",{"_index":945,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedcolumnsnewproblemsuccessfulresponse",{"_index":946,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedcolumnssuccessfulresponse",{"_index":932,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedordinalcolumns",{"_index":836,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["getproblemsourceselectedordinalcolumns(problem",{"_index":1167,"title":{},"body":{"injectables/ProblemService.html":{}}}],["getproblemsourceselectedordinalcolumnsbadrequestresponse",{"_index":937,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedordinalcolumnsdescription",{"_index":938,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourceselectedordinalcolumnssuccessfulresponse",{"_index":939,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourcetables",{"_index":533,"title":{},"body":{"injectables/ConnectionService.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["getproblemsourcetables(body",{"_index":859,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["getproblemsourcetables(connection",{"_index":563,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["getproblemsourcetables(schema",{"_index":1053,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["getproblemsourcetablesbadrequestresponse",{"_index":913,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourcetablescorrectpayload",{"_index":914,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourcetablesdescription",{"_index":915,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourcetablesdto",{"_index":701,"title":{"classes/GetProblemSourceTablesDto.html":{}},"body":{"classes/GetProblemSourceTablesDto.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getproblemsourcetablessuccessfulresponse",{"_index":916,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["getting",{"_index":1579,"title":{"index.html":{}},"body":{}}],["globalsimilitude",{"_index":1405,"title":{},"body":{"injectables/SolverService.html":{}}}],["globalsimilitudes",{"_index":1398,"title":{},"body":{"injectables/SolverService.html":{}}}],["globalsimilitudes.reduce((acc",{"_index":1410,"title":{},"body":{"injectables/SolverService.html":{}}}],["goal",{"_index":482,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"injectables/SolverService.html":{}}}],["goalfactor",{"_index":1269,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["grow",{"_index":1614,"title":{},"body":{"index.html":{}}}],["hacked",{"_index":792,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["handlerequest",{"_index":737,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["handlerequest(err",{"_index":738,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["hash",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedresettoken",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedtoken",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":145,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["host",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{}}}],["hrivera@unal.edu.co",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["httponly",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1631,"title":{},"body":{"index.html":{}}}],["id",{"_index":9,"title":{},"body":{"entities/Algorithm.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/JwtStrategyRefreshToken.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"entities/User.html":{}}}],["identified",{"_index":1361,"title":{},"body":{"injectables/SolverService.html":{}}}],["identifier",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["implements",{"_index":707,"title":{},"body":{"classes/IsValidPassword.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":30,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{}}}],["in')@useguards(jwtrefreshauthguard",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["in.ts",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Algorithm.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["indexable",{"_index":1243,"title":{},"body":{"interfaces/ProblemSourceMappedColumns.html":{}}}],["infinity",{"_index":1394,"title":{},"body":{"injectables/SolverService.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["info.message",{"_index":745,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["information_schema",{"_index":602,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["information_schema.columns",{"_index":611,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["information_schema.schemata",{"_index":601,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["information_schema.tables",{"_index":595,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["inject",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":141,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/ProblemService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(algorithm",{"_index":1194,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(basecasecolumn",{"_index":1191,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(connection",{"_index":574,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["injectrepository(literalvalue",{"_index":1195,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(mappedvalue",{"_index":1192,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(problem",{"_index":1190,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(refreshtoken",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(registry",{"_index":1193,"title":{},"body":{"injectables/ProblemService.html":{}}}],["injectrepository(user",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1593,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1595,"title":{},"body":{"index.html":{}}}],["interface",{"_index":519,"title":{"interfaces/ConnectionOptions.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"interfaces/SaveProblemSourceColumnsType.html":{}},"body":{"interfaces/ConnectionOptions.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["interfaces",{"_index":521,"title":{},"body":{"interfaces/ConnectionOptions.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"overview.html":{}}}],["invalid",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["invalid_body",{"_index":1507,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["isarray",{"_index":1271,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["isbeingcreated",{"_index":1113,"title":{},"body":{"entities/Problem.html":{},"injectables/ProblemService.html":{}}}],["isboolean",{"_index":641,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["isemail",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":1274,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["isenum({ordinalcolumns",{"_index":1277,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["isenum({predictingfactors",{"_index":1268,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["isglobal",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["isobject",{"_index":1287,"title":{},"body":{"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}}}],["isstring",{"_index":636,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{}}}],["isstring({message",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isvalidpassword",{"_index":682,"title":{"classes/IsValidPassword.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"coverage.html":{}}}],["joi",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().required().default(5432",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('admin",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('localhost",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('reasoner",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":1621,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":734,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["jwtbaseauthguard",{"_index":747,"title":{"injectables/JwtBaseAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["jwtmodule",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshauthguard",{"_index":205,"title":{"injectables/JwtRefreshAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"coverage.html":{}}}],["jwtresetauthguard",{"_index":206,"title":{"injectables/JwtResetAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"coverage.html":{}}}],["jwtservice",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":312,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategyrefreshtoken",{"_index":313,"title":{"injectables/JwtStrategyRefreshToken.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategyresetpassword",{"_index":314,"title":{"injectables/JwtStrategyResetPassword.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategyResetPassword.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1628,"title":{},"body":{"index.html":{}}}],["key",{"_index":622,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{}}}],["license",{"_index":1634,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1611,"title":{},"body":{"index.html":{}}}],["line",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["link",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["list",{"_index":1503,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["literal",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{}}}],["literalcolumns",{"_index":655,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["literalcolumnswithdistinctvalues",{"_index":1091,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["literalcolumnswithdistinctvalues.reduce",{"_index":1100,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["literalvalue",{"_index":465,"title":{"entities/LiteralValue.html":{}},"body":{"entities/BaseCaseColumn.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["literalvalue.basecasecolumn",{"_index":466,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["literalvalues",{"_index":461,"title":{},"body":{"entities/BaseCaseColumn.html":{},"injectables/ProblemService.html":{}}}],["literalvalues.map",{"_index":1214,"title":{},"body":{"injectables/ProblemService.html":{}}}],["literalvaluesrepository",{"_index":805,"title":{"classes/LiteralValuesRepository.html":{}},"body":{"classes/LiteralValuesRepository.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["literalvaluetosave",{"_index":1219,"title":{},"body":{"injectables/ProblemService.html":{}}}],["literalvaluetosave.basecasecolumn",{"_index":1221,"title":{},"body":{"injectables/ProblemService.html":{}}}],["literalvaluetosave.value",{"_index":1220,"title":{},"body":{"injectables/ProblemService.html":{}}}],["local",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":209,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":315,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["lower",{"_index":722,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["mail",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["manhattan",{"_index":1386,"title":{},"body":{"injectables/SolverService.html":{}}}],["manytoone",{"_index":477,"title":{},"body":{"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{}}}],["manytoone(undefined",{"_index":472,"title":{},"body":{"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{}}}],["map((pattern",{"_index":728,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["mapped",{"_index":479,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["mappedvalue",{"_index":468,"title":{"entities/MappedValue.html":{}},"body":{"entities/BaseCaseColumn.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SolverService.html":{},"coverage.html":{}}}],["mappedvalue.basecasecolumn",{"_index":469,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["mappedvalues",{"_index":462,"title":{},"body":{"entities/BaseCaseColumn.html":{},"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["mappedvalues.length",{"_index":1391,"title":{},"body":{"injectables/SolverService.html":{}}}],["mappedvalues.map",{"_index":1213,"title":{},"body":{"injectables/ProblemService.html":{}}}],["mappedvalues.reduce",{"_index":1392,"title":{},"body":{"injectables/SolverService.html":{}}}],["mappedvaluesrepository",{"_index":825,"title":{"classes/MappedValuesRepository.html":{}},"body":{"classes/MappedValuesRepository.html":{},"injectables/ProblemService.html":{},"coverage.html":{}}}],["mappedvaluetosave",{"_index":1224,"title":{},"body":{"injectables/ProblemService.html":{}}}],["mappedvaluetosave.basecasecolumn",{"_index":1225,"title":{},"body":{"injectables/ProblemService.html":{}}}],["mappedvaluetosave.mappedvalue",{"_index":1227,"title":{},"body":{"injectables/ProblemService.html":{}}}],["mappedvaluetosave.ordinalvalue",{"_index":1226,"title":{},"body":{"injectables/ProblemService.html":{}}}],["matching",{"_index":43,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.abs((casebasefactorx",{"_index":1389,"title":{},"body":{"injectables/SolverService.html":{}}}],["math.sqrt(math.pow(casebasefactorx",{"_index":1384,"title":{},"body":{"injectables/SolverService.html":{}}}],["max",{"_index":629,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/SolverService.html":{}}}],["max(${columnname",{"_index":628,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["maxage",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["maximum",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength",{"_index":679,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(14",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":577,"title":{},"body":{"injectables/ConnectionService.html":{},"classes/CreateUserDto.html":{},"injectables/ParameterizerService.html":{}}}],["message.split",{"_index":1506,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["messages",{"_index":720,"title":{},"body":{"classes/IsValidPassword.html":{},"injectables/ValidationPipe.html":{}}}],["messages.flatmap((message",{"_index":1495,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["messages[index",{"_index":731,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["metadata",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":1478,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methods",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["mi",{"_index":1239,"title":{},"body":{"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["min",{"_index":627,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/SolverService.html":{}}}],["min(${columnname",{"_index":626,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["minlength",{"_index":680,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":683,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1576,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":1610,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1601,"title":{},"body":{"index.html":{}}}],["module",{"_index":65,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":67,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1624,"title":{},"body":{"index.html":{}}}],["motherfucker",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["myśliwiec",{"_index":1629,"title":{},"body":{"index.html":{}}}],["name",{"_index":10,"title":{},"body":{"entities/Algorithm.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"entities/Registry.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["nearestneighbor",{"_index":1381,"title":{},"body":{"injectables/SolverService.html":{}}}],["need",{"_index":1500,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["nest",{"_index":1591,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1633,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{},"controllers/SolverController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"injectables/ConnectionService.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["newaccesstoken",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["newcasecolumnvalue",{"_index":1396,"title":{},"body":{"injectables/SolverService.html":{}}}],["newcasefactory",{"_index":1383,"title":{},"body":{"injectables/SolverService.html":{}}}],["newpassword",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["newproblem",{"_index":583,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newproblem.connection.id",{"_index":585,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newproblem.id",{"_index":587,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newproblem.user.id",{"_index":586,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newrefreshtoken",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefreshtokenentity",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["newregistry",{"_index":660,"title":{"interfaces/NewRegistry.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["newrow",{"_index":621,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newrow[key",{"_index":625,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["newuser",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.id",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["no_problem_being_created",{"_index":1072,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["node.js",{"_index":1582,"title":{},"body":{"index.html":{}}}],["none",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["normalizebasecases",{"_index":1330,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizebasecases(columntypes",{"_index":1348,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizedbasecase",{"_index":1414,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizedbasecases",{"_index":1346,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizedbasecases.map(async",{"_index":1400,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizednewcase",{"_index":1338,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizedvalue",{"_index":1413,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizefactor",{"_index":1331,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizefactor(columntype",{"_index":1352,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizerow",{"_index":1332,"title":{},"body":{"injectables/SolverService.html":{}}}],["normalizerow(basecase",{"_index":1355,"title":{},"body":{"injectables/SolverService.html":{}}}],["not('goal",{"_index":1212,"title":{},"body":{"injectables/ProblemService.html":{}}}],["notfoundexception",{"_index":565,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["npm",{"_index":1594,"title":{},"body":{"index.html":{}}}],["null",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["nullable",{"_index":28,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/LiteralValue.html":{},"entities/Problem.html":{},"entities/Registry.html":{}}}],["number",{"_index":659,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"classes/IsValidPassword.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["number(acc.globalsimilitude",{"_index":1406,"title":{},"body":{"injectables/SolverService.html":{}}}],["number(columnvalue",{"_index":1421,"title":{},"body":{"injectables/SolverService.html":{}}}],["number(port",{"_index":694,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["number,newcasefactory",{"_index":1341,"title":{},"body":{"injectables/SolverService.html":{}}}],["number,rmax",{"_index":1342,"title":{},"body":{"injectables/SolverService.html":{}}}],["number,rmin",{"_index":1343,"title":{},"body":{"injectables/SolverService.html":{}}}],["numeric",{"_index":41,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"injectables/SolverService.html":{}}}],["numericcolumns",{"_index":1279,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["object",{"_index":1486,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["object.assign(normalizedbasecase",{"_index":1418,"title":{},"body":{"injectables/SolverService.html":{}}}],["object.entries(basecase",{"_index":1370,"title":{},"body":{"injectables/SolverService.html":{}}}],["object.entries(basecase).reduce",{"_index":1401,"title":{},"body":{"injectables/SolverService.html":{}}}],["object.entries(normalizednewcase)[0",{"_index":1397,"title":{},"body":{"injectables/SolverService.html":{}}}],["object.entries(row",{"_index":624,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["object.entries(selectedordinalcolumns",{"_index":1223,"title":{},"body":{"injectables/ProblemService.html":{}}}],["object.keys(basecase)[0",{"_index":1408,"title":{},"body":{"injectables/SolverService.html":{}}}],["object.values(e.constraints",{"_index":1493,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["one",{"_index":721,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["onetomany",{"_index":32,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/Problem.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":23,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/Problem.html":{},"entities/User.html":{}}}],["open",{"_index":1612,"title":{},"body":{"index.html":{}}}],["option",{"_index":1202,"title":{},"body":{"injectables/ProblemService.html":{}}}],["optional",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["options",{"_index":653,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":890,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["options.dto.ts",{"_index":635,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:11",{"_index":637,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":643,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:17",{"_index":639,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:20",{"_index":642,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:5",{"_index":638,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.dto.ts:8",{"_index":640,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{}}}],["options.interface",{"_index":573,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/ParameterizerService.html":{}}}],["options.interface.ts",{"_index":523,"title":{},"body":{"interfaces/ConnectionOptions.html":{},"coverage.html":{}}}],["options.map((columnname",{"_index":1096,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["ordered",{"_index":1502,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["ordinal",{"_index":39,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"controllers/ParameterizerController.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SolverService.html":{},"coverage.html":{}}}],["ordinalcolumns",{"_index":1283,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["ordinalvalue",{"_index":658,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{}}}],["out",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1638,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1549,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameterizer",{"_index":830,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["parameterizer.controller",{"_index":1037,"title":{},"body":{"modules/ParameterizerModule.html":{}}}],["parameterizer.service",{"_index":892,"title":{},"body":{"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{}}}],["parameterizer.types",{"_index":893,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["parameterizer/parameterizer.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["parameterizercontroller",{"_index":828,"title":{"controllers/ParameterizerController.html":{}},"body":{"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"coverage.html":{}}}],["parameterizermodule",{"_index":75,"title":{"modules/ParameterizerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ParameterizerModule.html":{},"modules.html":{},"overview.html":{}}}],["parameterizerservice",{"_index":891,"title":{"injectables/ParameterizerService.html":{}},"body":{"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{},"overview.html":{}}}],["parameters",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["parser",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":545,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{}}}],["pass",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":761,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":779,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["passthrough",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["password.strategy",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["password.strategy.ts",{"_index":793,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{},"coverage.html":{}}}],["password.strategy.ts:10",{"_index":794,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["password.strategy.ts:19",{"_index":795,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["password.ts",{"_index":706,"title":{},"body":{"classes/IsValidPassword.html":{},"coverage.html":{}}}],["password.ts:13",{"_index":712,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["password.ts:9",{"_index":715,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["patch",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["patch('reset",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('save",{"_index":981,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["pattern.test(args.value",{"_index":730,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["pattern.test(text",{"_index":719,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["payload",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/UsersService.html":{}}}],["payload.sub",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["payload.username",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["personalizations",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":648,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"dependencies.html":{}}}],["pg_catalog",{"_index":603,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["pg_toast",{"_index":604,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["pipetransform",{"_index":1482,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoinstance",{"_index":1483,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoinstance(metatype",{"_index":1487,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":1622,"title":{},"body":{"index.html":{}}}],["port",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"injectables/DatabaseService.html":{}}}],["post",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["post('create",{"_index":964,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["post('get",{"_index":975,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["post('save",{"_index":992,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["post('sign",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["predicting",{"_index":480,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/SaveProblemSourceColumnsDto.html":{}}}],["predictingfactors",{"_index":1275,"title":{},"body":{"classes/SaveProblemSourceColumnsDto.html":{}}}],["prefix",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{},"controllers/SolverController.html":{}}}],["primarygeneratedcolumn",{"_index":33,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":16,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"entities/Problem.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["private",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["problem",{"_index":22,"title":{"entities/Problem.html":{}},"body":{"entities/Algorithm.html":{},"modules/AppModule.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"classes/GetProblemSourceTablesDto.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/Registry.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"coverage.html":{}}}],["problem.algorithm",{"_index":24,"title":{},"body":{"entities/Algorithm.html":{},"controllers/ParameterizerController.html":{},"injectables/ProblemService.html":{}}}],["problem.algorithm.ts",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["problem.columns",{"_index":473,"title":{},"body":{"entities/BaseCaseColumn.html":{}}}],["problem.connection",{"_index":499,"title":{},"body":{"entities/Connection.html":{},"injectables/ParameterizerService.html":{}}}],["problem.connection.id",{"_index":1083,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["problem.entity",{"_index":35,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Registry.html":{}}}],["problem.id",{"_index":1210,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problem.registries",{"_index":1257,"title":{},"body":{"entities/Registry.html":{}}}],["problem.schema",{"_index":1094,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["problem.service",{"_index":1138,"title":{},"body":{"modules/ProblemModule.html":{}}}],["problem.table",{"_index":1093,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["problem.ts",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["problem.user",{"_index":1430,"title":{},"body":{"entities/User.html":{}}}],["problem/entities/problem.entity",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["problem/problem.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["problemmodule",{"_index":76,"title":{"modules/ProblemModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConnectionModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SolverModule.html":{},"modules.html":{},"overview.html":{}}}],["problems",{"_index":11,"title":{},"body":{"entities/Algorithm.html":{},"entities/Connection.html":{},"entities/User.html":{}}}],["problemservice",{"_index":538,"title":{"injectables/ProblemService.html":{}},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"injectables/SolverService.html":{},"coverage.html":{},"overview.html":{}}}],["problemsource",{"_index":541,"title":{"interfaces/ProblemSource.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["problemsource.schema",{"_index":1199,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problemsource.table",{"_index":1200,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problemsourcecolumn",{"_index":568,"title":{"interfaces/ProblemSourceColumn.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["problemsourcecolumns",{"_index":1179,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problemsourcecolumnsbadrequestresponse",{"_index":922,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["problemsourcecolumnsdescription",{"_index":923,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["problemsourcecolumnssuccessfulresponse",{"_index":924,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["problemsourceexists",{"_index":1081,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["problemsourcemappedcolumns",{"_index":657,"title":{"interfaces/ProblemSourceMappedColumns.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["problemsourceschema",{"_index":569,"title":{"interfaces/ProblemSourceSchema.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["problemsourcesections",{"_index":1176,"title":{},"body":{"injectables/ProblemService.html":{}}}],["problemsourcetable",{"_index":570,"title":{"interfaces/ProblemSourceTable.html":{}},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["problemsrepository",{"_index":1147,"title":{"classes/ProblemsRepository.html":{}},"body":{"injectables/ProblemService.html":{},"classes/ProblemsRepository.html":{},"coverage.html":{}}}],["problemsservice",{"_index":537,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["problesourceselectedcolumnsnewproblem",{"_index":661,"title":{"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["process.env.node_env",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["production",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["progressive",{"_index":1581,"title":{},"body":{"index.html":{}}}],["project",{"_index":1613,"title":{},"body":{"index.html":{}}}],["promise",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":1399,"title":{},"body":{"injectables/SolverService.html":{}}}],["promise.resolve",{"_index":1407,"title":{},"body":{"injectables/SolverService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"classes/GetProblemSourceTablesDto.html":{},"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["providers",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{}}}],["query",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["query('email",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["query('token",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["read",{"_index":1623,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/ParameterizerController.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{}}}],["record",{"_index":656,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SolverService.html":{}}}],["recovepassworddescription",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["recoverpassword",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["recoverpassword(email",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["recoverpasswordbadrequest",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["recoverpasswordsuccessfulresponse",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["recovery",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["reduce",{"_index":1373,"title":{},"body":{"injectables/SolverService.html":{}}}],["reflect",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{}}}],["refresh_token_hacked",{"_index":791,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshtoken",{"_index":95,"title":{"entities/RefreshToken.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/User.html":{},"coverage.html":{}}}],["refreshtoken(req",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(userid",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken.entity",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/RefreshTokensRepository.html":{}}}],["refreshtoken.user",{"_index":1432,"title":{},"body":{"entities/User.html":{}}}],["refreshtokendescription",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["refreshtokenmatch",{"_index":785,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshtokenpayload",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":784,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"entities/User.html":{}}}],["refreshtokens.repository",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshtokensrepository",{"_index":330,"title":{"classes/RefreshTokensRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"coverage.html":{}}}],["refreshtokensuccessfulresponse",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["refreshtokenunauthorizedresponse",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["refused",{"_index":700,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["registries",{"_index":1114,"title":{},"body":{"entities/Problem.html":{},"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["registries.reduce",{"_index":1376,"title":{},"body":{"injectables/SolverService.html":{}}}],["registriesrepository",{"_index":1149,"title":{},"body":{"injectables/ProblemService.html":{}}}],["registry",{"_index":869,"title":{"entities/Registry.html":{}},"body":{"controllers/ParameterizerController.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"injectables/SolverService.html":{},"coverage.html":{}}}],["registry.entity",{"_index":1131,"title":{},"body":{"entities/Problem.html":{}}}],["registry.name",{"_index":1231,"title":{},"body":{"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["registry.problem",{"_index":1124,"title":{},"body":{"entities/Problem.html":{},"injectables/ProblemService.html":{}}}],["registry.value",{"_index":1233,"title":{},"body":{"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["relations",{"_index":783,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/ProblemService.html":{}}}],["remote",{"_index":1366,"title":{},"body":{"injectables/SolverService.html":{}}}],["remotebasecasesconnection",{"_index":1260,"title":{"interfaces/RemoteBaseCasesConnection.html":{}},"body":{"interfaces/RemoteBaseCasesConnection.html":{},"injectables/SolverService.html":{},"coverage.html":{}}}],["remove",{"_index":788,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["repositories/algorithms.repository",{"_index":1189,"title":{},"body":{"injectables/ProblemService.html":{}}}],["repositories/base",{"_index":1184,"title":{},"body":{"injectables/ProblemService.html":{}}}],["repositories/mapped",{"_index":1186,"title":{},"body":{"injectables/ProblemService.html":{}}}],["repositories/problems.repository",{"_index":1188,"title":{},"body":{"injectables/ProblemService.html":{}}}],["repository",{"_index":48,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"classes/BaseCaseColumns.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/LiteralValuesRepository.html":{},"classes/MappedValuesRepository.html":{},"classes/ProblemsRepository.html":{},"classes/RefreshTokensRepository.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{},"controllers/ParameterizerController.html":{}}}],["req.cookies.refreshtoken",{"_index":777,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["req.cookies?.refreshtoken",{"_index":780,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["req.error",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.userid",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{},"controllers/ParameterizerController.html":{}}}],["requesttype",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["res",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyResetPassword.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["reset_password_token_invalid_payload",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(password",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(userid",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpasswordcorrectpayload",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["resetpassworddescription",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["resetpasswordsuccessfulresponse",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["resetpasswordtoken",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"entities/User.html":{}}}],["resetpasswordunauthorizedresponse",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["resettoken",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["resettokenpayload",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["response",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SendgridService.html":{}}}],["response.body.errors",{"_index":1303,"title":{},"body":{"injectables/SendgridService.html":{}}}],["response.clearcookie('refreshtoken",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.cookie('refreshtoken",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(202).json",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(401).json(req.error",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(statuscode).json(error",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["rest",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{}}}],["result",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProblemService.html":{}}}],["results",{"_index":42,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["returns",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"injectables/SolverService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["reuse",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["rimraf",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["rmax",{"_index":1387,"title":{},"body":{"injectables/SolverService.html":{}}}],["rmin",{"_index":1388,"title":{},"body":{"injectables/SolverService.html":{}}}],["row.column_name",{"_index":613,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["row.schema_name",{"_index":607,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["row.table_name",{"_index":609,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["row[columnname",{"_index":619,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rows",{"_index":591,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rows.map((row",{"_index":605,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rows[0].exists",{"_index":598,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rows[0].max",{"_index":631,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rows[0].min",{"_index":630,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["rtr",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["run",{"_index":1598,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["samesite",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["save",{"_index":1449,"title":{},"body":{"injectables/UsersService.html":{}}}],["save(user",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveconnectionoptions",{"_index":837,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveconnectionoptions(body",{"_index":863,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["savenewproblemselectedcolumns",{"_index":838,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["savenewproblemselectedcolumns(body",{"_index":866,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["savenewregistryselectedcolumns",{"_index":1041,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["savenewregistryselectedcolumns(problem",{"_index":1169,"title":{},"body":{"injectables/ProblemService.html":{}}}],["savenewregistryselectedcolumns(selectedvalues",{"_index":1055,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["savenewregistryselectedcolumnsbadrequestresponse",{"_index":947,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["savenewregistryselectedcolumnscorrectpayload",{"_index":948,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["savenewregistryselectedcolumnsdescription",{"_index":949,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["savenewregistryselectedcolumnsdto",{"_index":867,"title":{"classes/SaveNewRegistrySelectedColumnsDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"coverage.html":{}}}],["savenewregistryselectedcolumnssuccessfulresponse",{"_index":950,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemalgorithm",{"_index":839,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["saveproblemalgorithm(algorithm",{"_index":1058,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemalgorithm(body",{"_index":871,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemalgorithm(problem",{"_index":1171,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemalgorithmbadrequestresponse",{"_index":954,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemalgorithmcorrectpayload",{"_index":955,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemalgorithmdescription",{"_index":956,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemalgorithmdto",{"_index":872,"title":{"classes/SaveProblemAlgorithmDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"classes/SaveProblemAlgorithmDto.html":{},"coverage.html":{}}}],["saveproblemalgorithmsuccessfulresponse",{"_index":957,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsource",{"_index":840,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["saveproblemsource(body",{"_index":875,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsource(problem",{"_index":1173,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemsource(problemsource",{"_index":1060,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemsourcebadrequestresponse",{"_index":917,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecolumns",{"_index":841,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["saveproblemsourcecolumns(body",{"_index":879,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsourcecolumns(columns",{"_index":1062,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemsourcecolumns(problem",{"_index":1175,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemsourcecolumnsbadrequestresponse",{"_index":926,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnscorrectpayload",{"_index":927,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnsdescription",{"_index":928,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnsdto",{"_index":897,"title":{"classes/SaveProblemSourceColumnsDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnssuccessfulresponse",{"_index":929,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnstype",{"_index":651,"title":{"interfaces/SaveProblemSourceColumnsType.html":{}},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnstype(body",{"_index":882,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsourcecolumnstypedto",{"_index":898,"title":{"classes/SaveProblemSourceColumnsTypeDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnstypes",{"_index":1042,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{}}}],["saveproblemsourcecolumnstypes(columns",{"_index":1064,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemsourcecolumnstypes(problem",{"_index":1178,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemsourcecolumnstypesbadrequestresponse",{"_index":933,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnstypescorrectpayload",{"_index":934,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnstypesdescription",{"_index":935,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecolumnstypessuccessfulresponse",{"_index":936,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcecorrectpayload",{"_index":918,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcedescription",{"_index":919,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcedto",{"_index":876,"title":{"classes/SaveProblemSourceDto.html":{}},"body":{"controllers/ParameterizerController.html":{},"classes/SaveProblemSourceDto.html":{},"coverage.html":{}}}],["saveproblemsourceselectedordinalcolumns",{"_index":842,"title":{"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["saveproblemsourceselectedordinalcolumns(body",{"_index":886,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["saveproblemsourceselectedordinalcolumns(problem",{"_index":1181,"title":{},"body":{"injectables/ProblemService.html":{}}}],["saveproblemsourceselectedordinalcolumns(selectedordinalcolumns",{"_index":1066,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["saveproblemsourceselectedordinalcolumnsbadrequestresponse",{"_index":940,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourceselectedordinalcolumnscorrectpayload",{"_index":941,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourceselectedordinalcolumnsdescription",{"_index":942,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourceselectedordinalcolumnssuccessfulresponse",{"_index":943,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["saveproblemsourcesuccessfulresponse",{"_index":920,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["scalable",{"_index":1586,"title":{},"body":{"index.html":{}}}],["schema",{"_index":550,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"classes/GetProblemSourceTablesDto.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceDto.html":{},"injectables/SolverService.html":{}}}],["schema.ts",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["schema_name",{"_index":600,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["schemaname",{"_index":606,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{}}}],["schemas",{"_index":850,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["schemas.length",{"_index":1076,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["schemas_not_found",{"_index":1077,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["schema}.${table",{"_index":616,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["secret",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["section",{"_index":1201,"title":{},"body":{"injectables/ProblemService.html":{}}}],["section.droppableid",{"_index":1207,"title":{},"body":{"injectables/ProblemService.html":{}}}],["section.literalcolumns[option",{"_index":1218,"title":{},"body":{"injectables/ProblemService.html":{}}}],["section.options",{"_index":1203,"title":{},"body":{"injectables/ProblemService.html":{}}}],["sections",{"_index":993,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["sectiontitle",{"_index":654,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["secure",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":593,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["selected",{"_index":853,"title":{},"body":{"controllers/ParameterizerController.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["selectedordinalcolumns",{"_index":1012,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/ProblemService.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{}}}],["selectedvalues",{"_index":1057,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["send",{"_index":1294,"title":{},"body":{"injectables/SendgridService.html":{}}}],["send(mail",{"_index":1296,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["sendgrid.maildatarequired",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["sendgrid.send(mail",{"_index":1300,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid.service",{"_index":1292,"title":{},"body":{"modules/SendgridModule.html":{}}}],["sendgrid.setapikey(this.configservice.get('sendgrid_api_key",{"_index":1298,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid/mail",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{},"dependencies.html":{}}}],["sendgrid/sendgrid.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["sendgrid/sendgrid.service",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["sendgridmodule",{"_index":77,"title":{"modules/SendgridModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules.html":{},"overview.html":{}}}],["sendgridservice",{"_index":80,"title":{"injectables/SendgridService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"coverage.html":{},"overview.html":{}}}],["sengrid_error",{"_index":1302,"title":{},"body":{"injectables/SendgridService.html":{}}}],["separated",{"_index":1499,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["server",{"_index":1587,"title":{},"body":{"index.html":{}}}],["side",{"_index":1588,"title":{},"body":{"index.html":{}}}],["signin",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(req",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["signincorrectpayload",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["signindescription",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["signinsuccessfulresponse",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["signinunauthorizedresponse",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["signup",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(undefined",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupbadrequestresponse",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["signupcorrectpayload",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["signupdescription",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["signupsuccessfulresponse",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["solve",{"_index":1307,"title":{},"body":{"controllers/SolverController.html":{},"injectables/SolverService.html":{}}}],["solvebadrequestresponse",{"_index":1312,"title":{},"body":{"controllers/SolverController.html":{},"coverage.html":{}}}],["solvedescription",{"_index":1313,"title":{},"body":{"controllers/SolverController.html":{},"coverage.html":{}}}],["solver",{"_index":1306,"title":{},"body":{"controllers/SolverController.html":{}}}],["solver.controller",{"_index":1326,"title":{},"body":{"modules/SolverModule.html":{}}}],["solver.service",{"_index":1311,"title":{},"body":{"controllers/SolverController.html":{},"modules/SolverModule.html":{}}}],["solver.types",{"_index":1359,"title":{},"body":{"injectables/SolverService.html":{}}}],["solver/solver.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["solvercontroller",{"_index":1304,"title":{"controllers/SolverController.html":{}},"body":{"controllers/SolverController.html":{},"modules/SolverModule.html":{},"coverage.html":{}}}],["solvermodule",{"_index":78,"title":{"modules/SolverModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SolverModule.html":{},"modules.html":{},"overview.html":{}}}],["solverservice",{"_index":1310,"title":{"injectables/SolverService.html":{}},"body":{"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"coverage.html":{},"overview.html":{}}}],["solvesuccessfulresponse",{"_index":1314,"title":{},"body":{"controllers/SolverController.html":{},"coverage.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"modules/ConnectionModule.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"modules/ParameterizerModule.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"controllers/SolverController.html":{},"modules/SolverModule.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{}}}],["source.dto",{"_index":895,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["source.dto.ts",{"_index":1284,"title":{},"body":{"classes/SaveProblemSourceDto.html":{},"coverage.html":{}}}],["source.dto.ts:5",{"_index":1285,"title":{},"body":{"classes/SaveProblemSourceDto.html":{}}}],["source.dto.ts:8",{"_index":1286,"title":{},"body":{"classes/SaveProblemSourceDto.html":{}}}],["source.ts",{"_index":1544,"title":{},"body":{"coverage.html":{}}}],["source_not_found",{"_index":1084,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["special",{"_index":724,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["specific",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["sponsors",{"_index":1616,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":1578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":143,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":144,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:134",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:152",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:171",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:62",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:77",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:98",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:112",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:136",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:189",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:66",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:85",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:94",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/create",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/is",{"_index":705,"title":{},"body":{"classes/IsValidPassword.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":735,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":754,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":758,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":756,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":809,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":811,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:13",{"_index":815,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:8",{"_index":813,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/refreshtoken.entity",{"_index":1435,"title":{},"body":{"entities/User.html":{}}}],["src/auth/refreshtoken.entity.ts",{"_index":1246,"title":{},"body":{"entities/RefreshToken.html":{},"coverage.html":{}}}],["src/auth/refreshtoken.entity.ts:11",{"_index":1248,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:13",{"_index":1252,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:7",{"_index":1249,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:9",{"_index":1250,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtokens.repository.ts",{"_index":1253,"title":{},"body":{"classes/RefreshTokensRepository.html":{},"coverage.html":{}}}],["src/auth/swagger/recover",{"_index":1520,"title":{},"body":{"coverage.html":{}}}],["src/auth/swagger/refresh",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["src/auth/swagger/reset",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["src/auth/swagger/sign",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["src/connection/connection",{"_index":522,"title":{},"body":{"interfaces/ConnectionOptions.html":{},"injectables/DatabaseService.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{}}}],["src/connection/connection.entity",{"_index":649,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"entities/User.html":{}}}],["src/connection/connection.entity.ts",{"_index":489,"title":{},"body":{"entities/Connection.html":{},"coverage.html":{}}}],["src/connection/connection.entity.ts:14",{"_index":496,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:16",{"_index":495,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:18",{"_index":498,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:20",{"_index":494,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:22",{"_index":504,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:24",{"_index":497,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:26",{"_index":501,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:28",{"_index":493,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:30",{"_index":500,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.entity.ts:32",{"_index":503,"title":{},"body":{"entities/Connection.html":{}}}],["src/connection/connection.module",{"_index":1038,"title":{},"body":{"modules/ParameterizerModule.html":{},"modules/SolverModule.html":{}}}],["src/connection/connection.module.ts",{"_index":512,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["src/connection/connection.service",{"_index":1068,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["src/connection/connection.service.ts",{"_index":524,"title":{},"body":{"injectables/ConnectionService.html":{},"coverage.html":{}}}],["src/connection/connection.service.ts:100",{"_index":562,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:118",{"_index":564,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:135",{"_index":555,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:151",{"_index":560,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:174",{"_index":551,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:18",{"_index":539,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:194",{"_index":557,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:27",{"_index":553,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:44",{"_index":546,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connection.service.ts:78",{"_index":543,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/connection/connections.repository.ts",{"_index":632,"title":{},"body":{"classes/ConnectionsRepository.html":{},"coverage.html":{}}}],["src/database/database.module",{"_index":514,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["src/database/database.module.ts",{"_index":688,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.service",{"_index":566,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["src/database/database.service.ts",{"_index":690,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/database/database.service.ts:8",{"_index":693,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/main.ts",{"_index":1529,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/parameterizer/dtos/create",{"_index":634,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{},"coverage.html":{}}}],["src/parameterizer/dtos/get",{"_index":702,"title":{},"body":{"classes/GetProblemSourceTablesDto.html":{},"coverage.html":{}}}],["src/parameterizer/dtos/save",{"_index":1183,"title":{},"body":{"injectables/ProblemService.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"coverage.html":{}}}],["src/parameterizer/parameterizer.controller.ts",{"_index":829,"title":{},"body":{"controllers/ParameterizerController.html":{},"coverage.html":{}}}],["src/parameterizer/parameterizer.controller.ts:121",{"_index":865,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:134",{"_index":851,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:145",{"_index":862,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:159",{"_index":878,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:169",{"_index":848,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:180",{"_index":881,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:191",{"_index":854,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:202",{"_index":885,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:213",{"_index":858,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:224",{"_index":888,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:238",{"_index":856,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:249",{"_index":870,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:259",{"_index":846,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.controller.ts:268",{"_index":874,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["src/parameterizer/parameterizer.module.ts",{"_index":1036,"title":{},"body":{"modules/ParameterizerModule.html":{}}}],["src/parameterizer/parameterizer.service.ts",{"_index":1039,"title":{},"body":{"injectables/ParameterizerService.html":{},"coverage.html":{}}}],["src/parameterizer/parameterizer.service.ts:110",{"_index":1061,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:144",{"_index":1048,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:181",{"_index":1063,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:203",{"_index":1050,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:224",{"_index":1065,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:27",{"_index":1044,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:274",{"_index":1052,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:301",{"_index":1067,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:324",{"_index":1051,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:33",{"_index":1046,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:346",{"_index":1056,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:368",{"_index":1047,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:373",{"_index":1059,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:47",{"_index":1049,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.service.ts:78",{"_index":1054,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["src/parameterizer/parameterizer.types",{"_index":571,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/DatabaseService.html":{},"injectables/ProblemService.html":{}}}],["src/parameterizer/parameterizer.types.ts",{"_index":646,"title":{},"body":{"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"coverage.html":{}}}],["src/parameterizer/parameterizer.types.ts:50",{"_index":1244,"title":{},"body":{"interfaces/ProblemSourceMappedColumns.html":{}}}],["src/parameterizer/swagger/create",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["src/parameterizer/swagger/get",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["src/parameterizer/swagger/problem",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["src/parameterizer/swagger/save",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["src/problem/entities/algorithm.entity",{"_index":901,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["src/problem/entities/algorithm.entity.ts",{"_index":6,"title":{},"body":{"entities/Algorithm.html":{},"coverage.html":{}}}],["src/problem/entities/algorithm.entity.ts:11",{"_index":29,"title":{},"body":{"entities/Algorithm.html":{}}}],["src/problem/entities/algorithm.entity.ts:13",{"_index":25,"title":{},"body":{"entities/Algorithm.html":{}}}],["src/problem/entities/algorithm.entity.ts:7",{"_index":18,"title":{},"body":{"entities/Algorithm.html":{}}}],["src/problem/entities/algorithm.entity.ts:9",{"_index":21,"title":{},"body":{"entities/Algorithm.html":{}}}],["src/problem/entities/base",{"_index":458,"title":{},"body":{"entities/BaseCaseColumn.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"coverage.html":{}}}],["src/problem/entities/literal",{"_index":798,"title":{},"body":{"entities/LiteralValue.html":{},"coverage.html":{}}}],["src/problem/entities/mapped",{"_index":819,"title":{},"body":{"entities/MappedValue.html":{},"coverage.html":{}}}],["src/problem/entities/problem.entity",{"_index":505,"title":{},"body":{"entities/Connection.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"entities/User.html":{}}}],["src/problem/entities/problem.entity.ts",{"_index":1112,"title":{},"body":{"entities/Problem.html":{},"coverage.html":{}}}],["src/problem/entities/problem.entity.ts:17",{"_index":1121,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:19",{"_index":1123,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:21",{"_index":1122,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:23",{"_index":1126,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:25",{"_index":1127,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:27",{"_index":1120,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:29",{"_index":1129,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:31",{"_index":1118,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:33",{"_index":1125,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/problem.entity.ts:35",{"_index":1116,"title":{},"body":{"entities/Problem.html":{}}}],["src/problem/entities/registry.entity.ts",{"_index":1254,"title":{},"body":{"entities/Registry.html":{},"coverage.html":{}}}],["src/problem/entities/registry.entity.ts:11",{"_index":1259,"title":{},"body":{"entities/Registry.html":{}}}],["src/problem/entities/registry.entity.ts:13",{"_index":1258,"title":{},"body":{"entities/Registry.html":{}}}],["src/problem/entities/registry.entity.ts:7",{"_index":1255,"title":{},"body":{"entities/Registry.html":{}}}],["src/problem/entities/registry.entity.ts:9",{"_index":1256,"title":{},"body":{"entities/Registry.html":{}}}],["src/problem/problem.module",{"_index":515,"title":{},"body":{"modules/ConnectionModule.html":{},"modules/ParameterizerModule.html":{},"modules/SolverModule.html":{}}}],["src/problem/problem.module.ts",{"_index":1135,"title":{},"body":{"modules/ProblemModule.html":{}}}],["src/problem/problem.service",{"_index":572,"title":{},"body":{"injectables/ConnectionService.html":{},"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["src/problem/problem.service.ts",{"_index":1140,"title":{},"body":{"injectables/ProblemService.html":{},"coverage.html":{}}}],["src/problem/problem.service.ts:104",{"_index":1166,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:136",{"_index":1180,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:164",{"_index":1168,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:174",{"_index":1182,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:198",{"_index":1170,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:216",{"_index":1153,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:221",{"_index":1172,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:233",{"_index":1160,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:243",{"_index":1156,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:26",{"_index":1150,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:260",{"_index":1158,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:41",{"_index":1152,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:50",{"_index":1162,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:61",{"_index":1174,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:74",{"_index":1177,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/problem.service.ts:94",{"_index":1164,"title":{},"body":{"injectables/ProblemService.html":{}}}],["src/problem/repositories/algorithms.repository.ts",{"_index":46,"title":{},"body":{"classes/AlgorithmsRepository.html":{},"coverage.html":{}}}],["src/problem/repositories/base",{"_index":485,"title":{},"body":{"classes/BaseCaseColumns.html":{},"coverage.html":{}}}],["src/problem/repositories/literal",{"_index":806,"title":{},"body":{"classes/LiteralValuesRepository.html":{},"coverage.html":{}}}],["src/problem/repositories/mapped",{"_index":826,"title":{},"body":{"classes/MappedValuesRepository.html":{},"coverage.html":{}}}],["src/problem/repositories/problems.repository.ts",{"_index":1245,"title":{},"body":{"classes/ProblemsRepository.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.module",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/sendgrid/sendgrid.module.ts",{"_index":1291,"title":{},"body":{"modules/SendgridModule.html":{}}}],["src/sendgrid/sendgrid.service",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/sendgrid/sendgrid.service.ts",{"_index":1293,"title":{},"body":{"injectables/SendgridService.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.service.ts:11",{"_index":1297,"title":{},"body":{"injectables/SendgridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:6",{"_index":1295,"title":{},"body":{"injectables/SendgridService.html":{}}}],["src/solver/solver.controller.ts",{"_index":1305,"title":{},"body":{"controllers/SolverController.html":{},"coverage.html":{}}}],["src/solver/solver.controller.ts:18",{"_index":1309,"title":{},"body":{"controllers/SolverController.html":{}}}],["src/solver/solver.module.ts",{"_index":1325,"title":{},"body":{"modules/SolverModule.html":{}}}],["src/solver/solver.service.ts",{"_index":1327,"title":{},"body":{"injectables/SolverService.html":{},"coverage.html":{}}}],["src/solver/solver.service.ts:109",{"_index":1336,"title":{},"body":{"injectables/SolverService.html":{}}}],["src/solver/solver.service.ts:14",{"_index":1358,"title":{},"body":{"injectables/SolverService.html":{}}}],["src/solver/solver.service.ts:140",{"_index":1345,"title":{},"body":{"injectables/SolverService.html":{}}}],["src/solver/solver.service.ts:198",{"_index":1350,"title":{},"body":{"injectables/SolverService.html":{}}}],["src/solver/solver.service.ts:217",{"_index":1356,"title":{},"body":{"injectables/SolverService.html":{}}}],["src/solver/solver.service.ts:240",{"_index":1353,"title":{},"body":{"injectables/SolverService.html":{}}}],["src/solver/solver.service.ts:8",{"_index":1334,"title":{},"body":{"injectables/SolverService.html":{}}}],["src/solver/solver.types.ts",{"_index":1261,"title":{},"body":{"interfaces/RemoteBaseCasesConnection.html":{},"coverage.html":{}}}],["src/solver/swagger/solve.ts",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["src/users/user.entity",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Connection.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"interfaces/SaveProblemSourceColumnsType.html":{}}}],["src/users/user.entity.ts",{"_index":1422,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:11",{"_index":1427,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:13",{"_index":1429,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:15",{"_index":1433,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:17",{"_index":1434,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":1431,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":1426,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":1428,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConnectionModule.html":{}}}],["src/users/users.module.ts",{"_index":1439,"title":{},"body":{"modules/UserModule.html":{}}}],["src/users/users.repository.ts",{"_index":1444,"title":{},"body":{"classes/UsersRepository.html":{},"coverage.html":{}}}],["src/users/users.service",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["src/users/users.service.ts",{"_index":1445,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1455,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":1459,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:25",{"_index":1453,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:7",{"_index":1451,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/validation.pipe.ts",{"_index":1473,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/utils/validation.pipe.ts:12",{"_index":1481,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/utils/validation.pipe.ts:35",{"_index":1477,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["ssl",{"_index":491,"title":{},"body":{"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{}}}],["start",{"_index":1599,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1602,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1603,"title":{},"body":{"index.html":{}}}],["started",{"_index":1580,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1592,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":740,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["statuscode",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["stay",{"_index":1625,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":760,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["strict",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["string",{"_index":14,"title":{},"body":{"entities/Algorithm.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"entities/LiteralValue.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["string(entry.value",{"_index":1234,"title":{},"body":{"injectables/ProblemService.html":{}}}],["sub",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["substrings",{"_index":1504,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["super",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["super.handlerequest(err",{"_index":749,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{}}}],["support",{"_index":1617,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1636,"title":{},"body":{"modules.html":{}}}],["swagger/create",{"_index":907,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["swagger/get",{"_index":912,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["swagger/problem",{"_index":925,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["swagger/recover",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/refresh",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/reset",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/save",{"_index":921,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["swagger/sign",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/solve",{"_index":1315,"title":{},"body":{"controllers/SolverController.html":{}}}],["synchronize",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":549,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceDto.html":{},"injectables/SolverService.html":{},"coverage.html":{}}}],["table_name",{"_index":597,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["table_schema",{"_index":596,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["tablename",{"_index":608,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"interfaces/SaveProblemSourceColumnsType.html":{}}}],["tables",{"_index":861,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["tables.length",{"_index":1079,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["tables.ts",{"_index":703,"title":{},"body":{"classes/GetProblemSourceTablesDto.html":{},"coverage.html":{}}}],["tables.ts:5",{"_index":704,"title":{},"body":{"classes/GetProblemSourceTablesDto.html":{}}}],["tables_not_found",{"_index":1080,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":463,"title":{},"body":{"entities/BaseCaseColumn.html":{},"injectables/ProblemService.html":{},"injectables/SolverService.html":{}}}],["templateid",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1606,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1609,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1608,"title":{},"body":{"index.html":{}}}],["testpassed",{"_index":729,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["tests",{"_index":1605,"title":{},"body":{"index.html":{}}}],["text",{"_index":716,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["thanks",{"_index":1615,"title":{},"body":{"index.html":{}}}],["this.algorithmsrepository.find",{"_index":1236,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.algorithmsrepository.findone",{"_index":1238,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.appservice.gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.recoverpassword(email",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(req.user",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(body",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":817,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.basecasecolumnsrepository.find",{"_index":1211,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.basecasecolumnsrepository.findone",{"_index":1215,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.basecasecolumnsrepository.save(column",{"_index":1217,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.basecasecolumnsrepository.save(columntosave",{"_index":1209,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.configservice.get",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('frontend_domain",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_expiration_time",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_expiration_time",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_reset_password_expiration_time",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_reset_password_secret",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.connectionservice.checkifsourceexists",{"_index":1082,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.createconnection",{"_index":1069,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.getallrows",{"_index":1367,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.connectionservice.getcurrentproblemsourcecolumns",{"_index":1086,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.getnumericcolumnminmax",{"_index":1395,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.connectionservice.getproblemsourcedistinctvalues",{"_index":1092,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.getproblemsourceschemas",{"_index":1075,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionservice.getproblemsourcetables",{"_index":1078,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.connectionsrepository.create(databasemetadata",{"_index":579,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.connectionsrepository.findoneby",{"_index":575,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.connectionsrepository.save",{"_index":582,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.createnewaccesstoken(user",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createnewrefreshtoken(user",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.databaseservice.getdatabaseinstance",{"_index":578,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.databaseservice.getdatabaseinstance(connection",{"_index":590,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.getconnectionbyid(connectionid",{"_index":588,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.getminandmax",{"_index":1403,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.getnearestneighbor",{"_index":1382,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.jwtservice.sign(accesstokenpayload",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(refreshtokenpayload",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(resettokenpayload",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.literalvaluesrepository.save(literalvaluetosave",{"_index":1222,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.mappedvalues.save(mappedvaluetosave",{"_index":1228,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.normalizebasecases",{"_index":1374,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.normalizefactor",{"_index":1417,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.normalizerow",{"_index":1377,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.parameterizerservice.createnewconnection(body",{"_index":965,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getavailablealgorithms",{"_index":1026,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourcecolumns",{"_index":987,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourceschemas",{"_index":970,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourceselectedcolumns",{"_index":998,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourceselectedcolumnsnewproblem",{"_index":1017,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourceselectedordinalcolumns",{"_index":1007,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.getproblemsourcetables(schema",{"_index":976,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.savenewregistryselectedcolumns(body",{"_index":1022,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemalgorithm(algorithmname",{"_index":1032,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemsource(body",{"_index":982,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemsourcecolumns(sections",{"_index":994,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemsourcecolumnstypes(sections",{"_index":1003,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.parameterizerservice.saveproblemsourceselectedordinalcolumns",{"_index":1013,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["this.problemservice.getavailablealgorithms",{"_index":1110,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.getbasecolumnmappedvalue",{"_index":1420,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.problemservice.getbasecolumnmappedvalues(columnname",{"_index":1390,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.problemservice.getbasecolumnmi(columnname",{"_index":1419,"title":{},"body":{"injectables/SolverService.html":{}}}],["this.problemservice.getproblembeingcreated",{"_index":1071,"title":{},"body":{"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{}}}],["this.problemservice.getproblemsourceselectedcolumns",{"_index":1090,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.getproblemsourceselectedcolumnsnewproblem",{"_index":1108,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.getproblemsourceselectedordinalcolumns(problem",{"_index":1106,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.savenewregistryselectedcolumns",{"_index":1109,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemalgorithm",{"_index":1111,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemsource",{"_index":1085,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemsourcecolumns",{"_index":1089,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemsourcecolumnstypes",{"_index":1105,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemservice.saveproblemsourceselectedordinalcolumns",{"_index":1107,"title":{},"body":{"injectables/ParameterizerService.html":{}}}],["this.problemsrepository.create",{"_index":1196,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.problemsrepository.findone",{"_index":1198,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.problemsrepository.save(problem",{"_index":1197,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.problemsservice.createproblem",{"_index":584,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["this.refreshtokensrepository.create",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokensrepository.delete",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["this.refreshtokensrepository.save(newrefreshtokenentity",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.registriesrepository.save(registry",{"_index":1235,"title":{},"body":{"injectables/ProblemService.html":{}}}],["this.sendgridservice.send(mail",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.solverservice.solve",{"_index":1321,"title":{},"body":{"controllers/SolverController.html":{}}}],["this.tovalidate(metatype",{"_index":1485,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.usersrepository.create(payload",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.createquerybuilder(alias",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone(options",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby(property",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone",{"_index":782,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["this.usersservice.findoneby",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{}}}],["this.usersservice.save(newuser",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.save(user",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParameterizerService.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["token",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["token.strategy",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":772,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{}}}],["token.strategy.ts:14",{"_index":773,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["token.strategy.ts:30",{"_index":775,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["token.ts",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["tokens",{"_index":790,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["tostring",{"_index":733,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["touch",{"_index":1626,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1474,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1476,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":1475,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":1479,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1484,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["transport",{"_index":1299,"title":{},"body":{"injectables/SendgridService.html":{}}}],["transport[0].statuscode",{"_index":1301,"title":{},"body":{"injectables/SendgridService.html":{}}}],["triggerederrors",{"_index":726,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["true",{"_index":20,"title":{},"body":{"entities/Algorithm.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"injectables/JwtStrategyRefreshToken.html":{},"entities/LiteralValue.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"entities/Registry.html":{},"entities/User.html":{}}}],["try",{"_index":695,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/SendgridService.html":{}}}],["twitter",{"_index":1632,"title":{},"body":{"index.html":{}}}],["type",{"_index":12,"title":{},"body":{"entities/Algorithm.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseCaseColumn.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"injectables/ConnectionService.html":{},"classes/CreateConnectionOptionsDto.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"entities/LiteralValue.html":{},"injectables/LocalStrategy.html":{},"entities/MappedValue.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"entities/Registry.html":{},"interfaces/RemoteBaseCasesConnection.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/SendgridService.html":{},"injectables/SolverService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["typeof",{"_index":1404,"title":{},"body":{"injectables/SolverService.html":{}}}],["typeorm",{"_index":34,"title":{},"body":{"entities/Algorithm.html":{},"classes/AlgorithmsRepository.html":{},"entities/BaseCaseColumn.html":{},"classes/BaseCaseColumns.html":{},"entities/Connection.html":{},"injectables/ConnectionService.html":{},"classes/ConnectionsRepository.html":{},"entities/LiteralValue.html":{},"classes/LiteralValuesRepository.html":{},"entities/MappedValue.html":{},"classes/MappedValuesRepository.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"classes/ProblemsRepository.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/Registry.html":{},"entities/User.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/ProblemModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":1139,"title":{},"body":{"modules/ProblemModule.html":{}}}],["typeormmodule.forfeature([connection",{"_index":518,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["typeormmodule.forfeature([refreshtoken",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1442,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":884,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ValidationPipe.html":{}}}],["types.dto",{"_index":899,"title":{},"body":{"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["types.dto.ts",{"_index":1276,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{},"coverage.html":{}}}],["types.dto.ts:12",{"_index":1280,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["types.dto.ts:14",{"_index":1281,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["types.dto.ts:5",{"_index":1282,"title":{},"body":{"classes/SaveProblemSourceColumnsTypeDto.html":{}}}],["types.includes(metatype",{"_index":1509,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.ts",{"_index":1543,"title":{},"body":{"coverage.html":{}}}],["typescript",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["unauthorized",{"_index":746,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception",{"_index":742,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":27,"title":{},"body":{"entities/Algorithm.html":{},"entities/BaseCaseColumn.html":{},"injectables/ValidationPipe.html":{}}}],["unit",{"_index":1604,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SolverService.html":{},"injectables/ValidationPipe.html":{}}}],["unlicensed",{"_index":1645,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["up",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["up.ts",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["update",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["upper",{"_index":723,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["usefactory",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["useguards(jwtauthguard",{"_index":958,"title":{},"body":{"controllers/ParameterizerController.html":{}}}],["useguards(jwtrefreshauthguard",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtresetauthguard",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":97,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Connection.html":{},"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"injectables/DatabaseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtBaseAuthGuard.html":{},"injectables/JwtRefreshAuthGuard.html":{},"injectables/JwtResetAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"interfaces/NewRegistry.html":{},"controllers/ParameterizerController.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"entities/Problem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/RefreshToken.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.clientrefreshtoken",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.connections",{"_index":502,"title":{},"body":{"entities/Connection.html":{}}}],["user.dto",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":678,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.entity",{"_index":1440,"title":{},"body":{"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.problems",{"_index":1128,"title":{},"body":{"entities/Problem.html":{}}}],["user.refreshtokens",{"_index":1251,"title":{},"body":{"entities/RefreshToken.html":{}}}],["user.resetpasswordtoken",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userid",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ParameterizerController.html":{}}}],["user_not_found",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"controllers/ParameterizerController.html":{},"injectables/ParameterizerService.html":{}}}],["usermodule",{"_index":79,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"entities/Connection.html":{},"interfaces/ConnectionOptions.html":{},"classes/CreateConnectionOptionsDto.html":{},"injectables/DatabaseService.html":{},"injectables/JwtStrategy.html":{},"controllers/ParameterizerController.html":{}}}],["usernamefield",{"_index":816,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users.service",{"_index":1441,"title":{},"body":{"modules/UserModule.html":{}}}],["users/user.entity",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["usersrepository",{"_index":1443,"title":{"classes/UsersRepository.html":{}},"body":{"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersservice",{"_index":338,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ConnectionService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"coverage.html":{}}}],["valid'})@minlength(8",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":681,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["validate(email",{"_index":814,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(isvalidpassword",{"_index":684,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate(object",{"_index":1489,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(payload",{"_index":757,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["validate(req",{"_index":774,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["validate(text",{"_index":714,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validateuser",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1497,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationarguments",{"_index":711,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validationpipe",{"_index":1472,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validationschema",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":644,"title":{},"body":{"classes/CreateConnectionOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProblemSourceTablesDto.html":{},"classes/IsValidPassword.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"classes/SaveProblemAlgorithmDto.html":{},"classes/SaveProblemSourceColumnsDto.html":{},"classes/SaveProblemSourceColumnsTypeDto.html":{},"classes/SaveProblemSourceDto.html":{},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":717,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validatorconstraintinterface",{"_index":708,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["value",{"_index":623,"title":{},"body":{"injectables/ConnectionService.html":{},"interfaces/CreateNewConnectionResponse.html":{},"interfaces/CreateNewConnectionResponseWithError.html":{},"interfaces/DatabaseInstance.html":{},"entities/LiteralValue.html":{},"interfaces/NewRegistry.html":{},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{},"injectables/ProblemService.html":{},"interfaces/ProblemSource.html":{},"interfaces/ProblemSourceColumn.html":{},"interfaces/ProblemSourceMappedColumns.html":{},"interfaces/ProblemSourceSchema.html":{},"interfaces/ProblemSourceTable.html":{},"entities/Registry.html":{},"classes/SaveNewRegistrySelectedColumnsDto.html":{},"interfaces/SaveProblemSourceColumnsType.html":{},"injectables/ValidationPipe.html":{}}}],["value.entity",{"_index":478,"title":{},"body":{"entities/BaseCaseColumn.html":{},"classes/LiteralValuesRepository.html":{},"classes/MappedValuesRepository.html":{},"modules/ProblemModule.html":{},"injectables/ProblemService.html":{}}}],["value.entity.ts",{"_index":799,"title":{},"body":{"entities/LiteralValue.html":{},"entities/MappedValue.html":{},"coverage.html":{}}}],["value.entity.ts:10",{"_index":823,"title":{},"body":{"entities/MappedValue.html":{}}}],["value.entity.ts:14",{"_index":801,"title":{},"body":{"entities/LiteralValue.html":{}}}],["value.entity.ts:15",{"_index":821,"title":{},"body":{"entities/MappedValue.html":{}}}],["value.entity.ts:6",{"_index":822,"title":{},"body":{"entities/MappedValue.html":{}}}],["value.entity.ts:7",{"_index":802,"title":{},"body":{"entities/LiteralValue.html":{}}}],["value.entity.ts:8",{"_index":824,"title":{},"body":{"entities/MappedValue.html":{}}}],["value.entity.ts:9",{"_index":803,"title":{},"body":{"entities/LiteralValue.html":{}}}],["values",{"_index":618,"title":{},"body":{"injectables/ConnectionService.html":{}}}],["values.repository",{"_index":1187,"title":{},"body":{"injectables/ProblemService.html":{}}}],["values.repository.ts",{"_index":807,"title":{},"body":{"classes/LiteralValuesRepository.html":{},"classes/MappedValuesRepository.html":{},"coverage.html":{}}}],["variable",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["vars",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1643,"title":{},"body":{"properties.html":{}}}],["void",{"_index":1344,"title":{},"body":{"injectables/SolverService.html":{}}}],["watch",{"_index":1600,"title":{},"body":{"index.html":{}}}],["website",{"_index":1630,"title":{},"body":{"index.html":{}}}],["world",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":1620,"title":{},"body":{"index.html":{}}}],["z",{"_index":675,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/DatabaseModule.html":{},"modules/ParameterizerModule.html":{},"modules/ProblemModule.html":{},"modules/SendgridModule.html":{},"modules/SolverModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Algorithm.html":{"url":"entities/Algorithm.html","title":"entity - Algorithm","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Algorithm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/algorithm.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                problems\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/algorithm.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/algorithm.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, problem => problem.algorithm)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/algorithm.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({enum: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/algorithm.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Problem } from './problem.entity';\n\n@Entity()\nexport class Algorithm {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  name: string;\n  @Column({ enum: ['ordinal', 'boolean', 'numeric'], nullable: true })\n  type: string;\n  @OneToMany(() => Problem, (problem) => problem.algorithm)\n  problems: Problem;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlgorithmsRepository.html":{"url":"classes/AlgorithmsRepository.html","title":"class - AlgorithmsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlgorithmsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/algorithms.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { Algorithm } from '../entities/algorithm.entity';\n\nexport class AlgorithmsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConnectionModule\n\nConnectionModule\n\nAppModule -->\n\nConnectionModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nParameterizerModule\n\nParameterizerModule\n\nAppModule -->\n\nParameterizerModule->AppModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nAppModule -->\n\nProblemModule->AppModule\n\n\n\n\n\nSendgridModule\n\nSendgridModule\n\nAppModule -->\n\nSendgridModule->AppModule\n\n\n\n\n\nSolverModule\n\nSolverModule\n\nAppModule -->\n\nSolverModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSendgridService\n\nSendgridService\n\nAppModule -->\n\nSendgridService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            SendgridService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConnectionModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ParameterizerModule\n                        \n                        \n                            ProblemModule\n                        \n                        \n                            SendgridModule\n                        \n                        \n                            SolverModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as Joi from 'joi';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { RefreshToken } from './auth/refreshToken.entity';\nimport { User } from './users/user.entity';\nimport { UserModule } from './users/users.module';\nimport { SendgridService } from './sendgrid/sendgrid.service';\nimport { SendgridModule } from './sendgrid/sendgrid.module';\nimport { DatabaseModule } from './database/database.module';\nimport { ParameterizerModule } from './parameterizer/parameterizer.module';\nimport { ProblemModule } from './problem/problem.module';\nimport { Problem } from './problem/entities/problem.entity';\nimport { ConnectionModule } from './connection/connection.module';\nimport { Connection } from './connection/connection.entity';\nimport { SolverModule } from './solver/solver.module';\n\n@Module({\n  imports: [\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: Joi.object({\n        DB_HOST: Joi.string().required().default('localhost'),\n        DB_PORT: Joi.number().required().default(5432),\n        DB_USER: Joi.string().required().default('admin'),\n        DB_PASSWORD: Joi.string().required(),\n        DB_NAME: Joi.string().required().default('reasoner'),\n      }),\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USER'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [User, RefreshToken, Connection, Problem],\n        synchronize: true,\n        autoLoadEntities: true,\n      }),\n    }),\n    UserModule,\n    SendgridModule,\n    DatabaseModule,\n    ParameterizerModule,\n    ProblemModule,\n    ConnectionModule,\n    SolverModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, SendgridService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfLoggedIn\n                            \n                            \n                                    Async\n                                recoverPassword\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfLoggedIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfLoggedIn(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('check-if-logged-in')@UseGuards(JwtRefreshAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recoverPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    recoverPassword(email: string, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(recovePasswordDescription)@ApiResponse(recoverPasswordSuccessfulResponse)@ApiResponse(recoverPasswordBadRequest)@Get('recover-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(refreshTokenDescription)@ApiResponse(refreshTokenSuccessfulResponse)@ApiResponse(refreshTokenUnauthorizedResponse)@UseGuards(JwtRefreshAuthGuard)@Get('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(password: string, resetPasswordToken: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(resetPasswordDescription)@ApiResponse(resetPasswordSuccessfulResponse)@ApiResponse(resetPasswordUnauthorizedResponse)@ApiBody(resetPasswordCorrectPayload)@UseGuards(JwtResetAuthGuard)@Patch('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resetPasswordToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(signInDescription)@ApiResponse(signInSuccessfulResponse)@ApiResponse(signInUnauthorizedResponse)@ApiBody(signInCorrectPayload)@UseGuards(LocalAuthGuard)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(body: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(signUpDescription)@ApiResponse(signUpSuccessfulResponse)@ApiResponse(signUpBadRequestResponse)@ApiBody(signUpCorrectPayload)@Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Patch,\n  Post,\n  Query,\n  Request,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ApiBody, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { Response, Request as RequestType } from 'express';\nimport { User } from 'src/users/user.entity';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from './create-user.dto';\nimport { JwtRefreshAuthGuard, JwtResetAuthGuard } from './jwt-auth.guard';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport * as SendGrid from '@sendgrid/mail';\nimport {\n  refreshTokenDescription,\n  refreshTokenSuccessfulResponse,\n  refreshTokenUnauthorizedResponse,\n} from './swagger/refresh-token';\nimport {\n  signInCorrectPayload,\n  signInDescription,\n  signInSuccessfulResponse,\n  signInUnauthorizedResponse,\n} from './swagger/sign-in';\nimport {\n  signUpBadRequestResponse,\n  signUpCorrectPayload,\n  signUpDescription,\n  signUpSuccessfulResponse,\n} from './swagger/sign-up';\nimport {\n  recovePasswordDescription,\n  recoverPasswordBadRequest,\n  recoverPasswordSuccessfulResponse,\n} from './swagger/recover-password';\nimport {\n  resetPasswordCorrectPayload,\n  resetPasswordDescription,\n  resetPasswordSuccessfulResponse,\n  resetPasswordUnauthorizedResponse,\n} from './swagger/reset-password';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private configService: ConfigService,\n  ) {}\n\n  @ApiOperation(signUpDescription)\n  @ApiResponse(signUpSuccessfulResponse)\n  @ApiResponse(signUpBadRequestResponse)\n  @ApiBody(signUpCorrectPayload)\n  @Post('sign-up')\n  async signUp(@Body() body: CreateUserDto): Promise;\n  }> {\n    const { resource } = await this.authService.signUp(body);\n\n    return { error: null, resource };\n  }\n\n  @ApiOperation(signInDescription)\n  @ApiResponse(signInSuccessfulResponse)\n  @ApiResponse(signInUnauthorizedResponse)\n  @ApiBody(signInCorrectPayload)\n  @UseGuards(LocalAuthGuard)\n  @Post('sign-in')\n  async signIn(\n    @Request() req: RequestType & { user: User },\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const { resource } = await this.authService.signIn(req.user);\n    const { refreshToken, ...rest } = resource;\n    response.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      domain: this.configService.get('FRONTEND_DOMAIN'),\n      maxAge: 1000 * 60 * 60 * 24 * 30,\n    });\n    response.status(202).json({ error: null, resource: rest });\n  }\n\n  @ApiOperation(refreshTokenDescription)\n  @ApiResponse(refreshTokenSuccessfulResponse)\n  @ApiResponse(refreshTokenUnauthorizedResponse)\n  @UseGuards(JwtRefreshAuthGuard)\n  @Get('refresh-token')\n  async refreshToken(\n    @Request()\n    req: RequestType & {\n      user: { userId: string; clientRefreshToken: string };\n    } & {\n      error: { code: string; detail: string };\n    },\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const { user } = req;\n    response.clearCookie('refreshToken', {\n      httpOnly: true,\n      sameSite: 'none',\n      secure: true,\n    });\n    if (req.error) {\n      // if reuse detected\n      return response.status(401).json(req.error);\n    }\n    const { resource } = await this.authService.refreshToken(\n      user.userId,\n      user.clientRefreshToken,\n    );\n    const { refreshToken, ...rest } = resource;\n    response.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      domain: this.configService.get('FRONTEND_DOMAIN'),\n      maxAge: 1000 * 60 * 60 * 24 * 30,\n    });\n    response.status(202).json({ error: null, resource: rest });\n  }\n\n  @Get('check-if-logged-in')\n  @UseGuards(JwtRefreshAuthGuard)\n  async checkIfLoggedIn(\n    @Request()\n    req: RequestType & {\n      user: { userId: string; clientRefreshToken: string };\n    } & {\n      error: { code: string; detail: string };\n    },\n  ): Promise {\n    return { error: null, resource: { userId: req.user.userId } };\n  }\n\n  @ApiOperation(recovePasswordDescription)\n  @ApiResponse(recoverPasswordSuccessfulResponse)\n  @ApiResponse(recoverPasswordBadRequest)\n  @Get('recover-password')\n  async recoverPassword(\n    @Query('email') email: string,\n    @Res() response: Response,\n  ): Promise {\n    const { statusCode, error, resource } =\n      await this.authService.recoverPassword(email);\n    response.status(statusCode).json(error ?? resource);\n    return;\n  }\n\n  @ApiOperation(resetPasswordDescription)\n  @ApiResponse(resetPasswordSuccessfulResponse)\n  @ApiResponse(resetPasswordUnauthorizedResponse)\n  @ApiBody(resetPasswordCorrectPayload)\n  @UseGuards(JwtResetAuthGuard)\n  @Patch('reset-password')\n  async resetPassword(\n    @Body('password') password: string,\n    @Query('token') resetPasswordToken: string,\n    @Request()\n    req: RequestType & { user: { userId: string; resetPasswordToken: string } },\n  ): Promise | null;\n  }> {\n    const { user } = req;\n    const { resource } = await this.authService.resetPassword(\n      user.userId,\n      password,\n      resetPasswordToken,\n    );\n    return { resource };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSendgridModule\n\nSendgridModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSendgridModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nJwtStrategyRefreshToken\n\nJwtStrategyRefreshToken\n\nAuthModule -->\n\nJwtStrategyRefreshToken->AuthModule\n\n\n\n\n\nJwtStrategyResetPassword\n\nJwtStrategyResetPassword\n\nAuthModule -->\n\nJwtStrategyResetPassword->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtStrategyRefreshToken\n                        \n                        \n                            JwtStrategyResetPassword\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SendgridModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SendgridModule } from 'src/sendgrid/sendgrid.module';\nimport { UserModule } from 'src/users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategyRefreshToken } from './jwt-refresh-token.strategy';\nimport { JwtStrategyResetPassword } from './jwt-reset-password.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { RefreshToken } from './refreshToken.entity';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule,\n    TypeOrmModule.forFeature([RefreshToken]),\n    SendgridModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategyRefreshToken,\n    JwtStrategyResetPassword,\n    JwtStrategy,\n    RefreshTokensRepository,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewAccessToken\n                            \n                            \n                                    Async\n                                createNewRefreshToken\n                            \n                            \n                                    Async\n                                recoverPassword\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService, sendgridService: SendgridService, refreshTokensRepository: RefreshTokensRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sendgridService\n                                                  \n                                                        \n                                                                        SendgridService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensRepository\n                                                  \n                                                        \n                                                                        RefreshTokensRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createNewAccessToken\n                        \n                    \n                \n            \n            \n                \ncreateNewAccessToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewRefreshToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recoverPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    recoverPassword(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(userId: string, newPassword: string, clientResetPasswordToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientResetPasswordToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { SendgridService } from 'src/sendgrid/sendgrid.service';\nimport { User } from 'src/users/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { RefreshToken } from './refreshToken.entity';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\nimport * as SendGrid from '@sendgrid/mail';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private sendgridService: SendgridService,\n    @InjectRepository(RefreshToken)\n    private refreshTokensRepository: RefreshTokensRepository,\n  ) {}\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOneBy({ email });\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async signUp({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }): Promise | null;\n  }> {\n    const user = await this.usersService.findOneBy({ email });\n    if (user) {\n      throw new BadRequestException({\n        error: {\n          code: 'email_already_exists',\n          detail: 'email already exists',\n        },\n        resource: null,\n      });\n    }\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n    const newUser = this.usersService.create({\n      email,\n      password: hashedPassword,\n    });\n    await this.usersService.save(newUser);\n    return { resource: { id: newUser.id, email: newUser.email } };\n  }\n\n  async createNewRefreshToken(user: User): Promise {\n    const refreshTokenPayload = {\n      sub: user.id,\n    };\n    const newRefreshToken = this.jwtService.sign(refreshTokenPayload, {\n      expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION_TIME'),\n      secret: this.configService.get('JWT_REFRESH_SECRET'),\n    });\n    const salt = await bcrypt.genSalt();\n    const hashedToken = await bcrypt.hash(newRefreshToken, salt);\n    const newRefreshTokenEntity = this.refreshTokensRepository.create({\n      user,\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      refreshToken: hashedToken,\n    });\n    await this.refreshTokensRepository.save(newRefreshTokenEntity);\n    return newRefreshToken;\n  }\n\n  createNewAccessToken(user: User): string {\n    const accessTokenPayload = { email: user.email, sub: user.id };\n    const newAccessToken = this.jwtService.sign(accessTokenPayload, {\n      expiresIn: this.configService.get('JWT_ACCESS_EXPIRATION_TIME'),\n      secret: this.configService.get('JWT_ACCESS_SECRET'),\n    });\n    return newAccessToken;\n  }\n\n  async signIn(user: User): Promise {\n    const newAccessToken = this.createNewAccessToken(user);\n    const newRefreshToken = await this.createNewRefreshToken(user);\n    return {\n      error: null,\n      resource: {\n        accessToken: newAccessToken,\n        refreshToken: newRefreshToken,\n      },\n    };\n  }\n\n  async refreshToken(\n    userId: string,\n    refreshToken: string,\n  ): Promise {\n    // as we are using RTR, we must delete the specific refreshToken from the database\n    await this.refreshTokensRepository.delete({\n      refreshToken,\n    });\n    const user = await this.usersService.findOneBy({ id: userId });\n    const newAccessToken = this.createNewAccessToken(user);\n    const newRefreshToken = await this.createNewRefreshToken(user);\n    return {\n      resource: {\n        accessToken: newAccessToken,\n        refreshToken: newRefreshToken,\n      },\n    };\n  }\n\n  async recoverPassword(email: string): Promise;\n  }> {\n    const user = await this.usersService.findOneBy({ email });\n    if (!user) {\n      throw new BadRequestException({\n        error: {\n          code: 'user_not_found',\n          detail: 'user not found',\n        },\n      });\n    }\n    const resetTokenPayload = { sub: user.id };\n    const resetToken = this.jwtService.sign(resetTokenPayload, {\n      secret: this.configService.get('JWT_RESET_PASSWORD_SECRET'),\n      expiresIn: this.configService.get('JWT_RESET_PASSWORD_EXPIRATION_TIME'),\n    });\n    const salt = await bcrypt.genSalt();\n    const hashedResetToken = await bcrypt.hash(resetToken, salt);\n    user.resetPasswordToken = hashedResetToken;\n    await this.usersService.save(user); // update if the user exists\n    const mail: SendGrid.MailDataRequired = {\n      to: email,\n      from: 'hrivera@unal.edu.co',\n      subject: 'Password recovery',\n      templateId: 'd-7a7e65ab6bf44627bea5758e97fbb969',\n      personalizations: [\n        {\n          to: [\n            {\n              email,\n            },\n          ],\n          dynamicTemplateData: {\n            link: `${this.configService.get(\n              'FRONTEND_URL',\n            )}/auth/password/reset?token=${resetToken}`,\n          },\n        },\n      ],\n    };\n    //eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { templateId, personalizations, ...resource } = mail;\n    const { error, statusCode } = await this.sendgridService.send(mail);\n    return {\n      error,\n      statusCode,\n      resource,\n    };\n  }\n\n  async resetPassword(\n    userId: string,\n    newPassword: string,\n    clientResetPasswordToken: string,\n  ): Promise;\n  }> {\n    const user = await this.usersService.findOneBy({ id: userId });\n    // get out of here motherfucker\n    if (!user) {\n      throw new BadRequestException({\n        error: {\n          code: 'user_not_found',\n          detail: 'user not found',\n        },\n        resource: null,\n      });\n    }\n    if (\n      !(await bcrypt.compare(clientResetPasswordToken, user.resetPasswordToken))\n    ) {\n      throw new BadRequestException({\n        error: {\n          code: 'reset_password_token_invalid_payload',\n          detail: 'reset password token invalid payload',\n        },\n        resource: null,\n      });\n    }\n    // create new hash for the new password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    user.password = hashedPassword;\n\n    user.resetPasswordToken = '';\n    await this.usersService.save(user);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...rest } = user;\n    return {\n      resource: rest,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BaseCaseColumn.html":{"url":"entities/BaseCaseColumn.html","title":"entity - BaseCaseColumn","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BaseCaseColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/base-case-column.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                literalValues\n                            \n                            \n                                mappedValues\n                            \n                            \n                                name\n                            \n                            \n                                problem\n                            \n                            \n                                target\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        literalValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LiteralValue[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, literalValue => literalValue.baseCaseColumn)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mappedValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MappedValue[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, mappedValue => mappedValue.baseCaseColumn)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, problem => problem.columns)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({enum: undefined, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/base-case-column.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { LiteralValue } from './literal-value.entity';\nimport { MappedValue } from './mapped-value.entity';\nimport { Problem } from './problem.entity';\n\n@Entity()\nexport class BaseCaseColumn {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  name: string;\n  @Column({ enum: ['predicting-factors', 'goal-factor'] })\n  target: string;\n  @Column({\n    enum: ['ordinal', 'boolean', 'numeric', 'literal'],\n    nullable: true,\n  })\n  type: string;\n  @ManyToOne(() => Problem, (problem) => problem.columns)\n  problem: Problem;\n  @OneToMany(() => MappedValue, (mappedValue) => mappedValue.baseCaseColumn)\n  mappedValues: MappedValue[];\n  @OneToMany(() => LiteralValue, (literalValue) => literalValue.baseCaseColumn)\n  literalValues: LiteralValue[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseCaseColumns.html":{"url":"classes/BaseCaseColumns.html","title":"class - BaseCaseColumns","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseCaseColumns\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/base-case-column.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { BaseCaseColumn } from '../entities/base-case-column.entity';\n\nexport class BaseCaseColumns extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Connection.html":{"url":"entities/Connection.html","title":"entity - Connection","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Connection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection/connection.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                database\n                            \n                            \n                                host\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                port\n                            \n                            \n                                problems\n                            \n                            \n                                ssl\n                            \n                            \n                                user\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, problem => problem.connection)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ssl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.connections)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/connection/connection.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Problem } from 'src/problem/entities/problem.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Connection {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  host: string;\n  @Column()\n  port: string;\n  @Column()\n  database: string;\n  @Column()\n  username: string;\n  @Column()\n  password: string;\n  @Column()\n  ssl: boolean;\n  @Column({ default: true })\n  current: boolean;\n  @OneToMany(() => Problem, (problem) => problem.connection)\n  problems: Problem[];\n  @ManyToOne(() => User, (user) => user.connections)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConnectionModule.html":{"url":"modules/ConnectionModule.html","title":"module - ConnectionModule","body":"\n                   \n\n\n\n\n    Modules\n    ConnectionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConnectionModule\n\n\n\ncluster_ConnectionModule_exports\n\n\n\ncluster_ConnectionModule_providers\n\n\n\ncluster_ConnectionModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nConnectionModule\n\nConnectionModule\n\nConnectionModule -->\n\nDatabaseModule->ConnectionModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nConnectionModule -->\n\nProblemModule->ConnectionModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nConnectionModule -->\n\nUserModule->ConnectionModule\n\n\n\n\n\nConnectionService \n\nConnectionService \n\nConnectionService  -->\n\nConnectionModule->ConnectionService \n\n\n\n\n\nConnectionService\n\nConnectionService\n\nConnectionModule -->\n\nConnectionService->ConnectionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/connection/connection.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConnectionService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            ProblemModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConnectionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { ProblemModule } from 'src/problem/problem.module';\nimport { UserModule } from 'src/users/users.module';\nimport { Connection } from './connection.entity';\nimport { ConnectionService } from './connection.service';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    UserModule,\n    ProblemModule,\n    TypeOrmModule.forFeature([Connection]),\n  ],\n  providers: [ConnectionService],\n  exports: [ConnectionService],\n})\nexport class ConnectionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConnectionOptions.html":{"url":"interfaces/ConnectionOptions.html","title":"interface - ConnectionOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConnectionOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection/connection-options.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            database\n                                        \n                                \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            ssl\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        database:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ssl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ssl:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ConnectionOptions {\n  id: string;\n\n  host: string;\n\n  port: string;\n\n  database: string;\n\n  username: string;\n\n  password: string;\n\n  ssl: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConnectionService.html":{"url":"injectables/ConnectionService.html","title":"injectable - ConnectionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConnectionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection/connection.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfSourceExists\n                            \n                            \n                                    Async\n                                createConnection\n                            \n                            \n                                    Async\n                                getAllRows\n                            \n                            \n                                    Async\n                                getConnectionById\n                            \n                            \n                                    Async\n                                getCurrentProblemSourceColumns\n                            \n                            \n                                    Async\n                                getNumericColumnMinMax\n                            \n                            \n                                    Async\n                                getProblemSourceDistinctValues\n                            \n                            \n                                    Async\n                                getProblemSourceSchemas\n                            \n                            \n                                    Async\n                                getProblemSourceTables\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, usersService: UsersService, connectionsRepository: Repository, problemsService: ProblemService)\n                    \n                \n                        \n                            \n                                Defined in src/connection/connection.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connectionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        problemsService\n                                                  \n                                                        \n                                                                        ProblemService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfSourceExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfSourceExists(problemSource: ProblemSource, connectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problemSource\n                                    \n                                                ProblemSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    connectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConnection(databaseMetaData: Partial, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    databaseMetaData\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllRows\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllRows(connection: Connection, table: string, schema: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    table\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConnectionById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionById(connectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCurrentProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentProblemSourceColumns(connection: Connection, table: string, schema: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    table\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNumericColumnMinMax\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNumericColumnMinMax(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceDistinctValues\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceDistinctValues(connection: Connection, table: string, schema: string, columnNames: literal type[])\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    table\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    columnNames\n                                    \n                                            literal type[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSchemas\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSchemas(connection: Connection)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceTables\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceTables(connection: Connection, schema: string)\n                \n            \n\n\n            \n                \n                    Defined in src/connection/connection.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DatabaseService } from 'src/database/database.service';\nimport {\n  CreateNewConnectionResponseWithError,\n  ProblemSource,\n  ProblemSourceColumn,\n  ProblemSourceSchema,\n  ProblemSourceTable,\n} from 'src/parameterizer/parameterizer.types';\nimport { ProblemService } from 'src/problem/problem.service';\nimport { UsersService } from 'src/users/users.service';\nimport { Repository } from 'typeorm';\nimport { ConnectionOptions } from './connection-options.interface';\nimport { Connection } from './connection.entity';\n\n@Injectable()\nexport class ConnectionService {\n  constructor(\n    private databaseService: DatabaseService,\n    private usersService: UsersService,\n    @InjectRepository(Connection)\n    private connectionsRepository: Repository,\n    private problemsService: ProblemService,\n  ) {}\n\n  async getConnectionById(connectionId: string): Promise {\n    const connection = await this.connectionsRepository.findOneBy({\n      id: connectionId,\n    });\n\n    if (!connection) {\n      throw new NotFoundException({\n        error: {\n          code: 'connection_not_found',\n          message: 'Connection not found',\n        },\n        resource: null,\n      });\n    }\n    return connection;\n  }\n\n  async createConnection(\n    databaseMetaData: Partial,\n    userId: string,\n  ): Promise {\n    const { error } = await this.databaseService.getDatabaseInstance(\n      databaseMetaData,\n    );\n    if (error) {\n      return { error, resource: null };\n    }\n    const connection = this.connectionsRepository.create(databaseMetaData);\n    const user = await this.usersService.findOneBy({ id: userId });\n    const { user: _, ...connectionEntity } =\n      await this.connectionsRepository.save({\n        user,\n        ...connection,\n      });\n    const newProblem = await this.problemsService.createProblem(\n      connectionEntity,\n      user,\n    );\n    return {\n      resource: {\n        connection,\n        problem: {\n          connection: { id: newProblem.connection.id },\n          user: { id: newProblem.user.id },\n          id: newProblem.id,\n        },\n      },\n      error: null,\n    };\n  }\n\n  async checkIfSourceExists(\n    problemSource: ProblemSource,\n    connectionId: string,\n  ): Promise {\n    const connection = await this.getConnectionById(connectionId);\n    const { schema, table } = problemSource;\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT EXISTS (\n          SELECT 1\n          FROM information_schema.tables\n          WHERE table_schema = '${schema}'\n          AND table_name = '${table}'\n        );`,\n      );\n      return rows[0].exists;\n    }\n    return false;\n  }\n\n  async getProblemSourceSchemas(\n    connection: Connection,\n  ): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT schema_name\n        FROM information_schema.schemata\n        WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast');`,\n      );\n      return rows.map((row) => ({\n        schemaName: row.schema_name,\n      }));\n    }\n    return null;\n  }\n\n  async getProblemSourceTables(\n    connection: Connection,\n    schema: string,\n  ): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT table_name\n        FROM information_schema.tables\n        WHERE table_schema = '${schema}';`,\n      );\n      return rows.map((row) => ({ tableName: row.table_name }));\n    }\n    return [];\n  }\n\n  async getCurrentProblemSourceColumns(\n    connection: Connection,\n    table: string,\n    schema: string,\n  ): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT column_name FROM information_schema.columns WHERE table_name = '${table}' AND table_schema = '${schema}';`,\n      );\n      return rows.map((row) => ({ columnName: row.column_name }));\n    }\n    return [];\n  }\n\n  async getProblemSourceDistinctValues(\n    connection: Connection,\n    table: string,\n    schema: string,\n    columnNames: { columnName: string }[],\n  ): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    const columns = [];\n    if (!error) {\n      for (const { columnName } of columnNames) {\n        const { rows } = await db.query(\n          `SELECT DISTINCT ${columnName} FROM ${schema}.${table};`,\n        );\n        columns.push({\n          columnName,\n          values: rows.map((row) => row[columnName]),\n        });\n      }\n    }\n    return columns;\n  }\n\n  async getAllRows(\n    connection: Connection,\n    table: string,\n    schema: string,\n  ): Promise[]> {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(`SELECT * FROM ${schema}.${table};`);\n      return rows.map((row) => {\n        const newRow = {};\n        for (const [key, value] of Object.entries(row)) {\n          newRow[key] = value;\n        }\n        return newRow;\n      });\n    }\n    return [];\n  }\n\n  async getNumericColumnMinMax({\n    connection,\n    table,\n    schema,\n    columnName,\n  }: {\n    connection: Connection;\n    table: string;\n    schema: string;\n    columnName: string;\n  }): Promise {\n    const { resource: db, error } =\n      await this.databaseService.getDatabaseInstance(connection);\n    if (!error) {\n      const { rows } = await db.query(\n        `SELECT MIN(${columnName}) AS min, MAX(${columnName}) AS max FROM ${schema}.${table};`,\n      );\n      return { resource: { min: rows[0].min, max: rows[0].max } };\n    }\n    return { resource: null };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConnectionsRepository.html":{"url":"classes/ConnectionsRepository.html","title":"class - ConnectionsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConnectionsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection/connections.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { Connection } from './connection.entity';\n\nexport class ConnectionsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConnectionOptionsDto.html":{"url":"classes/CreateConnectionOptionsDto.html","title":"class - CreateConnectionOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConnectionOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/create-connection-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                database\n                            \n                            \n                                host\n                            \n                            \n                                password\n                            \n                            \n                                port\n                            \n                            \n                                ssl\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ssl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/create-connection-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsString } from 'class-validator';\n\nexport class CreateConnectionOptionsDto {\n  @IsString()\n  host: string;\n\n  @IsString()\n  port: string;\n\n  @IsString()\n  database: string;\n\n  @IsString()\n  username: string;\n\n  @IsString()\n  password: string;\n\n  @IsBoolean()\n  ssl: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateNewConnectionResponse.html":{"url":"interfaces/CreateNewConnectionResponse.html","title":"interface - CreateNewConnectionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateNewConnectionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            resource\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resource:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateNewConnectionResponseWithError.html":{"url":"interfaces/CreateNewConnectionResponseWithError.html","title":"interface - CreateNewConnectionResponseWithError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateNewConnectionResponseWithError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateNewConnectionResponse\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'email is not valid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'password is not valid'})@MinLength(8, {message: 'the password should have at least $constraint1 characters '})@MaxLength(14, {message: 'the password should not exceed the maximum of $constraint1 characters'})@Validate(IsValidPassword, ['/[a-z]/', '/[A-Z]/', '/[!@*\"#$%&\\/()=]/', '/[0-9]/'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { IsValidPassword } from './is-valid-password';\n\nexport class CreateUserDto {\n  @IsEmail({}, { message: 'email is not valid' })\n  email: string;\n  @IsString({ message: 'password is not valid' })\n  @MinLength(8, {\n    message: 'the password should have at least $constraint1 characters ',\n  })\n  @MaxLength(14, {\n    message:\n      'the password should not exceed the maximum of $constraint1 characters',\n  })\n  @Validate(IsValidPassword, [/[a-z]/, /[A-Z]/, /[!@*\"#$%&\\/()=]/, /[0-9]/])\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseInstance.html":{"url":"interfaces/DatabaseInstance.html","title":"interface - DatabaseInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            resource\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resource\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resource:     Client\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Client\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_DatabaseModule_exports\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from './database.service';\n\n@Module({\n  providers: [DatabaseService],\n  exports: [DatabaseService],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDatabaseInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatabaseInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatabaseInstance(options: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Client } from 'pg';\nimport { ConnectionOptions } from 'src/connection/connection-options.interface';\nimport { DatabaseInstance } from 'src/parameterizer/parameterizer.types';\n\n@Injectable()\nexport class DatabaseService {\n  async getDatabaseInstance(\n    options: Partial,\n  ): Promise {\n    const { username, port, ...rest } = options;\n    const client = new Client({ ...rest, user: username, port: Number(port) });\n    try {\n      await client.connect();\n      return { resource: client, error: null };\n    } catch (err) {\n      return {\n        resource: null,\n        error: { code: 'connection_refused', detail: 'Connection refused' },\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProblemSourceTablesDto.html":{"url":"classes/GetProblemSourceTablesDto.html","title":"class - GetProblemSourceTablesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProblemSourceTablesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/get-problem-source-tables.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                schema\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/get-problem-source-tables.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class GetProblemSourceTablesDto {\n  @IsString()\n  schema: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsValidPassword.html":{"url":"classes/IsValidPassword.html","title":"class - IsValidPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsValidPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/is-valid-password.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/is-valid-password.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/is-valid-password.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n@ValidatorConstraint({ name: 'IsValidPassword', async: false })\nexport class IsValidPassword implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments) {\n    return args.constraints.every((pattern) => pattern.test(text));\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    const messages = [\n      'the password should has at least one lower case',\n      'the password should has at least one upper case',\n      'the password should has at least one special character',\n      'the password should has at least one number',\n    ];\n    const triggeredErrors = args.constraints\n      .map((pattern, index) => {\n        const testPassed = pattern.test(args.value);\n        if (!testPassed) {\n          return messages[index];\n        }\n        return null;\n      })\n      .filter(Boolean)\n      .toString();\n    return triggeredErrors;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nconst customResponse = (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n};\n@Injectable()\nexport class JwtBaseAuthGuard extends AuthGuard() {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtResetAuthGuard extends AuthGuard('jwt-reset-password') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh-token') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtBaseAuthGuard.html":{"url":"injectables/JwtBaseAuthGuard.html","title":"injectable - JwtBaseAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtBaseAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nconst customResponse = (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n};\n@Injectable()\nexport class JwtBaseAuthGuard extends AuthGuard() {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtResetAuthGuard extends AuthGuard('jwt-reset-password') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh-token') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshAuthGuard.html":{"url":"injectables/JwtRefreshAuthGuard.html","title":"injectable - JwtRefreshAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nconst customResponse = (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n};\n@Injectable()\nexport class JwtBaseAuthGuard extends AuthGuard() {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtResetAuthGuard extends AuthGuard('jwt-reset-password') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh-token') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtResetAuthGuard.html":{"url":"injectables/JwtResetAuthGuard.html","title":"injectable - JwtResetAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtResetAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nconst customResponse = (info: any) => {\n  if (info && info.message) {\n    throw new UnauthorizedException({\n      error: {\n        code: 'unauthorized',\n        detail: info.message,\n      },\n    });\n  }\n};\n@Injectable()\nexport class JwtBaseAuthGuard extends AuthGuard() {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtResetAuthGuard extends AuthGuard('jwt-reset-password') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh-token') {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    customResponse(info);\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategyRefreshToken.html":{"url":"injectables/JwtStrategyRefreshToken.html","title":"injectable - JwtStrategyRefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategyRefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService, refreshTokensRepository: RefreshTokensRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-refresh-token.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensRepository\n                                                  \n                                                        \n                                                                        RefreshTokensRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-refresh-token.strategy.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class JwtStrategyRefreshToken extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n    private refreshTokensRepository: RefreshTokensRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (req: Request) => req.cookies.refreshToken,\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: Request, payload: any) {\n    const clientRefreshToken = req.cookies?.refreshToken;\n    const foundUser = await this.usersService.findOne({\n      where: {\n        id: payload.sub,\n      },\n      relations: ['refreshTokens'],\n    });\n    const refreshTokenMatch = foundUser.refreshTokens.some(({ refreshToken }) =>\n      bcrypt.compare(clientRefreshToken, refreshToken),\n    );\n    // Detected refresh token reuse we should remove all existing refresh tokens\n    if (!refreshTokenMatch) {\n      await this.refreshTokensRepository.delete({\n        user: foundUser,\n      });\n      return {\n        error: {\n          code: 'refresh_token_hacked',\n          detail: 'refresh token was hacked',\n        },\n        resource: null,\n      };\n    }\n    return {\n      userId: payload.sub,\n      clientRefreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategyResetPassword.html":{"url":"injectables/JwtStrategyResetPassword.html","title":"injectable - JwtStrategyResetPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategyResetPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-reset-password.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-reset-password.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-reset-password.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategyResetPassword extends PassportStrategy(\n  Strategy,\n  'jwt-reset-password',\n) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromUrlQueryParameter('token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_RESET_PASSWORD_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      userId: payload.sub,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LiteralValue.html":{"url":"entities/LiteralValue.html","title":"entity - LiteralValue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LiteralValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/literal-value.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                baseCaseColumn\n                            \n                            \n                                id\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        baseCaseColumn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseCaseColumn\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, baseCaseColumn => baseCaseColumn.literalValues)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/literal-value.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/literal-value.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/literal-value.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BaseCaseColumn } from './base-case-column.entity';\n\n@Entity()\nexport class LiteralValue {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  value: string;\n  @ManyToOne(\n    () => BaseCaseColumn,\n    (baseCaseColumn) => baseCaseColumn.literalValues,\n  )\n  baseCaseColumn: BaseCaseColumn;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LiteralValuesRepository.html":{"url":"classes/LiteralValuesRepository.html","title":"class - LiteralValuesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LiteralValuesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/literal-values.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { LiteralValue } from '../entities/literal-value.entity';\n\nexport class LiteralValuesRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { User } from 'src/users/user.entity';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise> {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException({\n        error: { code: 'unauthorized', detail: 'Invalid credentials' },\n      });\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MappedValue.html":{"url":"entities/MappedValue.html","title":"entity - MappedValue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MappedValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/mapped-value.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                baseCaseColumn\n                            \n                            \n                                id\n                            \n                            \n                                mappedValue\n                            \n                            \n                                ordinalValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        baseCaseColumn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseCaseColumn\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, baseCaseColumn => baseCaseColumn.mappedValues)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/mapped-value.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/mapped-value.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mappedValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/mapped-value.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ordinalValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/mapped-value.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BaseCaseColumn } from './base-case-column.entity';\n@Entity()\nexport class MappedValue {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  ordinalValue: string;\n  @Column()\n  mappedValue: number;\n  @ManyToOne(\n    () => BaseCaseColumn,\n    (baseCaseColumn) => baseCaseColumn.mappedValues,\n  )\n  baseCaseColumn: BaseCaseColumn;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MappedValuesRepository.html":{"url":"classes/MappedValuesRepository.html","title":"class - MappedValuesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MappedValuesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/mapped-values.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { MappedValue } from '../entities/mapped-value.entity';\n\nexport class MappedValuesRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NewRegistry.html":{"url":"interfaces/NewRegistry.html","title":"interface - NewRegistry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NewRegistry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            columnName\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columnName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columnName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ParameterizerController.html":{"url":"controllers/ParameterizerController.html","title":"controller - ParameterizerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ParameterizerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                parameterizer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAvailableAlgorithms\n                            \n                            \n                                    Async\n                                getProblemSourceColumns\n                            \n                            \n                                    Async\n                                getProblemSourceOptions\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumns\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumnsNewProblem\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedOrdinalColumns\n                            \n                            \n                                    Async\n                                getProblemSourceTables\n                            \n                            \n                                    Async\n                                saveConnectionOptions\n                            \n                            \n                                    Async\n                                saveNewProblemSelectedColumns\n                            \n                            \n                                    Async\n                                saveProblemAlgorithm\n                            \n                            \n                                    Async\n                                saveProblemSource\n                            \n                            \n                                    Async\n                                saveProblemSourceColumns\n                            \n                            \n                                    Async\n                                saveProblemSourceColumnsType\n                            \n                            \n                                    Async\n                                saveProblemSourceSelectedOrdinalColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvailableAlgorithms\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvailableAlgorithms()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(getAvailableAlgorithmsDescription)@ApiResponse(getAvailableAlgorithmsSuccessfulResponse)@ApiResponse(getAvailableAlgorithmsBadRequestResponse)@Get('get-available-algorithms')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:259\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceColumns()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(problemSourceColumnsDescription)@ApiResponse(problemSourceColumnsSuccessfulResponse)@ApiResponse(problemSourceColumnsBadRequestResponse)@Get('problem-source-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceOptions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(getProblemSourceSchemasDescription)@ApiResponse(getProblemSourceSchemasSuccessfulResponse)@ApiResponse(getProblemSourceSchemasBadRequestResponse)@Get('get-problem-source-schemas')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumns()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(getProblemSourceSelectedColumnsDescription)@ApiResponse(getProblemSourceSelectedColumnsSuccessfulResponse)@ApiResponse(getProblemSourceSelectedColumnsBadRequestResponse)@Get('get-problem-source-selected-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumnsNewProblem\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumnsNewProblem()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(getProblemSourceSelectedColumnsNewProblemDescription)@ApiResponse(getProblemSourceSelectedColumnsNewProblemSuccessfulResponse)@ApiResponse(getProblemSourceSelectedColumnsNewProblemBadRequestResponse)@Get('get-problem-source-selected-columns-new-problem')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedOrdinalColumns()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(getProblemSourceSelectedOrdinalColumnsDescription)@ApiResponse(getProblemSourceSelectedOrdinalColumnsSuccessfulResponse)@ApiResponse(getProblemSourceSelectedOrdinalColumnsBadRequestResponse)@Get('get-problem-source-selected-ordinal-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceTables\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceTables(body: GetProblemSourceTablesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(getProblemSourceTablesDescription)@ApiResponse(getProblemSourceTablesSuccessfulResponse)@ApiResponse(getProblemSourceTablesBadRequestResponse)@ApiBody(getProblemSourceTablesCorrectPayload)@Post('get-problem-source-tables')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                GetProblemSourceTablesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveConnectionOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveConnectionOptions(body: CreateConnectionOptionsDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(createConnectionDescription)@ApiResponse(createConnectionSuccessfulResponse)@ApiResponse(createConnectionBadRequestResponse)@ApiBody(createConnectionCorrectPayload)@Post('create-connection')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateConnectionOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewProblemSelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewProblemSelectedColumns(body: SaveNewRegistrySelectedColumnsDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(saveNewRegistrySelectedColumnsDescription)@ApiResponse(saveNewRegistrySelectedColumnsSuccessfulResponse)@ApiResponse(saveNewRegistrySelectedColumnsBadRequestResponse)@ApiBody(saveNewRegistrySelectedColumnsCorrectPayload)@Post('save-new-registry-selected-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SaveNewRegistrySelectedColumnsDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemAlgorithm\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemAlgorithm(body: SaveProblemAlgorithmDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(saveProblemAlgorithmDescription)@ApiResponse(saveProblemAlgorithmSuccessfulResponse)@ApiResponse(saveProblemAlgorithmBadRequestResponse)@ApiBody(saveProblemAlgorithmCorrectPayload)@Post('save-problem-algorithm')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:268\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SaveProblemAlgorithmDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSource\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSource(body: SaveProblemSourceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(saveProblemSourceDescription)@ApiResponse(saveProblemSourceSuccessfulResponse)@ApiResponse(saveProblemSourceBadRequestResponse)@ApiBody(saveProblemSourceCorrectPayload)@Patch('save-problem-source')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SaveProblemSourceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumns(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(saveProblemSourceColumnsDescription)@ApiResponse(saveProblemSourceColumnsSuccessfulResponse)@ApiResponse(saveProblemSourceColumnsBadRequestResponse)@ApiBody(saveProblemSourceColumnsCorrectPayload)@Post('save-problem-source-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumnsType\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumnsType(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(saveProblemSourceColumnsTypesDescription)@ApiResponse(saveProblemSourceColumnsTypesSuccessfulResponse)@ApiResponse(saveProblemSourceColumnsTypesBadRequestResponse)@ApiBody(saveProblemSourceColumnsTypesCorrectPayload)@Post('save-problem-source-columns-types')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceSelectedOrdinalColumns(body: SaveProblemSourceSelectedOrdinalColumns)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(saveProblemSourceSelectedOrdinalColumnsDescription)@ApiResponse(saveProblemSourceSelectedOrdinalColumnsSuccessfulResponse)@ApiResponse(saveProblemSourceSelectedOrdinalColumnsBadRequestResponse)@ApiBody(saveProblemSourceSelectedOrdinalColumnsCorrectPayload)@Post('save-problem-source-selected-ordinal-columns')\n                \n            \n\n            \n                \n                    Defined in src/parameterizer/parameterizer.controller.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SaveProblemSourceSelectedOrdinalColumns\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Patch,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateConnectionOptionsDto } from './dtos/create-connection-options.dto';\nimport { Request as RequestType } from 'express';\nimport { ParameterizerService } from './parameterizer.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport {\n  CreateNewConnectionResponse,\n  ProblemSourceColumn,\n  ProblemSourceSchema,\n  ProblemSourceTable,\n  ProbleSourceSelectedColumnsNewProblem,\n} from './parameterizer.types';\nimport { SaveProblemSourceDto } from './dtos/save-problem-source.dto';\nimport { Problem } from 'src/problem/entities/problem.entity';\nimport { GetProblemSourceTablesDto } from './dtos/get-problem-source-tables';\nimport { SaveProblemSourceColumnsDto } from './dtos/save-problem-source-columns';\nimport { SaveProblemSourceColumnsTypeDto } from './dtos/save-problem-source-columns-types.dto';\nimport { SaveProblemSourceSelectedOrdinalColumns } from './dtos/save-problem-source-selected-ordinal-columns.dto';\nimport { BaseCaseColumn } from 'src/problem/entities/base-case-column.entity';\nimport { SaveNewRegistrySelectedColumnsDto } from './dtos/save-new-registry-selected-columns.dto';\nimport { Algorithm } from 'src/problem/entities/algorithm.entity';\nimport { SaveProblemAlgorithmDto } from './dtos/save-problem-algorithm.dto';\nimport {\n  createConnectionBadRequestResponse,\n  createConnectionCorrectPayload,\n  createConnectionDescription,\n  createConnectionSuccessfulResponse,\n} from './swagger/create-conection';\nimport {\n  getProblemSourceSchemasBadRequestResponse,\n  getProblemSourceSchemasDescription,\n  getProblemSourceSchemasSuccessfulResponse,\n} from './swagger/get-problem-source-schema';\nimport { ApiBody, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport {\n  getProblemSourceTablesBadRequestResponse,\n  getProblemSourceTablesCorrectPayload,\n  getProblemSourceTablesDescription,\n  getProblemSourceTablesSuccessfulResponse,\n} from './swagger/get-problem-source-tables';\nimport {\n  saveProblemSourceBadRequestResponse,\n  saveProblemSourceCorrectPayload,\n  saveProblemSourceDescription,\n  saveProblemSourceSuccessfulResponse,\n} from './swagger/save-problem-source';\nimport {\n  problemSourceColumnsBadRequestResponse,\n  problemSourceColumnsDescription,\n  problemSourceColumnsSuccessfulResponse,\n} from './swagger/problem-source-columns';\nimport {\n  saveProblemSourceColumnsBadRequestResponse,\n  saveProblemSourceColumnsCorrectPayload,\n  saveProblemSourceColumnsDescription,\n  saveProblemSourceColumnsSuccessfulResponse,\n} from './swagger/save-problem-source-columns';\nimport {\n  getProblemSourceSelectedColumnsBadRequestResponse,\n  getProblemSourceSelectedColumnsDescription,\n  getProblemSourceSelectedColumnsSuccessfulResponse,\n} from './swagger/get-problem-source-selected-columns';\nimport {\n  saveProblemSourceColumnsTypesBadRequestResponse,\n  saveProblemSourceColumnsTypesCorrectPayload,\n  saveProblemSourceColumnsTypesDescription,\n  saveProblemSourceColumnsTypesSuccessfulResponse,\n} from './swagger/save-problem-source-columns-types';\nimport {\n  getProblemSourceSelectedOrdinalColumnsBadRequestResponse,\n  getProblemSourceSelectedOrdinalColumnsDescription,\n  getProblemSourceSelectedOrdinalColumnsSuccessfulResponse,\n} from './swagger/get-problem-source-selected-ordinal-columns';\nimport {\n  saveProblemSourceSelectedOrdinalColumnsBadRequestResponse,\n  saveProblemSourceSelectedOrdinalColumnsCorrectPayload,\n  saveProblemSourceSelectedOrdinalColumnsDescription,\n  saveProblemSourceSelectedOrdinalColumnsSuccessfulResponse,\n} from './swagger/save-problem-source-selected-ordinal-columns';\nimport {\n  getProblemSourceSelectedColumnsNewProblemBadRequestResponse,\n  getProblemSourceSelectedColumnsNewProblemDescription,\n  getProblemSourceSelectedColumnsNewProblemSuccessfulResponse,\n} from './swagger/get-problem-source-selected-columns-new-problem';\nimport {\n  saveNewRegistrySelectedColumnsBadRequestResponse,\n  saveNewRegistrySelectedColumnsCorrectPayload,\n  saveNewRegistrySelectedColumnsDescription,\n  saveNewRegistrySelectedColumnsSuccessfulResponse,\n} from './swagger/save-new-registry-selected-columns';\nimport {\n  getAvailableAlgorithmsBadRequestResponse,\n  getAvailableAlgorithmsDescription,\n  getAvailableAlgorithmsSuccessfulResponse,\n} from './swagger/get-available-algorithms';\nimport {\n  saveProblemAlgorithmBadRequestResponse,\n  saveProblemAlgorithmCorrectPayload,\n  saveProblemAlgorithmDescription,\n  saveProblemAlgorithmSuccessfulResponse,\n} from './swagger/save-problem.algorithm';\n\n@UseGuards(JwtAuthGuard)\n@Controller('parameterizer')\nexport class ParameterizerController {\n  constructor(private readonly parameterizerService: ParameterizerService) {}\n\n  @ApiOperation(createConnectionDescription)\n  @ApiResponse(createConnectionSuccessfulResponse)\n  @ApiResponse(createConnectionBadRequestResponse)\n  @ApiBody(createConnectionCorrectPayload)\n  @Post('create-connection')\n  async saveConnectionOptions(\n    @Body() body: CreateConnectionOptionsDto,\n    @Request()\n    req: RequestType & { user: { userId: string; username: string } },\n  ): Promise {\n    const { user } = req;\n    return this.parameterizerService.createNewConnection(body, user.userId);\n  }\n\n  @ApiOperation(getProblemSourceSchemasDescription)\n  @ApiResponse(getProblemSourceSchemasSuccessfulResponse)\n  @ApiResponse(getProblemSourceSchemasBadRequestResponse)\n  @Get('get-problem-source-schemas')\n  async getProblemSourceOptions(): Promise {\n    return this.parameterizerService.getProblemSourceSchemas();\n  }\n\n  @ApiOperation(getProblemSourceTablesDescription)\n  @ApiResponse(getProblemSourceTablesSuccessfulResponse)\n  @ApiResponse(getProblemSourceTablesBadRequestResponse)\n  @ApiBody(getProblemSourceTablesCorrectPayload)\n  @Post('get-problem-source-tables')\n  async getProblemSourceTables(\n    @Body() body: GetProblemSourceTablesDto,\n  ): Promise {\n    const { schema } = body;\n    return this.parameterizerService.getProblemSourceTables(schema);\n  }\n\n  @ApiOperation(saveProblemSourceDescription)\n  @ApiResponse(saveProblemSourceSuccessfulResponse)\n  @ApiResponse(saveProblemSourceBadRequestResponse)\n  @ApiBody(saveProblemSourceCorrectPayload)\n  @Patch('save-problem-source')\n  async saveProblemSource(\n    @Body() body: SaveProblemSourceDto,\n  ): Promise {\n    return this.parameterizerService.saveProblemSource(body);\n  }\n\n  @ApiOperation(problemSourceColumnsDescription)\n  @ApiResponse(problemSourceColumnsSuccessfulResponse)\n  @ApiResponse(problemSourceColumnsBadRequestResponse)\n  @Get('problem-source-columns')\n  async getProblemSourceColumns(): Promise {\n    return this.parameterizerService.getProblemSourceColumns();\n  }\n\n  @ApiOperation(saveProblemSourceColumnsDescription)\n  @ApiResponse(saveProblemSourceColumnsSuccessfulResponse)\n  @ApiResponse(saveProblemSourceColumnsBadRequestResponse)\n  @ApiBody(saveProblemSourceColumnsCorrectPayload)\n  @Post('save-problem-source-columns')\n  async saveProblemSourceColumns(\n    @Body() body: { sections: SaveProblemSourceColumnsDto[] },\n  ): Promise {\n    const { sections } = body;\n    return this.parameterizerService.saveProblemSourceColumns(sections);\n  }\n\n  @ApiOperation(getProblemSourceSelectedColumnsDescription)\n  @ApiResponse(getProblemSourceSelectedColumnsSuccessfulResponse)\n  @ApiResponse(getProblemSourceSelectedColumnsBadRequestResponse)\n  @Get('get-problem-source-selected-columns')\n  async getProblemSourceSelectedColumns(): Promise {\n    return this.parameterizerService.getProblemSourceSelectedColumns();\n  }\n\n  @ApiOperation(saveProblemSourceColumnsTypesDescription)\n  @ApiResponse(saveProblemSourceColumnsTypesSuccessfulResponse)\n  @ApiResponse(saveProblemSourceColumnsTypesBadRequestResponse)\n  @ApiBody(saveProblemSourceColumnsTypesCorrectPayload)\n  @Post('save-problem-source-columns-types')\n  async saveProblemSourceColumnsType(\n    @Body() body: { sections: SaveProblemSourceColumnsTypeDto[] },\n  ): Promise {\n    const { sections } = body;\n    return this.parameterizerService.saveProblemSourceColumnsTypes(sections);\n  }\n\n  @ApiOperation(getProblemSourceSelectedOrdinalColumnsDescription)\n  @ApiResponse(getProblemSourceSelectedOrdinalColumnsSuccessfulResponse)\n  @ApiResponse(getProblemSourceSelectedOrdinalColumnsBadRequestResponse)\n  @Get('get-problem-source-selected-ordinal-columns')\n  async getProblemSourceSelectedOrdinalColumns(): Promise {\n    return this.parameterizerService.getProblemSourceSelectedOrdinalColumns();\n  }\n\n  @ApiOperation(saveProblemSourceSelectedOrdinalColumnsDescription)\n  @ApiResponse(saveProblemSourceSelectedOrdinalColumnsSuccessfulResponse)\n  @ApiResponse(saveProblemSourceSelectedOrdinalColumnsBadRequestResponse)\n  @ApiBody(saveProblemSourceSelectedOrdinalColumnsCorrectPayload)\n  @Post('save-problem-source-selected-ordinal-columns')\n  async saveProblemSourceSelectedOrdinalColumns(\n    @Body()\n    body: SaveProblemSourceSelectedOrdinalColumns,\n  ): Promise {\n    const { selectedOrdinalColumns } = body;\n    return this.parameterizerService.saveProblemSourceSelectedOrdinalColumns(\n      selectedOrdinalColumns,\n    );\n  }\n\n  @ApiOperation(getProblemSourceSelectedColumnsNewProblemDescription)\n  @ApiResponse(getProblemSourceSelectedColumnsNewProblemSuccessfulResponse)\n  @ApiResponse(getProblemSourceSelectedColumnsNewProblemBadRequestResponse)\n  @Get('get-problem-source-selected-columns-new-problem')\n  async getProblemSourceSelectedColumnsNewProblem(): Promise {\n    return this.parameterizerService.getProblemSourceSelectedColumnsNewProblem();\n  }\n\n  @ApiOperation(saveNewRegistrySelectedColumnsDescription)\n  @ApiResponse(saveNewRegistrySelectedColumnsSuccessfulResponse)\n  @ApiResponse(saveNewRegistrySelectedColumnsBadRequestResponse)\n  @ApiBody(saveNewRegistrySelectedColumnsCorrectPayload)\n  @Post('save-new-registry-selected-columns')\n  async saveNewProblemSelectedColumns(\n    @Body() body: SaveNewRegistrySelectedColumnsDto[],\n  ): Promise {\n    return this.parameterizerService.saveNewRegistrySelectedColumns(body);\n  }\n\n  @ApiOperation(getAvailableAlgorithmsDescription)\n  @ApiResponse(getAvailableAlgorithmsSuccessfulResponse)\n  @ApiResponse(getAvailableAlgorithmsBadRequestResponse)\n  @Get('get-available-algorithms')\n  async getAvailableAlgorithms(): Promise {\n    return this.parameterizerService.getAvailableAlgorithms();\n  }\n\n  @ApiOperation(saveProblemAlgorithmDescription)\n  @ApiResponse(saveProblemAlgorithmSuccessfulResponse)\n  @ApiResponse(saveProblemAlgorithmBadRequestResponse)\n  @ApiBody(saveProblemAlgorithmCorrectPayload)\n  @Post('save-problem-algorithm')\n  async saveProblemAlgorithm(\n    @Body() body: SaveProblemAlgorithmDto,\n  ): Promise {\n    const { algorithmName } = body;\n    return this.parameterizerService.saveProblemAlgorithm(algorithmName);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParameterizerModule.html":{"url":"modules/ParameterizerModule.html","title":"module - ParameterizerModule","body":"\n                   \n\n\n\n\n    Modules\n    ParameterizerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParameterizerModule\n\n\n\ncluster_ParameterizerModule_providers\n\n\n\ncluster_ParameterizerModule_imports\n\n\n\n\nConnectionModule\n\nConnectionModule\n\n\n\nParameterizerModule\n\nParameterizerModule\n\nParameterizerModule -->\n\nConnectionModule->ParameterizerModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nParameterizerModule -->\n\nProblemModule->ParameterizerModule\n\n\n\n\n\nParameterizerService\n\nParameterizerService\n\nParameterizerModule -->\n\nParameterizerService->ParameterizerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/parameterizer/parameterizer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParameterizerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ParameterizerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConnectionModule\n                        \n                        \n                            ProblemModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ParameterizerService } from './parameterizer.service';\nimport { ParameterizerController } from './parameterizer.controller';\nimport { ConnectionModule } from 'src/connection/connection.module';\nimport { ProblemModule } from 'src/problem/problem.module';\n\n@Module({\n  providers: [ParameterizerService],\n  controllers: [ParameterizerController],\n  imports: [ConnectionModule, ProblemModule],\n})\nexport class ParameterizerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParameterizerService.html":{"url":"injectables/ParameterizerService.html","title":"injectable - ParameterizerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParameterizerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewConnection\n                            \n                            \n                                    Async\n                                getAvailableAlgorithms\n                            \n                            \n                                    Async\n                                getProblemSourceColumns\n                            \n                            \n                                    Async\n                                getProblemSourceSchemas\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumns\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumnsNewProblem\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedOrdinalColumns\n                            \n                            \n                                    Async\n                                getProblemSourceTables\n                            \n                            \n                                    Async\n                                saveNewRegistrySelectedColumns\n                            \n                            \n                                    Async\n                                saveProblemAlgorithm\n                            \n                            \n                                    Async\n                                saveProblemSource\n                            \n                            \n                                    Async\n                                saveProblemSourceColumns\n                            \n                            \n                                    Async\n                                saveProblemSourceColumnsTypes\n                            \n                            \n                                    Async\n                                saveProblemSourceSelectedOrdinalColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connectionService: ConnectionService, problemService: ProblemService)\n                    \n                \n                        \n                            \n                                Defined in src/parameterizer/parameterizer.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connectionService\n                                                  \n                                                        \n                                                                        ConnectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        problemService\n                                                  \n                                                        \n                                                                        ProblemService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewConnection(databaseMetaData: Partial, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    databaseMetaData\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvailableAlgorithms\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvailableAlgorithms()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:368\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceColumns()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSchemas\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSchemas()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumns()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumnsNewProblem\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumnsNewProblem()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:324\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedOrdinalColumns()\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceTables\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceTables(schema: string)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewRegistrySelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewRegistrySelectedColumns(selectedValues: NewRegistry[])\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:346\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selectedValues\n                                    \n                                                NewRegistry[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemAlgorithm\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemAlgorithm(algorithm: string)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:373\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    algorithm\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSource\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSource(problemSource: ProblemSource)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problemSource\n                                    \n                                                ProblemSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumns(columns: SaveProblemSourceColumnsDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columns\n                                    \n                                                SaveProblemSourceColumnsDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumnsTypes\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumnsTypes(columns: SaveProblemSourceColumnsTypeDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columns\n                                    \n                                                SaveProblemSourceColumnsTypeDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceSelectedOrdinalColumns(selectedOrdinalColumns: ProblemSourceMappedColumns)\n                \n            \n\n\n            \n                \n                    Defined in src/parameterizer/parameterizer.service.ts:301\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selectedOrdinalColumns\n                                    \n                                                ProblemSourceMappedColumns\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { ConnectionOptions } from 'src/connection/connection-options.interface';\nimport { ConnectionService } from 'src/connection/connection.service';\nimport { Algorithm } from 'src/problem/entities/algorithm.entity';\nimport { BaseCaseColumn } from 'src/problem/entities/base-case-column.entity';\nimport { Problem } from 'src/problem/entities/problem.entity';\nimport { ProblemService } from 'src/problem/problem.service';\nimport { SaveProblemSourceColumnsDto } from './dtos/save-problem-source-columns';\nimport { SaveProblemSourceColumnsTypeDto } from './dtos/save-problem-source-columns-types.dto';\nimport {\n  CreateNewConnectionResponse,\n  NewRegistry,\n  ProblemSource,\n  ProblemSourceColumn,\n  ProblemSourceMappedColumns,\n  ProblemSourceSchema,\n  ProblemSourceTable,\n  ProbleSourceSelectedColumnsNewProblem,\n  SaveProblemSourceColumnsType,\n} from './parameterizer.types';\n\n@Injectable()\nexport class ParameterizerService {\n  constructor(\n    private connectionService: ConnectionService,\n    private problemService: ProblemService,\n  ) {}\n\n  async createNewConnection(\n    databaseMetaData: Partial,\n    userId: string,\n  ): Promise {\n    const { error, resource } = await this.connectionService.createConnection(\n      databaseMetaData,\n      userId,\n    );\n    if (!error) {\n      return { resource };\n    }\n    throw new BadRequestException(error);\n  }\n\n  async getProblemSourceSchemas(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const { connection } = problem;\n    const schemas = await this.connectionService.getProblemSourceSchemas(\n      connection,\n    );\n    if (!schemas.length) {\n      throw new NotFoundException({\n        error: {\n          code: 'schemas_not_found',\n          detail: 'Schemas not found',\n        },\n        resource: null,\n      });\n    }\n    return { resource: schemas };\n  }\n\n  async getProblemSourceTables(\n    schema: string,\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const { connection } = problem;\n    const tables = await this.connectionService.getProblemSourceTables(\n      connection,\n      schema,\n    );\n    if (!tables.length) {\n      throw new NotFoundException({\n        error: {\n          code: 'tables_not_found',\n          detail: 'Tables not found',\n        },\n        resource: null,\n      });\n    }\n    return { resource: tables };\n  }\n\n  async saveProblemSource(problemSource: ProblemSource): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const problemSourceExists =\n      await this.connectionService.checkIfSourceExists(\n        problemSource,\n        problem.connection.id,\n      );\n    if (!problemSourceExists) {\n      throw new BadRequestException({\n        error: {\n          code: 'source_not_found',\n          message: 'Source not found',\n        },\n        resource: null,\n      });\n    }\n    const { resource } = await this.problemService.saveProblemSource(\n      problem,\n      problemSource,\n    );\n    return resource;\n  }\n\n  async getProblemSourceColumns(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const { connection, table, schema } = problem;\n\n    const columns = await this.connectionService.getCurrentProblemSourceColumns(\n      connection,\n      table,\n      schema,\n    );\n\n    if (!columns.length) {\n      throw new NotFoundException({\n        error: {\n          code: 'columns_not_found',\n          detail: 'Columns not found',\n        },\n        resource: null,\n      });\n    }\n    return {\n      resource: columns,\n    };\n  }\n\n  async saveProblemSourceColumns(\n    columns: SaveProblemSourceColumnsDto[],\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.saveProblemSourceColumns(\n      problem,\n      columns,\n    );\n    return resource;\n  }\n\n  async getProblemSourceSelectedColumns(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.getProblemSourceSelectedColumns(\n      problem,\n    );\n    return resource;\n  }\n\n  async saveProblemSourceColumnsTypes(\n    columns: SaveProblemSourceColumnsTypeDto[],\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n\n    const literalColumnsWithDistinctValues =\n      await this.connectionService.getProblemSourceDistinctValues(\n        problem.connection,\n        problem.table,\n        problem.schema,\n        columns\n          .find(({ droppableId }) => droppableId === 'literal-columns')\n          .options.map((columnName) => ({ columnName })),\n      );\n\n    const columnsWithLiteralColumnsUpdated = columns.map(\n      (column): SaveProblemSourceColumnsType => {\n        if (column.droppableId === 'literal-columns') {\n          return {\n            ...column,\n            literalColumns: literalColumnsWithDistinctValues.reduce(\n              (acc, curr) => ({\n                ...acc,\n                [curr.columnName]: curr.values,\n              }),\n              {},\n            ),\n          };\n        }\n        return column;\n      },\n    );\n    const resource = await this.problemService.saveProblemSourceColumnsTypes(\n      problem,\n      columnsWithLiteralColumnsUpdated,\n    );\n    return resource;\n  }\n\n  async getProblemSourceSelectedOrdinalColumns(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const { resource } =\n      await this.problemService.getProblemSourceSelectedOrdinalColumns(problem);\n\n    const columns = await this.connectionService.getProblemSourceDistinctValues(\n      problem.connection,\n      problem.table,\n      problem.schema,\n      resource,\n    );\n    return { resource: columns };\n  }\n\n  async saveProblemSourceSelectedOrdinalColumns(\n    selectedOrdinalColumns: ProblemSourceMappedColumns,\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource =\n      await this.problemService.saveProblemSourceSelectedOrdinalColumns(\n        problem,\n        selectedOrdinalColumns,\n      );\n    return resource;\n  }\n\n  async getProblemSourceSelectedColumnsNewProblem(): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource =\n      await this.problemService.getProblemSourceSelectedColumnsNewProblem(\n        problem,\n      );\n    return resource;\n  }\n\n  async saveNewRegistrySelectedColumns(\n    selectedValues: NewRegistry[],\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.saveNewRegistrySelectedColumns(\n      problem,\n      selectedValues,\n    );\n    return resource;\n  }\n\n  async getAvailableAlgorithms(): Promise {\n    const resource = await this.problemService.getAvailableAlgorithms();\n    return resource;\n  }\n\n  async saveProblemAlgorithm(\n    algorithm: string,\n  ): Promise {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'connection',\n    ]);\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    const resource = await this.problemService.saveProblemAlgorithm(\n      problem,\n      algorithm,\n    );\n    return resource;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProbleSourceSelectedColumnsNewProblem.html":{"url":"interfaces/ProbleSourceSelectedColumnsNewProblem.html","title":"interface - ProbleSourceSelectedColumnsNewProblem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProbleSourceSelectedColumnsNewProblem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            columnName\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columnName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columnName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Problem.html":{"url":"entities/Problem.html","title":"entity - Problem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Problem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/problem.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                algorithm\n                            \n                            \n                                columns\n                            \n                            \n                                connection\n                            \n                            \n                                id\n                            \n                            \n                                isBeingCreated\n                            \n                            \n                                name\n                            \n                            \n                                registries\n                            \n                            \n                                schema\n                            \n                            \n                                table\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        algorithm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Algorithm\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, algorithm => algorithm.problems)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        columns\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseCaseColumn[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, column => column.problem)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Connection\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, connection => connection.problems)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBeingCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Registry[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, registry => registry.problem)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        table\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.problems)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/problem.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Algorithm } from './algorithm.entity';\nimport { BaseCaseColumn } from './base-case-column.entity';\nimport { Registry } from './registry.entity';\n\n@Entity()\nexport class Problem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  name: string;\n  @Column({ default: true })\n  isBeingCreated: boolean;\n  @Column({ nullable: true })\n  schema: string;\n  @Column({ nullable: true })\n  table: string;\n  @ManyToOne(() => Connection, (connection) => connection.problems)\n  connection: Connection;\n  @ManyToOne(() => User, (user) => user.problems)\n  user: User;\n  @OneToMany(() => BaseCaseColumn, (column) => column.problem)\n  columns: BaseCaseColumn[];\n  @OneToMany(() => Registry, (registry) => registry.problem)\n  registries: Registry[];\n  @ManyToOne(() => Algorithm, (algorithm) => algorithm.problems)\n  algorithm: Algorithm;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProblemModule.html":{"url":"modules/ProblemModule.html","title":"module - ProblemModule","body":"\n                   \n\n\n\n\n    Modules\n    ProblemModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProblemModule\n\n\n\ncluster_ProblemModule_exports\n\n\n\ncluster_ProblemModule_providers\n\n\n\n\nProblemService \n\nProblemService \n\n\n\nProblemModule\n\nProblemModule\n\nProblemService  -->\n\nProblemModule->ProblemService \n\n\n\n\n\nProblemService\n\nProblemService\n\nProblemModule -->\n\nProblemService->ProblemModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/problem/problem.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProblemService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProblemService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Algorithm } from './entities/algorithm.entity';\nimport { BaseCaseColumn } from './entities/base-case-column.entity';\nimport { LiteralValue } from './entities/literal-value.entity';\nimport { MappedValue } from './entities/mapped-value.entity';\nimport { Problem } from './entities/problem.entity';\nimport { Registry } from './entities/registry.entity';\nimport { ProblemService } from './problem.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Problem,\n      BaseCaseColumn,\n      MappedValue,\n      Registry,\n      Algorithm,\n      LiteralValue,\n    ]),\n  ],\n  providers: [ProblemService],\n  exports: [ProblemService],\n})\nexport class ProblemModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProblemService.html":{"url":"injectables/ProblemService.html","title":"injectable - ProblemService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProblemService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/problem.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProblem\n                            \n                            \n                                    Async\n                                getAvailableAlgorithms\n                            \n                            \n                                    Async\n                                getBaseColumnMappedValue\n                            \n                            \n                                    Async\n                                getBaseColumnMappedValues\n                            \n                            \n                                    Async\n                                getBaseColumnMi\n                            \n                            \n                                    Async\n                                getProblemBeingCreated\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumns\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedColumnsNewProblem\n                            \n                            \n                                    Async\n                                getProblemSourceSelectedOrdinalColumns\n                            \n                            \n                                    Async\n                                saveNewRegistrySelectedColumns\n                            \n                            \n                                    Async\n                                saveProblemAlgorithm\n                            \n                            \n                                    Async\n                                saveProblemSource\n                            \n                            \n                                    Async\n                                saveProblemSourceColumns\n                            \n                            \n                                    Async\n                                saveProblemSourceColumnsTypes\n                            \n                            \n                                    Async\n                                saveProblemSourceSelectedOrdinalColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(problemsRepository: ProblemsRepository, baseCaseColumnsRepository: BaseCaseColumns, MappedValues: MappedValuesRepository, registriesRepository: ProblemsRepository, algorithmsRepository: AlgorithmsRepository, literalValuesRepository: ProblemsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/problem/problem.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        problemsRepository\n                                                  \n                                                        \n                                                                        ProblemsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseCaseColumnsRepository\n                                                  \n                                                        \n                                                                        BaseCaseColumns\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        MappedValues\n                                                  \n                                                        \n                                                                        MappedValuesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registriesRepository\n                                                  \n                                                        \n                                                                        ProblemsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        algorithmsRepository\n                                                  \n                                                        \n                                                                        AlgorithmsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        literalValuesRepository\n                                                  \n                                                        \n                                                                        ProblemsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProblem\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProblem(connection: Partial, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connection\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAvailableAlgorithms\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAvailableAlgorithms()\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBaseColumnMappedValue\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseColumnMappedValue(columnName: string, columnValue: string)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:243\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columnName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    columnValue\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBaseColumnMappedValues\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseColumnMappedValues(columnName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columnName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBaseColumnMi\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBaseColumnMi(columnName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:233\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columnName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemBeingCreated\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemBeingCreated(relations: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    relations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumns(problem: Problem)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedColumnsNewProblem\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedColumnsNewProblem(problem: Problem)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProblemSourceSelectedOrdinalColumns(problem: Problem)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewRegistrySelectedColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewRegistrySelectedColumns(problem: Problem, newRegistry: NewRegistry[])\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newRegistry\n                                    \n                                                NewRegistry[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemAlgorithm\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemAlgorithm(problem: Problem, algorithm: string)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    algorithm\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSource\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSource(problem: Problem, problemSource: ProblemSource)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    problemSource\n                                    \n                                                ProblemSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumns(problem: Problem, problemSourceSections: SaveProblemSourceColumnsDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    problemSourceSections\n                                    \n                                                SaveProblemSourceColumnsDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceColumnsTypes\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceColumnsTypes(problem: Problem, problemSourceColumns: SaveProblemSourceColumnsType[])\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    problemSourceColumns\n                                    \n                                                SaveProblemSourceColumnsType[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveProblemSourceSelectedOrdinalColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveProblemSourceSelectedOrdinalColumns(problem: Problem, selectedOrdinalColumns: ProblemSourceMappedColumns)\n                \n            \n\n\n            \n                \n                    Defined in src/problem/problem.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    problem\n                                    \n                                                Problem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    selectedOrdinalColumns\n                                    \n                                                ProblemSourceMappedColumns\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Connection } from 'src/connection/connection.entity';\nimport { SaveProblemSourceColumnsDto } from 'src/parameterizer/dtos/save-problem-source-columns';\nimport {\n  NewRegistry,\n  ProblemSource,\n  ProblemSourceMappedColumns,\n  ProbleSourceSelectedColumnsNewProblem,\n  SaveProblemSourceColumnsType,\n} from 'src/parameterizer/parameterizer.types';\nimport { User } from 'src/users/user.entity';\nimport { Not } from 'typeorm';\nimport { BaseCaseColumn } from './entities/base-case-column.entity';\nimport { MappedValue } from './entities/mapped-value.entity';\nimport { Registry } from './entities/registry.entity';\nimport { Problem } from './entities/problem.entity';\nimport { BaseCaseColumns } from './repositories/base-case-column.repository';\nimport { MappedValuesRepository } from './repositories/mapped-values.repository';\nimport { ProblemsRepository } from './repositories/problems.repository';\nimport { Algorithm } from './entities/algorithm.entity';\nimport { AlgorithmsRepository } from './repositories/algorithms.repository';\nimport { LiteralValue } from './entities/literal-value.entity';\n\n@Injectable()\nexport class ProblemService {\n  constructor(\n    @InjectRepository(Problem) private problemsRepository: ProblemsRepository,\n    @InjectRepository(BaseCaseColumn)\n    private baseCaseColumnsRepository: BaseCaseColumns,\n    @InjectRepository(MappedValue)\n    private MappedValues: MappedValuesRepository,\n    @InjectRepository(Registry)\n    private registriesRepository: ProblemsRepository,\n    @InjectRepository(Algorithm)\n    private algorithmsRepository: AlgorithmsRepository,\n    @InjectRepository(LiteralValue)\n    private literalValuesRepository: ProblemsRepository,\n  ) {}\n\n  async createProblem(\n    connection: Partial,\n    user: User,\n  ): Promise {\n    const problem = this.problemsRepository.create({ connection, user });\n    await this.problemsRepository.save(problem);\n    return problem;\n  }\n\n  async getProblemBeingCreated(relations: string[]): Promise {\n    const problem = await this.problemsRepository.findOne({\n      where: { isBeingCreated: true },\n      relations,\n    });\n    if (!problem) {\n      return null;\n    }\n    return problem;\n  }\n\n  async saveProblemSource(\n    problem: Problem,\n    problemSource: ProblemSource,\n  ): Promise {\n    problem = {\n      ...problem,\n      schema: problemSource.schema,\n      table: problemSource.table,\n    };\n    const result = await this.problemsRepository.save(problem);\n    return { resource: result };\n  }\n\n  async saveProblemSourceColumns(\n    problem: Problem,\n    problemSourceSections: SaveProblemSourceColumnsDto[],\n  ): Promise {\n    for (const section of problemSourceSections) {\n      for (const option of section.options) {\n        const columnToSave = new BaseCaseColumn();\n        columnToSave.name = option;\n        columnToSave.target = section.droppableId;\n        columnToSave.problem = problem;\n        await this.baseCaseColumnsRepository.save(columnToSave);\n      }\n    }\n    const result = await this.problemsRepository.findOne({\n      where: { id: problem.id },\n      relations: ['columns'],\n    });\n    return { resource: result };\n  }\n\n  async getProblemSourceSelectedColumns(\n    problem: Problem,\n  ): Promise {\n    const columns = await this.baseCaseColumnsRepository.find({\n      where: { problem, target: Not('goal-factor') },\n    });\n    const result = columns.map(({ name }) => ({ columnName: name }));\n    return { resource: result };\n  }\n\n  async getProblemSourceSelectedColumnsNewProblem(\n    problem: Problem,\n  ): Promise {\n    const columns = await this.baseCaseColumnsRepository.find({\n      where: { problem, target: Not('goal-factor') },\n      relations: ['mappedValues', 'literalValues'],\n    });\n    const result = columns.map(\n      ({ name, type, mappedValues, literalValues }) => {\n        const base = {\n          columnName: name,\n          type,\n          options: mappedValues.map(({ ordinalValue }) => ordinalValue),\n        };\n        if (type === 'boolean-columns') {\n          return {\n            ...base,\n            options: ['true', 'false'],\n          };\n        }\n        if (type === 'literal-columns') {\n          return {\n            ...base,\n            options: literalValues.map(({ value }) => value),\n          };\n        }\n        return base;\n      },\n    );\n    return { resource: result };\n  }\n\n  async saveProblemSourceColumnsTypes(\n    problem: Problem,\n    problemSourceColumns: SaveProblemSourceColumnsType[],\n  ): Promise {\n    for (const section of problemSourceColumns) {\n      for (const option of section.options) {\n        const column = await this.baseCaseColumnsRepository.findOne({\n          where: { name: option, problem },\n        });\n        column.type = section.droppableId;\n        await this.baseCaseColumnsRepository.save(column);\n        if (section.droppableId === 'literal-columns') {\n          for (const literalValue of section.literalColumns[option]) {\n            const literalValueToSave = new LiteralValue();\n            literalValueToSave.value = literalValue;\n            literalValueToSave.baseCaseColumn = column;\n            await this.literalValuesRepository.save(literalValueToSave);\n          }\n        }\n      }\n    }\n    const result = await this.problemsRepository.findOne({\n      where: { id: problem.id },\n      relations: ['columns'],\n    });\n    return { resource: result };\n  }\n\n  async getProblemSourceSelectedOrdinalColumns(\n    problem: Problem,\n  ): Promise {\n    const columns = await this.baseCaseColumnsRepository.find({\n      where: { problem, type: 'ordinal-columns' },\n    });\n    const result = columns.map(({ name }) => ({ columnName: name }));\n    return { resource: result };\n  }\n\n  async saveProblemSourceSelectedOrdinalColumns(\n    problem: Problem,\n    selectedOrdinalColumns: ProblemSourceMappedColumns,\n  ): Promise {\n    const columns = Object.entries(selectedOrdinalColumns);\n    for (const [columnName, mappedValues] of columns) {\n      const column = await this.baseCaseColumnsRepository.findOne({\n        where: { name: columnName, problem },\n      });\n      for (const { ordinalValue, mappedValue } of mappedValues) {\n        const mappedValueToSave = new MappedValue();\n        mappedValueToSave.baseCaseColumn = column;\n        mappedValueToSave.ordinalValue = ordinalValue;\n        mappedValueToSave.mappedValue = mappedValue;\n        await this.MappedValues.save(mappedValueToSave);\n      }\n    }\n    const result = await this.baseCaseColumnsRepository.findOne({\n      where: { problem, name: columns[0][0] },\n      relations: ['mappedValues'],\n    });\n    return { resource: result };\n  }\n\n  async saveNewRegistrySelectedColumns(\n    problem: Problem,\n    newRegistry: NewRegistry[],\n  ): Promise {\n    for (const entry of newRegistry) {\n      const registry = new Registry();\n      registry.problem = problem;\n      registry.name = entry.columnName;\n      registry.value = String(entry.value);\n      await this.registriesRepository.save(registry);\n    }\n    const result = await this.problemsRepository.findOne({\n      where: { id: problem.id },\n      relations: ['registries'],\n    });\n    return { resource: result };\n  }\n\n  async getAvailableAlgorithms(): Promise {\n    const result = await this.algorithmsRepository.find();\n    return { resource: result };\n  }\n\n  async saveProblemAlgorithm(\n    problem: Problem,\n    algorithm: string,\n  ): Promise {\n    const algorithmToSave = await this.algorithmsRepository.findOne({\n      where: { name: algorithm },\n    });\n    problem.algorithm = algorithmToSave;\n    const result = await this.problemsRepository.save(problem);\n    return { resource: result };\n  }\n\n  async getBaseColumnMi(\n    columnName: string,\n  ): Promise {\n    const column = await this.baseCaseColumnsRepository.findOne({\n      where: { name: columnName },\n      relations: ['mappedValues'],\n    });\n    return { resource: { mi: column.mappedValues.length } };\n  }\n\n  async getBaseColumnMappedValue(\n    columnName: string,\n    columnValue: string,\n  ): Promise {\n    const column = await this.baseCaseColumnsRepository.findOne({\n      where: { name: columnName },\n      relations: ['mappedValues'],\n    });\n    return {\n      resource: {\n        mappedValue: column.mappedValues.find(\n          ({ ordinalValue }) => ordinalValue === columnValue,\n        ).mappedValue,\n      },\n    };\n  }\n\n  async getBaseColumnMappedValues(\n    columnName: string,\n  ): Promise {\n    const column = await this.baseCaseColumnsRepository.findOne({\n      where: { name: columnName },\n      relations: ['mappedValues'],\n    });\n    return { resource: { mappedValues: column.mappedValues } };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSource.html":{"url":"interfaces/ProblemSource.html","title":"interface - ProblemSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            schema\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        schema\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        schema:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSourceColumn.html":{"url":"interfaces/ProblemSourceColumn.html","title":"interface - ProblemSourceColumn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSourceColumn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            columnName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columnName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columnName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSourceMappedColumns.html":{"url":"interfaces/ProblemSourceMappedColumns.html","title":"interface - ProblemSourceMappedColumns","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSourceMappedColumns\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type[]\n\n                    \n                \n                        \n                            \n                                Defined in src/parameterizer/parameterizer.types.ts:50\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSourceSchema.html":{"url":"interfaces/ProblemSourceSchema.html","title":"interface - ProblemSourceSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSourceSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            schemaName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        schemaName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        schemaName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProblemSourceTable.html":{"url":"interfaces/ProblemSourceTable.html","title":"interface - ProblemSourceTable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProblemSourceTable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            tableName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tableName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tableName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProblemsRepository.html":{"url":"classes/ProblemsRepository.html","title":"class - ProblemsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProblemsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/repositories/problems.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { Problem } from '../entities/problem.entity';\n\nexport class ProblemsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RefreshToken.html":{"url":"entities/RefreshToken.html","title":"entity - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refreshToken.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresAt\n                            \n                            \n                                id\n                            \n                            \n                                refreshToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.refreshTokens)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/users/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class RefreshToken {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  refreshToken: string;\n  @Column()\n  expiresAt: Date;\n  @ManyToOne(() => User, (user) => user.refreshTokens)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokensRepository.html":{"url":"classes/RefreshTokensRepository.html","title":"class - RefreshTokensRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokensRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refreshTokens.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { RefreshToken } from './refreshToken.entity';\n\nexport class RefreshTokensRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Registry.html":{"url":"entities/Registry.html","title":"entity - Registry","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Registry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/problem/entities/registry.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                problem\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/registry.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/registry.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, problem => problem.registries)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/registry.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/problem/entities/registry.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Problem } from './problem.entity';\n\n@Entity()\nexport class Registry {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({ nullable: true })\n  name: string;\n  @Column({ default: true })\n  value: string;\n  @ManyToOne(() => Problem, (problem) => problem.registries)\n  problem: Problem;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RemoteBaseCasesConnection.html":{"url":"interfaces/RemoteBaseCasesConnection.html","title":"interface - RemoteBaseCasesConnection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RemoteBaseCasesConnection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/solver/solver.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            connection\n                                        \n                                \n                                \n                                        \n                                            schema\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        connection\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connection:         Connection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Connection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        schema\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        schema:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Connection } from 'src/connection/connection.entity';\n\nexport interface RemoteBaseCasesConnection {\n  connection: Connection;\n  table: string;\n  schema: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveNewRegistrySelectedColumnsDto.html":{"url":"classes/SaveNewRegistrySelectedColumnsDto.html","title":"class - SaveNewRegistrySelectedColumnsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveNewRegistrySelectedColumnsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-new-registry-selected-columns.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                columnName\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        columnName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-new-registry-selected-columns.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-new-registry-selected-columns.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class SaveNewRegistrySelectedColumnsDto {\n  @IsString()\n  columnName: string;\n  @IsString()\n  value: string | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemAlgorithmDto.html":{"url":"classes/SaveProblemAlgorithmDto.html","title":"class - SaveProblemAlgorithmDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemAlgorithmDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-algorithm.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                algorithmName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        algorithmName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-algorithm.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class SaveProblemAlgorithmDto {\n  @IsString()\n  algorithmName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemSourceColumnsDto.html":{"url":"classes/SaveProblemSourceColumnsDto.html","title":"class - SaveProblemSourceColumnsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemSourceColumnsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-source-columns.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                droppableId\n                            \n                            \n                                options\n                            \n                            \n                                sectionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        droppableId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum({predictingFactors: 'predicting-factors', goalFactor: 'goal-factor'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sectionTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsString } from 'class-validator';\n\nexport class SaveProblemSourceColumnsDto {\n  @IsString()\n  sectionTitle: string;\n  @IsEnum({\n    predictingFactors: 'predicting-factors',\n    goalFactor: 'goal-factor',\n  })\n  droppableId: string;\n  @IsArray()\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SaveProblemSourceColumnsType.html":{"url":"interfaces/SaveProblemSourceColumnsType.html","title":"interface - SaveProblemSourceColumnsType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SaveProblemSourceColumnsType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/parameterizer.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            droppableId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            literalColumns\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            sectionTitle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        droppableId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        droppableId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        literalColumns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        literalColumns:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sectionTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sectionTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Client } from 'pg';\nimport { Connection } from 'src/connection/connection.entity';\nimport { User } from 'src/users/user.entity';\n\nexport interface CreateNewConnectionResponse {\n  resource: {\n    connection: Connection;\n    problem: {\n      id: string;\n      connection: Partial;\n      user: Partial;\n    };\n  };\n}\n\nexport interface CreateNewConnectionResponseWithError\n  extends CreateNewConnectionResponse {\n  error: { code: string; detail: string };\n}\n\nexport interface DatabaseInstance {\n  resource: Client;\n  error: { code: string; detail: string };\n}\n\nexport interface ProblemSource {\n  schema: string;\n  table: string;\n}\n\nexport interface ProblemSourceSchema {\n  schemaName: string;\n}\n\nexport interface ProblemSourceTable {\n  tableName: string;\n}\n\nexport interface ProblemSourceColumn {\n  columnName: string;\n}\n\nexport interface SaveProblemSourceColumnsType {\n  droppableId: string;\n  options: string[];\n  sectionTitle: string;\n  literalColumns?: Record;\n}\n\nexport interface ProblemSourceMappedColumns {\n  [key: string]: { ordinalValue: string; mappedValue: number }[];\n}\n\nexport interface NewRegistry {\n  columnName: string;\n  value: string | number;\n}\n\nexport interface ProbleSourceSelectedColumnsNewProblem {\n  columnName: string;\n  type: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemSourceColumnsTypeDto.html":{"url":"classes/SaveProblemSourceColumnsTypeDto.html","title":"class - SaveProblemSourceColumnsTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemSourceColumnsTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-source-columns-types.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                droppableId\n                            \n                            \n                                options\n                            \n                            \n                                sectionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        droppableId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum({ordinalColumns: 'ordinal-columns', booleanColumns: 'boolean-columns', numericColumns: 'numeric-columns', literalColumns: 'literal-columns'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns-types.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns-types.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sectionTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-columns-types.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsString } from 'class-validator';\n\nexport class SaveProblemSourceColumnsTypeDto {\n  @IsString()\n  sectionTitle: string;\n  @IsEnum({\n    ordinalColumns: 'ordinal-columns',\n    booleanColumns: 'boolean-columns',\n    numericColumns: 'numeric-columns',\n    literalColumns: 'literal-columns',\n  })\n  droppableId: string;\n  @IsArray()\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemSourceDto.html":{"url":"classes/SaveProblemSourceDto.html","title":"class - SaveProblemSourceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemSourceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-source.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                schema\n                            \n                            \n                                table\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        table\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class SaveProblemSourceDto {\n  @IsString()\n  schema: string;\n\n  @IsString()\n  table: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveProblemSourceSelectedOrdinalColumns.html":{"url":"classes/SaveProblemSourceSelectedOrdinalColumns.html","title":"class - SaveProblemSourceSelectedOrdinalColumns","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveProblemSourceSelectedOrdinalColumns\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parameterizer/dtos/save-problem-source-selected-ordinal-columns.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                selectedOrdinalColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        selectedOrdinalColumns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parameterizer/dtos/save-problem-source-selected-ordinal-columns.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject } from 'class-validator';\n\nexport class SaveProblemSourceSelectedOrdinalColumns {\n  @IsObject()\n  selectedOrdinalColumns: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SendgridModule.html":{"url":"modules/SendgridModule.html","title":"module - SendgridModule","body":"\n                   \n\n\n\n\n    Modules\n    SendgridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SendgridModule\n\n\n\ncluster_SendgridModule_providers\n\n\n\ncluster_SendgridModule_exports\n\n\n\n\nSendgridService \n\nSendgridService \n\n\n\nSendgridModule\n\nSendgridModule\n\nSendgridService  -->\n\nSendgridModule->SendgridService \n\n\n\n\n\nSendgridService\n\nSendgridService\n\nSendgridModule -->\n\nSendgridService->SendgridModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sendgrid/sendgrid.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SendgridService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SendgridService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SendgridService } from './sendgrid.service';\n\n@Module({\n  providers: [SendgridService],\n  exports: [SendgridService],\n})\nexport class SendgridModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SendgridService.html":{"url":"injectables/SendgridService.html","title":"injectable - SendgridService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SendgridService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/sendgrid.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/sendgrid/sendgrid.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(mail: SendGrid.MailDataRequired)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                            SendGrid.MailDataRequired\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as SendGrid from '@sendgrid/mail';\n\n@Injectable()\nexport class SendgridService {\n  constructor(private readonly configService: ConfigService) {\n    SendGrid.setApiKey(this.configService.get('SENDGRID_API_KEY'));\n  }\n\n  async send(\n    mail: SendGrid.MailDataRequired,\n  ): Promise {\n    try {\n      const transport = await SendGrid.send(mail);\n      return { error: null, statusCode: transport[0].statusCode };\n    } catch ({ response, code }) {\n      return {\n        error: {\n          code: 'sengrid_error',\n          detail: response.body.errors,\n        },\n        statusCode: code,\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SolverController.html":{"url":"controllers/SolverController.html","title":"controller - SolverController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SolverController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/solver/solver.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                solver\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                solve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        solve\n                        \n                    \n                \n            \n            \n                \n                    \n                    solve()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(solveDescription)@ApiResponse(solveSuccessfulResponse)@ApiResponse(solveBadRequestResponse)@Get('solve')\n                \n            \n\n            \n                \n                    Defined in src/solver/solver.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise>\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { SolverService } from './solver.service';\nimport {\n  solveBadRequestResponse,\n  solveDescription,\n  solveSuccessfulResponse,\n} from './swagger/solve';\n\n@Controller('solver')\nexport class SolverController {\n  constructor(private readonly solverService: SolverService) {}\n\n  @ApiOperation(solveDescription)\n  @ApiResponse(solveSuccessfulResponse)\n  @ApiResponse(solveBadRequestResponse)\n  @Get('solve')\n  async solve(): Promise> {\n    return this.solverService.solve();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SolverModule.html":{"url":"modules/SolverModule.html","title":"module - SolverModule","body":"\n                   \n\n\n\n\n    Modules\n    SolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SolverModule\n\n\n\ncluster_SolverModule_imports\n\n\n\ncluster_SolverModule_providers\n\n\n\n\nConnectionModule\n\nConnectionModule\n\n\n\nSolverModule\n\nSolverModule\n\nSolverModule -->\n\nConnectionModule->SolverModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nSolverModule -->\n\nProblemModule->SolverModule\n\n\n\n\n\nSolverService\n\nSolverService\n\nSolverModule -->\n\nSolverService->SolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/solver/solver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SolverService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SolverController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConnectionModule\n                        \n                        \n                            ProblemModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SolverService } from './solver.service';\nimport { SolverController } from './solver.controller';\nimport { ProblemModule } from 'src/problem/problem.module';\nimport { ConnectionModule } from 'src/connection/connection.module';\n\n@Module({\n  providers: [SolverService],\n  controllers: [SolverController],\n  imports: [ProblemModule, ConnectionModule],\n})\nexport class SolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SolverService.html":{"url":"injectables/SolverService.html","title":"injectable - SolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/solver/solver.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMinAndMax\n                            \n                            \n                                    Async\n                                getNearestNeighbor\n                            \n                            \n                                    Async\n                                normalizeBaseCases\n                            \n                            \n                                    Async\n                                normalizeFactor\n                            \n                            \n                                    Async\n                                normalizeRow\n                            \n                            \n                                    Async\n                                solve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(problemService: ProblemService, connectionService: ConnectionService)\n                    \n                \n                        \n                            \n                                Defined in src/solver/solver.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        problemService\n                                                  \n                                                        \n                                                                        ProblemService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connectionService\n                                                  \n                                                        \n                                                                        ConnectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMinAndMax\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMinAndMax(columnName: string, remoteBaseCasesConnection: RemoteBaseCasesConnection)\n                \n            \n\n\n            \n                \n                    Defined in src/solver/solver.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columnName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    remoteBaseCasesConnection\n                                    \n                                                RemoteBaseCasesConnection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNearestNeighbor\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNearestNeighbor(normalizedBaseCases: Record[], normalizedNewCase: Record, remoteBaseCasesConnection: RemoteBaseCasesConnection, distanceFunction: (caseBaseFactorX: number,newCaseFactorY: number,rMax: number,rMin: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/solver/solver.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    normalizedBaseCases\n                                    \n                                            Record[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalizedNewCase\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    remoteBaseCasesConnection\n                                    \n                                                RemoteBaseCasesConnection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    distanceFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        normalizeBaseCases\n                        \n                    \n                \n            \n            \n                \n                    \n                    normalizeBaseCases(columnTypes: literal type[], allBaseCases: Record[], algorithm: Algorithm, remoteBaseCasesConnection: RemoteBaseCasesConnection)\n                \n            \n\n\n            \n                \n                    Defined in src/solver/solver.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columnTypes\n                                    \n                                            literal type[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    allBaseCases\n                                    \n                                            Record[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    algorithm\n                                    \n                                                Algorithm\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    remoteBaseCasesConnection\n                                    \n                                                RemoteBaseCasesConnection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        normalizeFactor\n                        \n                    \n                \n            \n            \n                \n                    \n                    normalizeFactor(columnType: string, columnName: string, columnValue: string, algorithmName: string, remoteBaseCasesConnection: RemoteBaseCasesConnection)\n                \n            \n\n\n            \n                \n                    Defined in src/solver/solver.service.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    columnType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    columnName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    columnValue\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    algorithmName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    remoteBaseCasesConnection\n                                    \n                                                RemoteBaseCasesConnection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        normalizeRow\n                        \n                    \n                \n            \n            \n                \n                    \n                    normalizeRow(baseCase: Record, columnTypes: literal type[], algorithmName: string, remoteBaseCasesConnection: RemoteBaseCasesConnection)\n                \n            \n\n\n            \n                \n                    Defined in src/solver/solver.service.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    baseCase\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    columnTypes\n                                    \n                                            literal type[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    algorithmName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    remoteBaseCasesConnection\n                                    \n                                                RemoteBaseCasesConnection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        solve\n                        \n                    \n                \n            \n            \n                \n                    \n                    solve()\n                \n            \n\n\n            \n                \n                    Defined in src/solver/solver.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise>\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ConnectionService } from 'src/connection/connection.service';\nimport { Algorithm } from 'src/problem/entities/algorithm.entity';\nimport { ProblemService } from 'src/problem/problem.service';\nimport { RemoteBaseCasesConnection } from './solver.types';\n\n@Injectable()\nexport class SolverService {\n  constructor(\n    private problemService: ProblemService,\n    private connectionService: ConnectionService,\n  ) {}\n\n  async solve(): Promise> {\n    const problem = await this.problemService.getProblemBeingCreated([\n      'columns',\n      'connection',\n      'algorithm',\n      'registries',\n    ]);\n    const { columns, connection, table, schema, algorithm, registries } =\n      problem;\n    if (!problem) {\n      throw new NotFoundException({\n        error: {\n          code: 'no_problem_being_created',\n          detail: 'No problem is being created',\n        },\n        resource: null,\n      });\n    }\n    // type for each base case identified by column name\n    const columnTypes = columns.map((column) => ({\n      columnName: column.name,\n      columnType: column.type,\n    }));\n    // all the base cases fetched from the remote database\n    const allBaseCases = await this.connectionService.getAllRows(\n      connection,\n      table,\n      schema,\n    );\n\n    const formattedBaseCases = allBaseCases.map((baseCase) =>\n      Object.entries(baseCase)\n        .filter(([columnName]) => {\n          const { target } = columns.find(\n            (column) => column.name === columnName,\n          );\n          return target !== 'goal-factor';\n        })\n        .reduce(\n          (acc, [columnName, columnValue]) => ({\n            ...acc,\n            [columnName]: columnValue,\n          }),\n          {},\n        ),\n    );\n\n    const remoteBaseCasesConnection = { connection, table, schema };\n    const normalizedBaseCases = await this.normalizeBaseCases(\n      columnTypes,\n      formattedBaseCases,\n      algorithm,\n      remoteBaseCasesConnection,\n    );\n\n    const formattedNewCase = registries.reduce(\n      (acc, registry) => ({\n        ...acc,\n        [registry.name]: registry.value,\n      }),\n      {},\n    );\n\n    const normalizedNewCase = await this.normalizeRow(\n      formattedNewCase,\n      columnTypes,\n      algorithm.name,\n      remoteBaseCasesConnection,\n    );\n\n    if (algorithm.name === 'euclidian-distance') {\n      const nearestNeighbor = await this.getNearestNeighbor(\n        normalizedBaseCases,\n        normalizedNewCase,\n        remoteBaseCasesConnection,\n        (caseBaseFactorX: number, newCaseFactorY: number) =>\n          Math.sqrt(Math.pow(caseBaseFactorX - newCaseFactorY, 2)),\n      );\n      return nearestNeighbor;\n    } else if (algorithm.name === 'manhattan-distance') {\n      const nearestNeighbor = await this.getNearestNeighbor(\n        normalizedBaseCases,\n        normalizedNewCase,\n        remoteBaseCasesConnection,\n        (\n          caseBaseFactorX: number,\n          newCaseFactorY: number,\n          rMax: number,\n          rMin: number,\n        ) => 1 - Math.abs((caseBaseFactorX - newCaseFactorY) / (rMax + rMin)),\n      );\n      return nearestNeighbor;\n    }\n  }\n\n  async getMinAndMax(\n    columnName: string,\n    remoteBaseCasesConnection: RemoteBaseCasesConnection,\n  ) {\n    const {\n      resource: { mappedValues },\n    } = await this.problemService.getBaseColumnMappedValues(columnName);\n    if (mappedValues.length) {\n      return mappedValues.reduce(\n        (acc: { min: number; max: number }, { mappedValue }) => {\n          if (mappedValue  acc.max) {\n            acc.max = mappedValue;\n          }\n          return acc;\n        },\n        { min: Infinity, max: -Infinity },\n      );\n    } else {\n      const {\n        resource: { min, max },\n      } = await this.connectionService.getNumericColumnMinMax({\n        ...remoteBaseCasesConnection,\n        columnName,\n      });\n      return { min, max };\n    }\n  }\n\n  async getNearestNeighbor(\n    normalizedBaseCases: Record[],\n    normalizedNewCase: Record,\n    remoteBaseCasesConnection: RemoteBaseCasesConnection,\n    distanceFunction: (\n      caseBaseFactorX: number,\n      newCaseFactorY: number,\n      rMax?: number,\n      rMin?: number,\n    ) => number,\n  ): Promise> {\n    const [, newCaseColumnValue] = Object.entries(normalizedNewCase)[0];\n    const globalSimilitudes = await Promise.all(\n      normalizedBaseCases.map(async (baseCase) =>\n        Object.entries(baseCase).reduce(\n          async (accPromise, [columnName, columnValue]) => {\n            const { min, max } = await this.getMinAndMax(\n              columnName,\n              remoteBaseCasesConnection,\n            );\n            const acc = await accPromise;\n            if (\n              typeof columnValue === 'number' &&\n              typeof newCaseColumnValue === 'number'\n            ) {\n              const distance = distanceFunction(\n                columnValue,\n                newCaseColumnValue,\n                max,\n                min,\n              );\n              return {\n                ...acc,\n                [columnName]: distance,\n                globalSimilitude: Number(acc.globalSimilitude) + distance,\n              };\n            }\n            return {\n              ...acc,\n              [columnName]: columnValue,\n              globalSimilitude: Number(acc.globalSimilitude),\n            };\n          },\n          Promise.resolve({\n            [Object.keys(baseCase)[0]]: baseCase[Object.keys(baseCase)[0]],\n            globalSimilitude: 0,\n          }),\n        ),\n      ),\n    );\n\n    const nearestNeighbor = globalSimilitudes.reduce((acc, curr) =>\n      acc.globalSimilitude [],\n    algorithm: Algorithm,\n    remoteBaseCasesConnection: RemoteBaseCasesConnection,\n  ): Promise[]> {\n    return Promise.all(\n      allBaseCases.map(async (baseCase) => {\n        const normalizedValue = await this.normalizeRow(\n          baseCase,\n          columnTypes,\n          algorithm.name,\n          remoteBaseCasesConnection,\n        );\n        return normalizedValue;\n      }),\n    );\n  }\n\n  async normalizeRow(\n    baseCase: Record,\n    columnTypes: { columnName: string; columnType: string }[],\n    algorithmName: string,\n    remoteBaseCasesConnection: RemoteBaseCasesConnection,\n  ): Promise {\n    const normalizedBaseCase = {};\n    for (const [columnName, columnValue] of Object.entries(baseCase)) {\n      const { columnType } = columnTypes.find(\n        (column) => column.columnName === columnName,\n      );\n      const normalizedValue = await this.normalizeFactor(\n        columnType,\n        columnName,\n        columnValue,\n        algorithmName,\n        remoteBaseCasesConnection,\n      );\n      Object.assign(normalizedBaseCase, normalizedValue);\n    }\n    return normalizedBaseCase;\n  }\n\n  async normalizeFactor(\n    columnType: string,\n    columnName: string,\n    columnValue: string,\n    algorithmName: string,\n    remoteBaseCasesConnection: RemoteBaseCasesConnection,\n  ) {\n    if (columnType === 'ordinal-columns') {\n      const {\n        resource: { mi: Mi },\n      } = await this.problemService.getBaseColumnMi(columnName);\n      const {\n        resource: { mappedValue },\n      } = await this.problemService.getBaseColumnMappedValue(\n        columnName,\n        columnValue,\n      );\n      const normalizedValue = (mappedValue - 1) / (Mi - 1);\n      return { [columnName]: normalizedValue };\n    }\n\n    if (columnType === 'numeric-columns') {\n      if (algorithmName === 'euclidian-distance') {\n        const {\n          resource: { min, max },\n        } = await this.connectionService.getNumericColumnMinMax({\n          ...remoteBaseCasesConnection,\n          columnName,\n        });\n        const normalizedValue = (Number(columnValue) - min) / (max - min);\n\n        return { [columnName]: normalizedValue };\n      }\n      return { [columnName]: Number(columnValue) };\n    }\n    if (columnType === 'boolean-columns') {\n      return { [columnName]: columnValue ? 1 : 0 };\n    }\n    return { [columnName]: columnValue };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                connections\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                problems\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                resetPasswordToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        connections\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Connection[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, connection => connection.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        problems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Problem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, problem => problem.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshToken[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, refreshToken => refreshToken.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { RefreshToken } from 'src/auth/refreshToken.entity';\nimport { Connection } from 'src/connection/connection.entity';\nimport { Problem } from 'src/problem/entities/problem.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  email: string;\n  @Column()\n  password: string;\n  @OneToMany(() => RefreshToken, (refreshToken) => refreshToken.user)\n  refreshTokens: RefreshToken[];\n  @Column({ default: '' })\n  resetPasswordToken: string;\n  @OneToMany(() => Problem, (problem) => problem.user, { cascade: true })\n  problems: Problem[];\n  @OneToMany(() => Connection, (connection) => connection.user, {\n    cascade: true,\n  })\n  connections: Connection[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUserModule\n\nUserModule\n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersRepository.html":{"url":"classes/UsersRepository.html","title":"class - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { User } from './user.entity';\n\nexport class UsersRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                createQueryBuilder\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneBy\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createQueryBuilder\n                        \n                    \n                \n            \n            \n                \ncreateQueryBuilder(alias: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneBy\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneBy(property: FindOptionsWhere | FindOptionsWhere[])\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                FindOptionsWhere | FindOptionsWhere[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOneOptions, FindOptionsWhere, Repository } from 'typeorm';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) private usersRepository: Repository,\n  ) {}\n\n  async findOneBy(\n    property: FindOptionsWhere | FindOptionsWhere[],\n  ): Promise {\n    return this.usersRepository.findOneBy(property);\n  }\n\n  createQueryBuilder(alias: string) {\n    return this.usersRepository.createQueryBuilder(alias);\n  }\n\n  async findOne(options: FindOneOptions): Promise {\n    return this.usersRepository.findOne(options);\n  }\n  create(payload: { email: string; password: string }): User {\n    return this.usersRepository.create(payload);\n  }\n  async save(user: User): Promise {\n    return await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation.pipe.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation.pipe.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToInstance(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      const formattedErrors = {};\n      errors.forEach((e) => {\n        const messages = Object.values(e.constraints);\n        formattedErrors[e.property] = messages.flatMap((message) =>\n          // * the custom validation classes returns a comma separated string so we need to divide that string into an ordered list of substrings and assign it to the property\n          message.split(','),\n        );\n      });\n      throw new BadRequestException({\n        error: { code: 'invalid_body', detail: formattedErrors },\n        resource: null,\n      });\n    }\n    return value;\n  }\n\n  private toValidate(metatype): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/is-valid-password.ts\n            \n            class\n            IsValidPassword\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtBaseAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtRefreshAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtResetAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            variable\n            customResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtStrategyRefreshToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-reset-password.strategy.ts\n            \n            injectable\n            JwtStrategyResetPassword\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/refreshToken.entity.ts\n            \n            entity\n            RefreshToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/refreshTokens.repository.ts\n            \n            class\n            RefreshTokensRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recovePasswordDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recoverPasswordBadRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recoverPasswordSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/connection/connection-options.interface.ts\n            \n            interface\n            ConnectionOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/connection/connection.entity.ts\n            \n            entity\n            Connection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/connection/connection.service.ts\n            \n            injectable\n            ConnectionService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/connection/connections.repository.ts\n            \n            class\n            ConnectionsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/create-connection-options.dto.ts\n            \n            class\n            CreateConnectionOptionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/get-problem-source-tables.ts\n            \n            class\n            GetProblemSourceTablesDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-new-registry-selected-columns.dto.ts\n            \n            class\n            SaveNewRegistrySelectedColumnsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-algorithm.dto.ts\n            \n            class\n            SaveProblemAlgorithmDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-source-columns-types.dto.ts\n            \n            class\n            SaveProblemSourceColumnsTypeDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-source-columns.ts\n            \n            class\n            SaveProblemSourceColumnsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-source-selected-ordinal-columns.dto.ts\n            \n            class\n            SaveProblemSourceSelectedOrdinalColumns\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/dtos/save-problem-source.dto.ts\n            \n            class\n            SaveProblemSourceDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.controller.ts\n            \n            controller\n            ParameterizerController\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.service.ts\n            \n            injectable\n            ParameterizerService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            CreateNewConnectionResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            CreateNewConnectionResponseWithError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            DatabaseInstance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            NewRegistry\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSource\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSourceColumn\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSourceMappedColumns\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSourceSchema\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProblemSourceTable\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            ProbleSourceSelectedColumnsNewProblem\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/parameterizer/parameterizer.types.ts\n            \n            interface\n            SaveProblemSourceColumnsType\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/create-conection.ts\n            \n            variable\n            createConnectionBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/create-conection.ts\n            \n            variable\n            createConnectionCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/create-conection.ts\n            \n            variable\n            createConnectionDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/create-conection.ts\n            \n            variable\n            createConnectionSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-available-algorithms.ts\n            \n            variable\n            getAvailableAlgorithmsBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-available-algorithms.ts\n            \n            variable\n            getAvailableAlgorithmsDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-available-algorithms.ts\n            \n            variable\n            getAvailableAlgorithmsSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-schema.ts\n            \n            variable\n            getProblemSourceSchemasBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-schema.ts\n            \n            variable\n            getProblemSourceSchemasDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-schema.ts\n            \n            variable\n            getProblemSourceSchemasSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-columns-new-problem.ts\n            \n            variable\n            getProblemSourceSelectedColumnsNewProblemBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-columns-new-problem.ts\n            \n            variable\n            getProblemSourceSelectedColumnsNewProblemDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-columns-new-problem.ts\n            \n            variable\n            getProblemSourceSelectedColumnsNewProblemSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-columns.ts\n            \n            variable\n            getProblemSourceSelectedColumnsBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-columns.ts\n            \n            variable\n            getProblemSourceSelectedColumnsDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-columns.ts\n            \n            variable\n            getProblemSourceSelectedColumnsSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-ordinal-columns.ts\n            \n            variable\n            getProblemSourceSelectedOrdinalColumnsBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-ordinal-columns.ts\n            \n            variable\n            getProblemSourceSelectedOrdinalColumnsDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-selected-ordinal-columns.ts\n            \n            variable\n            getProblemSourceSelectedOrdinalColumnsSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-tables.ts\n            \n            variable\n            getProblemSourceTablesBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-tables.ts\n            \n            variable\n            getProblemSourceTablesCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-tables.ts\n            \n            variable\n            getProblemSourceTablesDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/get-problem-source-tables.ts\n            \n            variable\n            getProblemSourceTablesSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/problem-source-columns.ts\n            \n            variable\n            problemSourceColumnsBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/problem-source-columns.ts\n            \n            variable\n            problemSourceColumnsDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/problem-source-columns.ts\n            \n            variable\n            problemSourceColumnsSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-new-registry-selected-columns.ts\n            \n            variable\n            saveNewRegistrySelectedColumnsBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-new-registry-selected-columns.ts\n            \n            variable\n            saveNewRegistrySelectedColumnsCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-new-registry-selected-columns.ts\n            \n            variable\n            saveNewRegistrySelectedColumnsDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-new-registry-selected-columns.ts\n            \n            variable\n            saveNewRegistrySelectedColumnsSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-columns-types.ts\n            \n            variable\n            saveProblemSourceColumnsTypesBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-columns-types.ts\n            \n            variable\n            saveProblemSourceColumnsTypesCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-columns-types.ts\n            \n            variable\n            saveProblemSourceColumnsTypesDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-columns-types.ts\n            \n            variable\n            saveProblemSourceColumnsTypesSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-columns.ts\n            \n            variable\n            saveProblemSourceColumnsBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-columns.ts\n            \n            variable\n            saveProblemSourceColumnsCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-columns.ts\n            \n            variable\n            saveProblemSourceColumnsDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-columns.ts\n            \n            variable\n            saveProblemSourceColumnsSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-selected-ordinal-columns.ts\n            \n            variable\n            saveProblemSourceSelectedOrdinalColumnsBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-selected-ordinal-columns.ts\n            \n            variable\n            saveProblemSourceSelectedOrdinalColumnsCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-selected-ordinal-columns.ts\n            \n            variable\n            saveProblemSourceSelectedOrdinalColumnsDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source-selected-ordinal-columns.ts\n            \n            variable\n            saveProblemSourceSelectedOrdinalColumnsSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source.ts\n            \n            variable\n            saveProblemSourceBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source.ts\n            \n            variable\n            saveProblemSourceCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source.ts\n            \n            variable\n            saveProblemSourceDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem-source.ts\n            \n            variable\n            saveProblemSourceSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem.algorithm.ts\n            \n            variable\n            saveProblemAlgorithmBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem.algorithm.ts\n            \n            variable\n            saveProblemAlgorithmCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem.algorithm.ts\n            \n            variable\n            saveProblemAlgorithmDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/parameterizer/swagger/save-problem.algorithm.ts\n            \n            variable\n            saveProblemAlgorithmSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/algorithm.entity.ts\n            \n            entity\n            Algorithm\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/base-case-column.entity.ts\n            \n            entity\n            BaseCaseColumn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/literal-value.entity.ts\n            \n            entity\n            LiteralValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/mapped-value.entity.ts\n            \n            entity\n            MappedValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/problem.entity.ts\n            \n            entity\n            Problem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/entities/registry.entity.ts\n            \n            entity\n            Registry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/problem.service.ts\n            \n            injectable\n            ProblemService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/problem/repositories/algorithms.repository.ts\n            \n            class\n            AlgorithmsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/repositories/base-case-column.repository.ts\n            \n            class\n            BaseCaseColumns\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/repositories/literal-values.repository.ts\n            \n            class\n            LiteralValuesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/repositories/mapped-values.repository.ts\n            \n            class\n            MappedValuesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/problem/repositories/problems.repository.ts\n            \n            class\n            ProblemsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.service.ts\n            \n            injectable\n            SendgridService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/solver/solver.controller.ts\n            \n            controller\n            SolverController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/solver/solver.service.ts\n            \n            injectable\n            SolverService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/solver/solver.types.ts\n            \n            interface\n            RemoteBaseCasesConnection\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/solver/swagger/solve.ts\n            \n            variable\n            solveBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/solver/swagger/solve.ts\n            \n            variable\n            solveDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/solver/swagger/solve.ts\n            \n            variable\n            solveSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            class\n            UsersRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.0\n        \n            @sendgrid/mail : ^7.7.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            joi : ^17.6.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConnectionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParameterizerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProblemModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SendgridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConnectionModule\n\n\n\ncluster_ConnectionModule_exports\n\n\n\ncluster_ConnectionModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_ParameterizerModule\n\n\n\ncluster_ParameterizerModule_providers\n\n\n\ncluster_ProblemModule\n\n\n\ncluster_ProblemModule_exports\n\n\n\ncluster_ProblemModule_providers\n\n\n\ncluster_SendgridModule\n\n\n\ncluster_SendgridModule_exports\n\n\n\ncluster_SolverModule\n\n\n\ncluster_SolverModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConnectionModule\n\nConnectionModule\n\n\n\nParameterizerModule\n\nParameterizerModule\n\nParameterizerModule -->\n\nConnectionModule->ParameterizerModule\n\n\n\n\n\nSolverModule\n\nSolverModule\n\nSolverModule -->\n\nConnectionModule->SolverModule\n\n\n\nAppModule -->\n\nConnectionModule->AppModule\n\n\n\n\n\nConnectionService \n\nConnectionService \n\nConnectionService  -->\n\nConnectionModule->ConnectionService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nConnectionModule -->\n\nDatabaseModule->ConnectionModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\nAppModule -->\n\nParameterizerModule->AppModule\n\n\n\n\n\nProblemModule\n\nProblemModule\n\nConnectionModule -->\n\nProblemModule->ConnectionModule\n\n\n\nParameterizerModule -->\n\nProblemModule->ParameterizerModule\n\n\n\nSolverModule -->\n\nProblemModule->SolverModule\n\n\n\nAppModule -->\n\nProblemModule->AppModule\n\n\n\n\n\nProblemService \n\nProblemService \n\nProblemService  -->\n\nProblemModule->ProblemService \n\n\n\n\n\nSendgridModule\n\nSendgridModule\n\nAuthModule -->\n\nSendgridModule->AuthModule\n\n\n\nAppModule -->\n\nSendgridModule->AppModule\n\n\n\n\n\nSendgridService \n\nSendgridService \n\nSendgridService  -->\n\nSendgridModule->SendgridService \n\n\n\nAppModule -->\n\nSolverModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nConnectionModule -->\n\nUserModule->ConnectionModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSendgridService\n\nSendgridService\n\nSendgridModule -->\n\nSendgridService->SendgridModule\n\n\n\nAppModule -->\n\nSendgridService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nJwtStrategyRefreshToken\n\nJwtStrategyRefreshToken\n\nAuthModule -->\n\nJwtStrategyRefreshToken->AuthModule\n\n\n\n\n\nJwtStrategyResetPassword\n\nJwtStrategyResetPassword\n\nAuthModule -->\n\nJwtStrategyResetPassword->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nConnectionService\n\nConnectionService\n\nConnectionModule -->\n\nConnectionService->ConnectionModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nParameterizerService\n\nParameterizerService\n\nParameterizerModule -->\n\nParameterizerService->ParameterizerModule\n\n\n\n\n\nProblemService\n\nProblemService\n\nProblemModule -->\n\nProblemService->ProblemModule\n\n\n\n\n\nSolverService\n\nSolverService\n\nSolverModule -->\n\nSolverService->SolverModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
