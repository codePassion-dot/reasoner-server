var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.785,1,1.993]],["body/controllers/AppController.html",[0,2.936,1,3.276,2,2.39,3,0.443,4,0.383,5,0.383,6,3.48,7,0.713,8,1.542,9,4.825,10,2.39,11,0.034,12,0.958,13,4.186,14,1.255,15,1.542,16,0.544,17,0.79,18,2.871,19,3.48,20,0.443,21,0.116,22,3.015,23,3.48,24,1.255,25,4.186,26,0.028,27,0.028]],["title/modules/AppModule.html",[28,1.336,29,1.993]],["body/modules/AppModule.html",[1,2.933,2,2.276,3,0.301,4,0.26,5,0.26,11,0.035,16,0.634,17,0.537,18,2.808,19,2.364,20,0.301,21,0.079,26,0.021,27,0.021,28,1.703,29,3.874,30,1.332,31,1.868,32,2.364,33,2.364,34,2.364,35,3.108,36,2.808,37,2.808,38,2.551,39,2.276,40,1.016,41,1.467,42,2.843,43,2.54,44,3.314,45,3.986,46,2.573,47,1.332,48,2.048,49,1.467,50,3.313,51,2.843,52,2.843,53,1.425,54,2.843,55,1,56,2.843,57,2.843,58,2.843,59,2.843,60,2.843,61,2.843,62,2.871,63,2.843,64,2.843,65,2.843,66,2.843,67,2.843,68,2.843,69,2.843,70,2.843,71,2.843,72,2.843,73,2.843,74,2.843,75,2.843,76,2.843,77,2.843,78,1.016,79,0.592,80,2.843,81,2.843,82,2.843,83,2.843,84,2.843,85,2.843,86,2.843,87,0.931,88,2.843,89,2.364,90,2.843,91,1.812,92,2.843]],["title/injectables/AppService.html",[18,1.613,93,0.378]],["body/injectables/AppService.html",[3,0.461,4,0.398,5,0.398,7,0.742,8,1.58,9,4.891,11,0.034,12,0.997,14,1.306,15,1.58,16,0.461,17,0.822,18,2.717,20,0.461,21,0.121,24,1.306,26,0.028,27,0.028,93,0.636,94,1.426,95,3.62,96,4.355,97,4.355,98,4.355]],["title/controllers/AuthController.html",[0,1.785,99,1.993]],["body/controllers/AuthController.html",[0,0.864,2,0.864,3,0.16,4,0.138,5,0.138,7,0.258,8,0.74,10,2.264,11,0.035,12,0.907,14,1.189,15,1.629,16,0.575,17,0.286,20,0.16,21,0.042,24,1.189,26,0.013,27,0.013,46,1.61,47,0.709,53,1.603,55,1.125,62,3.062,78,1.941,79,0.826,87,1.583,99,1.572,100,1.258,101,1.513,102,1.513,103,2.595,104,2.595,105,2.595,106,2.051,107,1.258,108,4.698,109,1.513,110,1.513,111,1.417,112,1.417,113,1.417,114,1.156,115,2.428,116,1.513,117,1.513,118,1.783,119,1.513,120,4.019,121,1.572,122,1.513,123,2.856,124,1.513,125,1.513,126,1.513,127,1.513,128,1.513,129,1.513,130,2.294,131,1.513,132,3.122,133,1.513,134,3.122,135,1.513,136,1.513,137,1.513,138,3.296,139,3.6,140,1.513,141,1.513,142,1.513,143,1.513,144,1.258,145,3.6,146,1.09,147,0.964,148,1.463,149,1.09,150,0.964,151,1.513,152,0.964,153,0.781,154,2.467,155,0.964,156,1.09,157,1.09,158,0.964,159,1.09,160,1.09,161,1.09,162,1.513,163,1.09,164,1.09,165,1.09,166,1.09,167,2.467,168,1.09,169,1.09,170,1.09,171,1.09,172,1.09,173,1.09,174,1.09,175,1.513,176,1.09,177,1.09,178,1.09,179,1.09,180,1.513,181,1.513,182,0.709,183,1.408,184,1.513,185,1.513,186,1.513,187,1.513,188,2.467,189,1.513,190,2.266,191,2.964,192,1.858,193,1.513,194,1.694,195,1.857,196,1.513,197,1.513,198,1.513,199,1.513,200,1.513,201,2.467,202,1.513,203,2.993,204,2.467,205,3.122,206,3.122,207,2.467,208,2.051,209,3.122,210,2.467,211,2.467,212,2.467,213,2.467,214,2.051,215,2.993,216,2.051,217,2.051,218,1.513,219,1.513,220,1.513,221,2.467,222,1.513,223,1.572,224,1.258,225,0.647,226,0.647,227,1.513,228,1.513,229,1.513,230,1.258,231,1.258,232,1.513,233,1.513,234,2.467,235,1.513,236,1.513,237,1.513,238,1.513,239,1.513,240,1.513,241,1.513,242,1.09,243,1.513,244,1.513,245,1.513,246,1.513,247,1.513,248,1.513,249,1.513,250,1.513,251,1.513,252,1.513]],["title/modules/AuthModule.html",[28,1.336,35,1.785]],["body/modules/AuthModule.html",[2,2.371,3,0.319,4,0.276,5,0.276,11,0.035,16,0.645,17,0.57,20,0.319,21,0.084,26,0.022,27,0.022,28,1.774,30,1.413,31,1.946,35,3.537,36,2.861,37,2.861,39,2.371,40,1.485,41,1.556,43,2.646,44,2.991,48,2.173,49,1.556,53,1.078,99,3.026,148,2.598,149,2.173,153,2.142,253,2.508,254,3.016,255,2.508,256,3.166,257,3.166,258,3.166,259,3.016,260,3.016,261,2.173,262,4.153,263,1.413,264,3.016,265,3.016,266,3.016,267,1.722,268,3.016,269,3.016,270,3.016,271,2.173,272,2.142,273,2.173,274,3.016,275,3.016]],["title/injectables/AuthService.html",[93,0.378,148,1.465]],["body/injectables/AuthService.html",[3,0.122,4,0.105,5,0.105,7,0.196,8,0.589,11,0.035,12,0.996,14,1.251,15,1.707,16,0.491,17,0.218,20,0.122,21,0.032,24,1.305,26,0.011,27,0.011,38,1.855,40,0.412,41,0.594,46,2.042,47,0.54,49,0.594,53,1.703,55,1.428,78,1.94,79,0.967,87,1.365,89,0.958,93,0.237,94,0.377,103,1.633,104,2.135,105,1.633,106,2.135,107,1.633,111,1.555,112,1.555,113,1.555,114,2.327,115,2.836,118,0.658,147,0.734,148,0.921,150,0.734,157,0.83,158,0.734,182,0.921,183,1.945,190,2.693,191,2.484,192,2.585,194,1.691,195,2.042,203,1.633,214,0.958,215,1.633,216,0.958,217,0.958,223,2.363,225,1.297,226,1.297,242,1.415,261,0.83,271,0.83,272,2.042,273,0.83,276,0.958,277,1.965,278,1.965,279,2.568,280,1.152,281,1.737,282,3.958,283,1.152,284,1.965,285,1.152,286,1.965,287,1.152,288,1.152,289,1.152,290,1.152,291,1.152,292,2.568,293,2.568,294,1.152,295,1.965,296,1.152,297,1.152,298,1.633,299,1.152,300,1.152,301,2.568,302,1.152,303,2.831,304,0.958,305,1.415,306,1.152,307,0.958,308,1.152,309,3.406,310,1.152,311,1.965,312,2.568,313,2.568,314,2.568,315,2.568,316,2.135,317,2.568,318,2.568,319,2.568,320,1.965,321,1.934,322,2.042,323,1.152,324,0.958,325,1.633,326,4.17,327,3.035,328,3.035,329,1.152,330,1.152,331,1.152,332,1.152,333,1.467,334,1.152,335,1.152,336,1.152,337,2.568,338,2.568,339,3.708,340,1.152,341,2.568,342,1.152,343,2.568,344,1.152,345,1.965,346,1.152,347,1.152,348,1.152,349,0.958,350,1.152,351,1.152,352,1.152,353,1.152,354,3.708,355,1.152,356,1.152,357,1.152,358,1.965,359,1.965,360,1.633,361,1.152,362,1.152,363,1.152,364,1.152,365,0.958,366,1.965,367,1.965,368,1.152,369,1.152,370,1.152,371,1.152,372,1.152,373,1.965,374,1.152,375,2.568,376,1.965,377,0.958,378,1.633,379,0.958,380,1.152,381,0.958,382,1.152,383,1.965,384,1.152,385,1.152,386,1.965,387,1.152,388,0.958,389,1.152,390,1.152,391,1.152,392,1.152,393,0.958,394,1.152,395,1.152,396,1.152,397,0.83,398,0.734,399,1.152,400,1.152]],["title/classes/CreateUserDto.html",[21,0.087,130,1.993]],["body/classes/CreateUserDto.html",[3,0.359,4,0.311,5,0.311,7,0.579,10,2.569,11,0.034,12,1.03,15,1.611,16,0.476,20,0.359,21,0.125,26,0.024,27,0.024,79,0.937,87,1.99,114,2.618,130,2.867,401,1.752,402,4.194,403,2.823,404,2.321,405,5.045,406,5.858,407,3.868,408,3.396,409,3.396,410,3.396,411,5.371,412,5.045,413,4.499,414,4.499,415,4.499,416,3.396,417,5.371,418,3.24,419,4.499,420,3.396,421,4.499,422,3.396,423,3.396,424,1.752,425,2.164,426,2.164,427,3.396,428,3.396]],["title/classes/IsValidPassword.html",[21,0.087,426,1.993]],["body/classes/IsValidPassword.html",[3,0.342,4,0.295,5,0.295,7,0.742,8,1.305,11,0.034,12,0.996,14,1.305,15,1.475,16,0.342,20,0.342,21,0.121,24,1.579,26,0.023,27,0.023,78,1.155,79,0.906,87,1.724,111,1.555,112,1.759,113,1.555,190,2.305,195,1.666,401,1.666,407,3.543,424,2.244,425,2.058,426,3.135,429,4.09,430,2.326,431,3.617,432,4.92,433,4.351,434,4.351,435,5.784,436,3.23,437,5.264,438,4.351,439,3.23,440,3.23,441,4.351,442,2.326,443,3.23,444,3.23,445,2.685,446,5.264,447,3.23,448,4.351,449,3.23,450,3.23,451,3.23,452,2.685,453,4.351,454,3.23,455,3.23,456,4.351,457,3.23,458,3.23,459,3.23,460,3.23]],["title/injectables/JwtAuthGuard.html",[93,0.378,152,1.993]],["body/injectables/JwtAuthGuard.html",[3,0.617,4,0.327,5,0.327,7,0.61,8,1.397,11,0.034,12,0.819,14,1.074,16,0.548,17,0.676,20,0.379,21,0.099,24,1.074,26,0.025,27,0.025,40,1.28,55,1.376,79,0.746,87,1.172,93,0.563,94,1.172,111,1.28,112,1.28,113,1.28,118,2.044,152,2.968,153,2.403,194,1.53,225,1.53,226,1.53,263,1.678,267,2.044,321,2.281,322,1.847,461,2.968,462,2.579,463,4.658,464,4.658,465,5.483,466,4.558,467,3.58,468,3.58,469,3.872,470,3.872,471,4.658,472,3.58,473,1.678,474,3.58,475,3.58,476,2.976,477,3.58,478,3.58]],["title/injectables/JwtStrategyRefreshToken.html",[93,0.378,256,1.785]],["body/injectables/JwtStrategyRefreshToken.html",[3,0.284,4,0.245,5,0.245,7,0.457,8,1.147,11,0.035,12,0.875,14,0.805,16,0.595,17,0.506,20,0.284,21,0.074,24,1.147,26,0.021,27,0.021,46,2.755,47,1.257,53,1.367,55,0.673,62,1.932,78,1.594,79,0.797,93,0.462,94,0.878,111,1.367,112,1.367,113,1.367,118,2.545,120,3.18,121,1.709,138,4.271,146,1.932,153,1.973,182,1.792,183,2.184,190,2.089,191,1.532,192,1.792,194,1.146,195,1.384,223,1.709,224,3.18,225,1.146,226,1.146,230,2.23,231,2.23,256,2.184,263,1.257,267,3.139,272,2.836,273,1.932,281,2.576,305,2.755,307,2.23,333,1.532,365,2.23,398,2.841,424,1.973,442,1.932,461,2.841,473,1.257,479,2.23,480,1.932,481,2.683,482,3.825,483,2.683,484,2.23,485,2.755,486,1.709,487,2.755,488,1.932,489,2.23,490,2.683,491,3.825,492,2.23,493,2.23,494,2.683,495,2.683,496,3.825,497,2.683,498,3.18,499,2.683,500,2.23,501,3.825,502,2.683,503,2.683,504,2.683,505,2.683,506,2.683,507,2.683,508,2.683]],["title/injectables/JwtStrategyResetPassword.html",[93,0.378,257,1.785]],["body/injectables/JwtStrategyResetPassword.html",[3,0.373,4,0.323,5,0.323,7,0.601,8,1.383,11,0.034,12,1.056,14,1.058,16,0.577,17,0.666,20,0.373,21,0.098,24,1.058,26,0.025,27,0.025,40,1.949,46,2.918,47,1.653,78,1.837,79,0.96,87,1.155,93,0.557,94,1.155,111,1.649,112,1.649,113,1.649,121,2.248,153,2.379,182,1.653,223,2.248,257,2.634,263,1.653,398,2.248,424,2.379,442,2.54,461,3.275,473,1.653,480,3.322,484,2.932,485,3.322,486,2.248,487,3.322,488,2.54,489,2.932,492,2.932,493,2.932,498,2.932,509,2.932,510,3.527,511,4.612,512,3.527,513,3.527,514,3.527]],["title/injectables/LocalAuthGuard.html",[93,0.378,155,1.993]],["body/injectables/LocalAuthGuard.html",[3,0.48,4,0.415,5,0.415,11,0.034,16,0.571,17,0.857,20,0.48,21,0.126,26,0.029,27,0.029,93,0.652,94,1.486,155,3.44,263,2.126,462,3.268,470,3.772,473,2.126,515,3.772,516,4.538]],["title/injectables/LocalStrategy.html",[93,0.378,258,1.785]],["body/injectables/LocalStrategy.html",[3,0.353,4,0.305,5,0.305,7,0.569,8,1.334,11,0.035,12,1.018,14,1.001,15,1.714,16,0.588,17,0.63,20,0.353,21,0.093,22,2.405,24,1.001,26,0.024,27,0.024,55,1.338,78,1.788,79,0.926,87,1.747,93,0.537,94,1.093,111,1.59,112,1.59,113,1.59,114,2.084,115,2.54,147,2.128,148,2.678,149,2.405,156,2.405,182,1.564,190,1.564,192,1.564,194,1.426,225,1.426,226,1.426,258,2.54,263,1.564,321,2.128,322,1.722,397,2.405,424,2.295,469,3.698,473,1.564,476,2.776,485,2.405,486,2.128,487,2.405,488,2.405,517,2.776,518,3.339,519,3.339,520,4.448,521,3.339,522,3.339,523,3.339,524,3.339,525,2.776]],["title/entities/RefreshToken.html",[53,1.118,526,1.785]],["body/entities/RefreshToken.html",[3,0.386,4,0.333,5,0.333,7,0.621,10,3.152,11,0.034,12,1.264,15,1.656,16,0.499,20,0.386,21,0.101,26,0.025,27,0.025,53,2.044,55,1.531,79,1.15,91,2.324,147,2.324,333,2.982,349,4.342,404,2.431,526,2.691,527,3.031,528,4.713,529,4.753,530,3.646,531,3.918,532,3.646,533,3.646,534,3.646,535,4.713,536,3.646,537,4.713,538,3.031,539,1.881]],["title/classes/RefreshTokensRepository.html",[21,0.087,272,1.613]],["body/classes/RefreshTokensRepository.html",[3,0.48,4,0.415,5,0.415,11,0.034,16,0.571,20,0.48,21,0.126,26,0.029,27,0.029,53,1.622,271,3.268,272,2.785,401,2.341,473,2.53,539,2.341,540,3.772,541,3.673]],["title/modules/SendgridModule.html",[28,1.336,36,1.613]],["body/modules/SendgridModule.html",[3,0.432,4,0.374,5,0.374,11,0.034,16,0.536,17,0.771,20,0.432,21,0.113,26,0.027,27,0.027,28,2.164,30,1.914,31,2.373,36,3.153,38,2.966,39,2.892,40,1.46,41,2.107,43,3.228,542,3.396,543,4.085,544,3.396,545,4.085,546,4.211,547,4.085]],["title/injectables/SendgridService.html",[38,1.465,93,0.378]],["body/injectables/SendgridService.html",[3,0.364,4,0.314,5,0.314,7,0.586,8,1.36,11,0.035,12,1.038,14,1.03,16,0.537,17,0.649,20,0.364,21,0.095,22,2.474,23,2.856,24,1.36,26,0.024,27,0.024,38,2.124,46,2.972,47,1.61,78,1.814,79,0.944,93,0.548,94,1.125,108,2.856,111,1.621,112,1.621,113,1.621,115,2.588,157,2.474,158,2.189,182,1.61,190,1.61,192,1.61,194,1.937,195,1.772,225,2.168,226,1.468,242,3.265,378,3.769,379,4.218,480,2.474,548,2.856,549,4.218,550,3.435,551,3.435,552,3.435,553,3.435,554,3.435,555,3.435,556,3.435,557,3.435,558,3.435,559,3.435,560,3.435]],["title/entities/User.html",[55,0.785,526,1.785]],["body/entities/User.html",[3,0.367,4,0.317,5,0.317,7,0.591,10,3.212,11,0.034,12,1.287,15,1.792,16,0.482,20,0.367,21,0.096,26,0.024,27,0.024,53,2.064,55,1.144,79,1.171,87,1.668,91,2.208,114,2.388,123,3.67,333,2.909,404,2.352,500,4.236,526,2.603,529,4.801,531,3.79,538,2.881,539,1.788,561,2.881,562,3.465,563,3.465,564,3.465,565,3.465,566,4.559,567,3.465,568,3.465,569,3.465,570,3.465,571,4.559,572,2.881]],["title/modules/UserModule.html",[28,1.336,37,1.613]],["body/modules/UserModule.html",[3,0.414,4,0.358,5,0.358,11,0.034,16,0.6,17,0.738,20,0.414,21,0.109,26,0.026,27,0.026,28,2.106,30,1.832,31,2.309,37,3.123,39,2.814,40,1.398,41,2.017,43,3.14,44,2.816,48,3.549,49,2.017,55,0.981,281,2.949,546,4.097,573,3.251,574,3.251,575,3.251,576,3.91,577,2.816,578,3.91,579,3.91]],["title/classes/UsersRepository.html",[21,0.087,580,1.993]],["body/classes/UsersRepository.html",[3,0.48,4,0.415,5,0.415,11,0.034,16,0.571,20,0.48,21,0.126,26,0.029,27,0.029,55,1.138,401,2.341,473,2.53,539,2.341,541,3.673,577,3.268,580,3.44,581,3.772]],["title/injectables/UsersService.html",[93,0.378,281,1.465]],["body/injectables/UsersService.html",[3,0.291,4,0.252,5,0.252,7,0.469,8,1.168,11,0.035,12,1.233,14,1.556,15,1.556,16,0.52,17,0.519,20,0.291,21,0.076,24,1.556,26,0.021,27,0.021,49,1.419,55,1.389,78,2.057,79,1.178,87,0.901,93,0.471,94,0.901,111,1.925,112,1.925,113,1.925,114,1.289,115,3.075,150,2.482,182,1.825,183,1.571,192,1.289,281,1.825,298,3.237,304,2.287,398,1.753,539,1.419,541,3.132,577,1.981,580,2.482,582,2.287,583,3.894,584,3.894,585,4.52,586,3.894,587,2.751,588,2.751,589,3.894,590,2.751,591,3.894,592,2.751,593,2.751,594,3.894,595,4.915,596,2.751,597,2.751,598,2.751,599,5.538,600,2.751,601,3.237,602,3.894,603,2.751,604,2.751,605,2.751,606,2.751,607,2.751,608,2.751,609,2.751]],["title/injectables/ValidationPipe.html",[93,0.378,610,2.252]],["body/injectables/ValidationPipe.html",[3,0.311,4,0.269,5,0.269,7,0.501,8,1.224,11,0.035,12,0.934,14,1.406,15,1.406,16,0.496,17,0.555,20,0.311,21,0.13,24,1.406,26,0.022,27,0.022,78,1.675,79,0.613,93,0.493,94,0.963,111,1.459,112,1.459,113,1.459,121,1.875,183,2.676,190,2.492,191,1.68,192,1.378,194,1.257,195,1.517,225,1.257,226,1.257,303,3.393,321,1.875,322,1.517,401,1.517,418,2.119,424,1.517,425,1.875,431,2.446,445,2.446,452,2.446,601,2.446,610,2.94,611,2.446,612,4.081,613,4.081,614,4.081,615,2.942,616,4.687,617,4.687,618,4.081,619,2.942,620,5.062,621,2.942,622,4.208,623,4.081,624,2.942,625,2.446,626,2.942,627,3.393,628,2.942,629,2.942,630,2.942,631,2.942,632,4.081,633,2.942,634,2.942,635,2.942,636,2.942,637,2.942,638,2.942,639,2.942,640,2.942,641,2.942,642,2.942,643,2.942,644,2.942,645,2.942,646,2.942,647,2.942,648,2.942,649,2.942,650,2.942,651,2.942]],["title/coverage.html",[652,3.066]],["body/coverage.html",[0,2.012,1,1.527,5,0.219,6,1.992,11,0.034,18,1.236,21,0.128,26,0.019,27,0.019,38,1.123,40,0.856,53,0.856,55,0.601,79,0.499,93,0.683,95,1.992,99,1.527,100,1.992,130,1.527,148,1.123,152,1.527,155,1.527,159,1.726,160,1.726,161,1.726,163,1.726,164,1.726,165,1.726,166,1.726,168,1.726,169,1.726,170,1.726,171,1.726,172,1.726,173,1.726,174,1.726,176,1.726,177,1.726,178,1.726,179,1.726,256,1.368,257,1.368,258,1.368,267,1.368,272,1.236,276,1.992,281,1.123,322,1.236,402,1.992,403,1.992,407,1.726,418,4.578,426,1.527,429,1.992,430,3.925,461,2.664,462,2.538,479,1.992,509,1.992,515,1.992,517,1.992,526,2.012,527,1.992,540,1.992,548,1.992,561,1.992,580,1.527,581,1.992,582,1.992,610,1.726,611,1.992,652,1.726,653,2.396,654,2.396,655,2.396,656,4.181,657,2.396,658,2.396,659,5.311,660,6.202,661,3.476,662,6.063,663,3.476,664,3.476,665,3.833,666,4.53,667,3.833,668,3.833,669,1.992,670,2.396,671,1.992,672,2.396,673,2.396,674,2.396]],["title/dependencies.html",[31,1.761,675,2.175]],["body/dependencies.html",[11,0.035,17,0.719,21,0.135,26,0.026,27,0.026,31,1.785,47,1.785,49,1.965,50,3.167,144,3.167,146,2.744,153,1.965,156,2.744,158,2.428,261,2.744,263,1.785,305,2.744,425,2.428,486,3.398,539,1.965,625,3.167,676,5.332,677,3.81,678,3.81,679,5.332,680,3.81,681,3.81,682,3.81,683,3.81,684,3.81,685,3.81,686,3.81,687,3.81,688,3.81,689,3.81,690,3.81,691,3.81,692,3.81,693,3.81,694,3.81,695,3.81,696,3.81,697,3.81,698,3.81,699,3.81,700,3.81,701,3.81,702,3.81]],["title/miscellaneous/functions.html",[703,1.668,704,3.124]],["body/miscellaneous/functions.html",[7,0.824,11,0.03,26,0.03,27,0.03,669,4.018,671,4.918,703,3.08,704,4.018,705,4.833]],["title/index.html",[7,0.446,706,2.617,707,2.617]],["body/index.html",[4,0.329,11,0.034,26,0.025,27,0.025,208,2.994,316,2.994,393,2.994,541,2.295,652,2.594,708,3.602,709,3.602,710,4.676,711,3.602,712,3.602,713,3.602,714,3.602,715,3.602,716,3.602,717,2.594,718,5.192,719,3.602,720,3.602,721,5.941,722,3.602,723,3.602,724,3.602,725,5.836,726,3.602,727,3.602,728,4.676,729,3.602,730,3.602,731,3.602,732,4.676,733,4.676,734,3.602,735,3.602,736,3.602,737,4.676,738,4.676,739,3.602,740,3.602,741,3.602,742,3.602,743,3.602,744,2.994,745,3.602,746,3.602,747,3.602,748,3.602,749,3.602,750,3.602,751,3.602,752,3.602,753,3.602,754,2.994,755,3.602,756,3.602,757,3.602,758,3.602,759,3.602,760,3.602,761,2.994]],["title/modules.html",[30,1.994]],["body/modules.html",[11,0.029,26,0.029,27,0.029,29,2.925,30,2.151,35,2.621,36,2.368,37,2.368,744,4.977,762,5.987,763,5.987,764,5.987]],["title/overview.html",[765,3.538]],["body/overview.html",[2,1.934,11,0.034,18,2.599,26,0.024,27,0.024,29,3.929,30,1.587,31,2.104,32,2.815,33,2.815,34,2.815,35,3.574,36,3.019,37,3.019,38,2.785,39,2.564,40,1.211,41,1.747,91,2.158,94,1.109,148,2.361,253,2.815,255,2.815,256,2.877,257,2.877,258,2.877,281,2.743,401,1.747,542,2.815,544,2.815,573,2.815,574,2.815,575,2.815,765,2.815,766,4.49,767,4.49,768,3.386]],["title/properties.html",[404,1.938,675,2.175]],["body/properties.html",[11,0.034,26,0.03,27,0.03,404,2.463,717,3.439,754,3.97,761,3.97,769,4.775,770,4.775,771,4.775]],["title/miscellaneous/variables.html",[703,1.668,772,3.124]],["body/miscellaneous/variables.html",[7,0.218,11,0.035,15,1.729,26,0.012,27,0.012,40,0.458,55,1.21,79,1.307,87,1.283,114,1.837,118,1.585,123,1.548,150,1.37,159,1.548,160,1.548,161,1.548,163,1.548,164,1.548,165,1.548,166,1.548,168,1.548,169,1.548,170,1.548,171,1.548,172,1.548,173,1.548,174,1.548,176,1.548,177,1.548,178,1.548,179,1.548,191,2.068,194,1.547,225,1.547,226,1.547,267,1.227,322,1.109,324,1.065,325,1.065,333,1.227,360,1.787,377,1.065,381,1.065,388,1.065,397,2,404,2.906,430,3.272,466,3.901,525,1.787,549,1.065,572,4.491,622,4.491,627,5.024,661,1.065,663,1.065,664,2.702,665,1.065,666,1.787,667,3.011,668,3.011,703,0.817,717,3.38,772,1.065,773,2.777,774,2.777,775,3.251,776,4.369,777,3.622,778,2.15,779,1.282,780,4.692,781,4.692,782,5.036,783,2.15,784,1.282,785,1.282,786,1.282,787,2.777,788,2.777,789,1.282,790,1.282,791,1.282,792,1.282,793,1.282,794,2.15,795,2.15]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.1",{"_index":770,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":768,"title":{},"body":{"overview.html":{}}}],["1000",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["17.6.0",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":767,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["201",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["202",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["3.0.2",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["4",{"_index":766,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.1",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["7.2.0",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["7.7.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["7a7e65ab6bf44627bea5758e97fbb969",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["8.0.0",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9.0.0",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["accesstokenpayload",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["alias",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["already",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":745,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody(resetpasswordcorrectpayload",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody(signincorrectpayload",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody(signupcorrectpayload",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(recovepassworddescription",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(recovepassworddescription)@apiresponse(recoverpasswordsuccessfulresponse)@apiresponse(recoverpasswordbadrequest)@get('recover",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(refreshtokendescription",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(refreshtokendescription)@apiresponse(refreshtokensuccessfulresponse)@apiresponse(refreshtokenunauthorizedresponse)@useguards(jwtauthguard)@get('refresh",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(resetpassworddescription",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(resetpassworddescription)@apiresponse(resetpasswordsuccessfulresponse)@apiresponse(resetpasswordunauthorizedresponse)@apibody(resetpasswordcorrectpayload)@useguards(jwtauthguard)@patch('reset",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signindescription",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signindescription)@apiresponse(signinsuccessfulresponse)@apiresponse(signinunauthorizedresponse)@apibody(signincorrectpayload)@useguards(localauthguard)@post('sign",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signupdescription",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation(signupdescription)@apiresponse(signupsuccessfulresponse)@apiresponse(signupbadrequestresponse)@apibody(signupcorrectpayload)@post('sign",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(recoverpasswordbadrequest",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(recoverpasswordsuccessfulresponse",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(refreshtokensuccessfulresponse",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(refreshtokenunauthorizedresponse",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(resetpasswordsuccessfulresponse",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(resetpasswordunauthorizedresponse",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signinsuccessfulresponse",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signinunauthorizedresponse",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signupbadrequestresponse",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponse(signupsuccessfulresponse",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":723,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application/json",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":716,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":437,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["args.constraints",{"_index":454,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["args.constraints.every((pattern",{"_index":443,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["argumentmetadata",{"_index":620,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["array",{"_index":650,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["assign",{"_index":646,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["auth",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":462,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":467,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/password/reset?token=${resettoken",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth/refreshtoken.entity",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":99,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":470,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('local",{"_index":516,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":754,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":148,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["backers",{"_index":746,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ValidationPipe.html":{}}}],["bcrypt",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"dependencies.html":{}}}],["bcrypt.compare(clientrefreshtoken",{"_index":503,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["bcrypt.compare(clientresetpasswordtoken",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(pass",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newrefreshtoken",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(resettoken",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('password",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":617,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":671,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":764,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":762,"title":{},"body":{"modules.html":{}}}],["building",{"_index":711,"title":{},"body":{"index.html":{}}}],["case",{"_index":448,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["catch",{"_index":558,"title":{},"body":{"injectables/SendgridService.html":{}}}],["character",{"_index":451,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["characters",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters'})@validate(isvalidpassword",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":21,"title":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"classes/RefreshTokensRepository.html":{},"classes/UsersRepository.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"classes/RefreshTokensRepository.html":{},"classes/UsersRepository.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["clientrefreshtoken",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["clientresetpasswordtoken",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule",{"_index":542,"title":{},"body":{"modules/SendgridModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule_exports",{"_index":544,"title":{},"body":{"modules/SendgridModule.html":{},"overview.html":{}}}],["cluster_sendgridmodule_providers",{"_index":543,"title":{},"body":{"modules/SendgridModule.html":{}}}],["cluster_usermodule",{"_index":573,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":575,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":574,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["column",{"_index":529,"title":{},"body":{"entities/RefreshToken.html":{},"entities/User.html":{}}}],["column({default",{"_index":568,"title":{},"body":{"entities/User.html":{}}}],["comma",{"_index":639,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["configmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{}}}],["configservice.get('db_host",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_user",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":494,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["configservice.get('jwt_reset_password_secret",{"_index":514,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["const",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{}}}],["constraint1",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":518,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":480,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{}}}],["constructor(usersrepository",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":465,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["cookie",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":652,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["create(payload",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createnewaccesstoken",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewaccesstoken(user",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewrefreshtoken",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewrefreshtoken(user",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["createquerybuilder",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["createquerybuilder(alias",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":130,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["credentials",{"_index":525,"title":{},"body":{"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":637,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["d",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["date",{"_index":528,"title":{},"body":{"entities/RefreshToken.html":{}}}],["date(date.now",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["db_host",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["db_name",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["db_password",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["db_port",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["db_user",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"entities/RefreshToken.html":{},"entities/User.html":{}}}],["default",{"_index":572,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":433,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["defaultmessage(args",{"_index":434,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":717,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["detail",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["detected",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["development",{"_index":724,"title":{},"body":{"index.html":{}}}],["disable",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["divide",{"_index":642,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["documentation",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["dynamictemplatedata",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":734,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":712,"title":{},"body":{"index.html":{}}}],["email",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email_already_exists",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":526,"title":{"entities/RefreshToken.html":{},"entities/User.html":{}},"body":{"entities/RefreshToken.html":{},"entities/User.html":{},"coverage.html":{}}}],["err",{"_index":468,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":629,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.foreach((e",{"_index":633,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":631,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["eslint",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["exceed",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exist",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existing",{"_index":505,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["exists",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["expiresat",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"entities/RefreshToken.html":{}}}],["expiresin",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":546,"title":{},"body":{"modules/SendgridModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{},"dependencies.html":{}}}],["extends",{"_index":473,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RefreshTokensRepository.html":{},"classes/UsersRepository.html":{}}}],["extractjwt",{"_index":484,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["extractjwt.fromextractors",{"_index":490,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["extractjwt.fromurlqueryparameter('token",{"_index":513,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["false",{"_index":442,"title":{},"body":{"classes/IsValidPassword.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["filter(boolean",{"_index":459,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["findone",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(options",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneby",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneby(property",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneoptions",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["formattederrors",{"_index":632,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["formattederrors[e.property",{"_index":635,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["found",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser",{"_index":496,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["founduser.refreshtokens.some",{"_index":502,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["framework",{"_index":710,"title":{},"body":{"index.html":{}}}],["frontend_url",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":704,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('recover",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":706,"title":{"index.html":{}},"body":{}}],["grow",{"_index":741,"title":{},"body":{"index.html":{}}}],["hacked",{"_index":508,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["handlerequest",{"_index":463,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":464,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedresettoken",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedtoken",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["host",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["hrivera@unal.edu.co",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["httponly",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":758,"title":{},"body":{"index.html":{}}}],["id",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":492,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["implements",{"_index":431,"title":{},"body":{"classes/IsValidPassword.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["in.ts",{"_index":667,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["info[1",{"_index":474,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["info[1].message",{"_index":477,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["inject",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":93,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(refreshtoken",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(user",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":720,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":722,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":475,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["invalid",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["invalid_body",{"_index":648,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["isemail",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring({message",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isvalidpassword",{"_index":426,"title":{"classes/IsValidPassword.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"coverage.html":{}}}],["joi",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().required().default(5432",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('admin",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('localhost",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required().default('reasoner",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":748,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":472,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["jsonwebtokenerror",{"_index":471,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["jwt",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":152,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":489,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["jwtmodule",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategyrefreshtoken",{"_index":256,"title":{"injectables/JwtStrategyRefreshToken.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategyresetpassword",{"_index":257,"title":{"injectables/JwtStrategyResetPassword.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategyResetPassword.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":755,"title":{},"body":{"index.html":{}}}],["license",{"_index":761,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":738,"title":{},"body":{"index.html":{}}}],["line",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["link",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":644,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["literal",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["local",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":155,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":258,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lower",{"_index":447,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["mail",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["manytoone",{"_index":537,"title":{},"body":{"entities/RefreshToken.html":{}}}],["manytoone(undefined",{"_index":534,"title":{},"body":{"entities/RefreshToken.html":{}}}],["map((pattern",{"_index":455,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["maximum",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(14",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message.split",{"_index":647,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["messages",{"_index":445,"title":{},"body":{"classes/IsValidPassword.html":{},"injectables/ValidationPipe.html":{}}}],["messages.flatmap((message",{"_index":636,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["messages[index",{"_index":458,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["metadata",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":616,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["minlength",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":703,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":737,"title":{},"body":{"index.html":{}}}],["mode",{"_index":728,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":751,"title":{},"body":{"index.html":{}}}],["motherfucker",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["myśliwiec",{"_index":756,"title":{},"body":{"index.html":{}}}],["name",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["need",{"_index":641,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["nest",{"_index":718,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":760,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/SendgridService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpassword",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefreshtoken",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefreshtokenentity",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.id",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["node.js",{"_index":709,"title":{},"body":{"index.html":{}}}],["none",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["npm",{"_index":721,"title":{},"body":{"index.html":{}}}],["null",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/SendgridService.html":{},"injectables/ValidationPipe.html":{}}}],["number",{"_index":452,"title":{},"body":{"classes/IsValidPassword.html":{},"injectables/ValidationPipe.html":{}}}],["object",{"_index":627,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["object.values(e.constraints",{"_index":634,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["old",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":446,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["onetomany",{"_index":571,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":565,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":739,"title":{},"body":{"index.html":{}}}],["optional",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["options",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["ordered",{"_index":643,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["out",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":765,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":675,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["parser",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":486,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":487,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":522,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":495,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["passthrough",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password.strategy",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["password.strategy.ts",{"_index":509,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{},"coverage.html":{}}}],["password.strategy.ts:10",{"_index":510,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["password.strategy.ts:19",{"_index":512,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["password.ts",{"_index":430,"title":{},"body":{"classes/IsValidPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.ts:13",{"_index":436,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["password.ts:9",{"_index":439,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["patch",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('reset",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["patched",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pattern.test(args.value",{"_index":457,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["pattern.test(text",{"_index":444,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["payload",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/UsersService.html":{}}}],["payload.sub",{"_index":498,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["personalizations",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["pipetransform",{"_index":623,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoinstance",{"_index":624,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoinstance(metatype",{"_index":628,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":749,"title":{},"body":{"index.html":{}}}],["port",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["primarygeneratedcolumn",{"_index":538,"title":{},"body":{"entities/RefreshToken.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":531,"title":{},"body":{"entities/RefreshToken.html":{},"entities/User.html":{}}}],["private",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["process.env.node_env",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["production",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["progressive",{"_index":708,"title":{},"body":{"index.html":{}}}],["project",{"_index":740,"title":{},"body":{"index.html":{}}}],["promise",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":404,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["provided",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{}}}],["query",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["query('email",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["query('token",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["read",{"_index":750,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/SendgridService.html":{}}}],["recovepassworddescription",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recoverpassword",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["recoverpassword(email",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["recoverpasswordbadrequest",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recoverpasswordsuccessfulresponse",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recovery",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["reflect",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refresh_token_hacked",{"_index":507,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshed",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":53,"title":{"entities/RefreshToken.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/User.html":{},"coverage.html":{}}}],["refreshtoken(req",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(userid",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken.entity",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/RefreshTokensRepository.html":{}}}],["refreshtoken.user",{"_index":566,"title":{},"body":{"entities/User.html":{}}}],["refreshtokendescription",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenmatch",{"_index":501,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshtokenpayload",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":500,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"entities/User.html":{}}}],["refreshtokens.repository",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["refreshtokensrepository",{"_index":272,"title":{"classes/RefreshTokensRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"coverage.html":{}}}],["refreshtokensuccessfulresponse",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenunauthorizedresponse",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registered",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations",{"_index":499,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["remove",{"_index":504,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["repository",{"_index":541,"title":{},"body":{"classes/RefreshTokensRepository.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["req.cookies.refreshtoken",{"_index":491,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["req.error",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["requesttype",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["res",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyResetPassword.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["reset_password_token_invalid_payload",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(password",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(userid",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpasswordcorrectpayload",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resetpassworddescription",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordsuccessfulresponse",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordtoken",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordunauthorizedresponse",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resettoken",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["resettokenpayload",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SendgridService.html":{}}}],["response.body.errors",{"_index":560,"title":{},"body":{"injectables/SendgridService.html":{}}}],["response.clearcookie('refreshtoken",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.cookie('refreshtoken",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(202).json",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(401).json(req.error",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(statuscode).json(error",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["rest",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["result",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/SendgridService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["reuse",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["rimraf",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["rtr",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["run",{"_index":725,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["samesite",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["save",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["save(user",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":713,"title":{},"body":{"index.html":{}}}],["schema",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":493,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["secure",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["send",{"_index":549,"title":{},"body":{"injectables/SendgridService.html":{},"miscellaneous/variables.html":{}}}],["send(mail",{"_index":551,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["sendgrid.maildatarequired",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["sendgrid.send(mail",{"_index":556,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid.service",{"_index":547,"title":{},"body":{"modules/SendgridModule.html":{}}}],["sendgrid.setapikey(this.configservice.get('sendgrid_api_key",{"_index":553,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sendgrid/mail",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{},"dependencies.html":{}}}],["sendgrid/sendgrid.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["sendgrid/sendgrid.service",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["sendgridmodule",{"_index":36,"title":{"modules/SendgridModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules.html":{},"overview.html":{}}}],["sendgridservice",{"_index":38,"title":{"injectables/SendgridService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"coverage.html":{},"overview.html":{}}}],["sengrid_error",{"_index":559,"title":{},"body":{"injectables/SendgridService.html":{}}}],["sent",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["separated",{"_index":640,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["server",{"_index":714,"title":{},"body":{"index.html":{}}}],["side",{"_index":715,"title":{},"body":{"index.html":{}}}],["signin",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(req",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["signincorrectpayload",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signindescription",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinsuccessfulresponse",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinunauthorizedresponse",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signup",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(undefined",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupbadrequestresponse",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signupcorrectpayload",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signupdescription",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signupsuccessfulresponse",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"modules/SendgridModule.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["special",{"_index":450,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["specific",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["sponsors",{"_index":743,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../recover",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../reset",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sign",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:136",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:155",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:62",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:77",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:98",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:112",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:136",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:189",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:66",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:85",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:94",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/create",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/is",{"_index":429,"title":{},"body":{"classes/IsValidPassword.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":461,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"coverage.html":{}}}],["src/auth/local",{"_index":515,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":517,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:13",{"_index":521,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:8",{"_index":519,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/refreshtoken.entity",{"_index":570,"title":{},"body":{"entities/User.html":{}}}],["src/auth/refreshtoken.entity.ts",{"_index":527,"title":{},"body":{"entities/RefreshToken.html":{},"coverage.html":{}}}],["src/auth/refreshtoken.entity.ts:11",{"_index":530,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:13",{"_index":536,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:7",{"_index":532,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtoken.entity.ts:9",{"_index":533,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/refreshtokens.repository.ts",{"_index":540,"title":{},"body":{"classes/RefreshTokensRepository.html":{},"coverage.html":{}}}],["src/auth/swagger/recover",{"_index":661,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/swagger/refresh",{"_index":663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/swagger/reset",{"_index":665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/swagger/sign",{"_index":666,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":669,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/sendgrid/sendgrid.module",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/sendgrid/sendgrid.module.ts",{"_index":545,"title":{},"body":{"modules/SendgridModule.html":{}}}],["src/sendgrid/sendgrid.service",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/sendgrid/sendgrid.service.ts",{"_index":548,"title":{},"body":{"injectables/SendgridService.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.service.ts:11",{"_index":552,"title":{},"body":{"injectables/SendgridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:6",{"_index":550,"title":{},"body":{"injectables/SendgridService.html":{}}}],["src/users/user.entity",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{}}}],["src/users/user.entity.ts",{"_index":561,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:11",{"_index":564,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:13",{"_index":567,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:15",{"_index":569,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":563,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":562,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":576,"title":{},"body":{"modules/UserModule.html":{}}}],["src/users/users.repository.ts",{"_index":581,"title":{},"body":{"classes/UsersRepository.html":{},"coverage.html":{}}}],["src/users/users.service",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["src/users/users.service.ts",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:25",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:7",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/validation.pipe.ts",{"_index":611,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/utils/validation.pipe.ts:12",{"_index":621,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/utils/validation.pipe.ts:35",{"_index":615,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["start",{"_index":726,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":729,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":730,"title":{},"body":{"index.html":{}}}],["started",{"_index":707,"title":{"index.html":{}},"body":{}}],["starter",{"_index":719,"title":{},"body":{"index.html":{}}}],["statements",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":466,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SendgridService.html":{}}}],["stay",{"_index":752,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":485,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["strict",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["substrings",{"_index":645,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["summary",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":488,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{}}}],["super.handlerequest(err",{"_index":478,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":744,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":763,"title":{},"body":{"modules.html":{}}}],["swagger/recover",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/refresh",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/reset",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["swagger/sign",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["synchronize",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["templateid",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":733,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":736,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":735,"title":{},"body":{"index.html":{}}}],["testpassed",{"_index":456,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["tests",{"_index":732,"title":{},"body":{"index.html":{}}}],["text",{"_index":440,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["thanks",{"_index":742,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.recoverpassword(email",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(req.user",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(body",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":524,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('frontend_domain",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_expiration_time",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_expiration_time",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_reset_password_expiration_time",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_reset_password_secret",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createnewaccesstoken(user",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createnewrefreshtoken(user",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(accesstokenpayload",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(refreshtokenpayload",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(resettokenpayload",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokensrepository.create",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokensrepository.delete",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["this.refreshtokensrepository.save(newrefreshtokenentity",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sendgridservice.send(mail",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tovalidate(metatype",{"_index":626,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.usersrepository.create(payload",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.createquerybuilder(alias",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone(options",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby(property",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone",{"_index":497,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["this.usersservice.findoneby",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.save(newuser",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.save(user",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["token",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"miscellaneous/variables.html":{}}}],["token.strategy",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":479,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{},"coverage.html":{}}}],["token.strategy.ts:14",{"_index":481,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["token.strategy.ts:30",{"_index":483,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["token.ts",{"_index":664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":506,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["tostring",{"_index":460,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["touch",{"_index":753,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":612,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":614,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":613,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":618,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":625,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["transport",{"_index":555,"title":{},"body":{"injectables/SendgridService.html":{}}}],["transport[0].statuscode",{"_index":557,"title":{},"body":{"injectables/SendgridService.html":{}}}],["triggerederrors",{"_index":453,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["true",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{}}}],["try",{"_index":554,"title":{},"body":{"injectables/SendgridService.html":{}}}],["twitter",{"_index":759,"title":{},"body":{"index.html":{}}}],["type",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"injectables/SendgridService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":539,"title":{},"body":{"entities/RefreshToken.html":{},"classes/RefreshTokensRepository.html":{},"entities/User.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([refreshtoken",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":579,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":649,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":651,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["unauthorized",{"_index":476,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception",{"_index":469,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":619,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["unit",{"_index":731,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/ValidationPipe.html":{}}}],["unlicensed",{"_index":771,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["up",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["up.ts",{"_index":668,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["upper",{"_index":449,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["usefactory",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":55,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/LocalStrategy.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.clientrefreshtoken",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.entity",{"_index":577,"title":{},"body":{"modules/UserModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtokens",{"_index":535,"title":{},"body":{"entities/RefreshToken.html":{}}}],["user.resetpasswordtoken",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userid",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["user_not_found",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{}}}],["usermodule",{"_index":37,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["usernamefield",{"_index":523,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users.service",{"_index":578,"title":{},"body":{"modules/UserModule.html":{}}}],["users/user.entity",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["usersrepository",{"_index":580,"title":{"classes/UsersRepository.html":{}},"body":{"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersservice",{"_index":281,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategyRefreshToken.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"coverage.html":{}}}],["valid'})@minlength(8",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/JwtStrategyRefreshToken.html":{},"injectables/JwtStrategyResetPassword.html":{},"injectables/LocalStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["validate(email",{"_index":520,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(isvalidpassword",{"_index":428,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate(object",{"_index":630,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(payload",{"_index":511,"title":{},"body":{"injectables/JwtStrategyResetPassword.html":{}}}],["validate(req",{"_index":482,"title":{},"body":{"injectables/JwtStrategyRefreshToken.html":{}}}],["validate(text",{"_index":438,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validateuser",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":638,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationarguments",{"_index":435,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validationpipe",{"_index":610,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validationschema",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsValidPassword.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":441,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["validatorconstraintinterface",{"_index":432,"title":{},"body":{"classes/IsValidPassword.html":{}}}],["value",{"_index":622,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":772,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":769,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":727,"title":{},"body":{"index.html":{}}}],["website",{"_index":757,"title":{},"body":{"index.html":{}}}],["world",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":747,"title":{},"body":{"index.html":{}}}],["z",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SendgridModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSendgridModule\n\nSendgridModule\n\nAppModule -->\n\nSendgridModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSendgridService\n\nSendgridService\n\nAppModule -->\n\nSendgridService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            SendgridService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            SendgridModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as Joi from 'joi';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { RefreshToken } from './auth/refreshToken.entity';\nimport { User } from './users/user.entity';\nimport { UserModule } from './users/users.module';\nimport { SendgridService } from './sendgrid/sendgrid.service';\nimport { SendgridModule } from './sendgrid/sendgrid.module';\n\n@Module({\n  imports: [\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: Joi.object({\n        DB_HOST: Joi.string().required().default('localhost'),\n        DB_PORT: Joi.number().required().default(5432),\n        DB_USER: Joi.string().required().default('admin'),\n        DB_PASSWORD: Joi.string().required(),\n        DB_NAME: Joi.string().required().default('reasoner'),\n      }),\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USER'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [User, RefreshToken],\n        synchronize: true,\n      }),\n    }),\n    UserModule,\n    SendgridModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, SendgridService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                recoverPassword\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recoverPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    recoverPassword(email: string, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(recovePasswordDescription)@ApiResponse(recoverPasswordSuccessfulResponse)@ApiResponse(recoverPasswordBadRequest)@Get('recover-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(refreshTokenDescription)@ApiResponse(refreshTokenSuccessfulResponse)@ApiResponse(refreshTokenUnauthorizedResponse)@UseGuards(JwtAuthGuard)@Get('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(password: string, resetPasswordToken: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(resetPasswordDescription)@ApiResponse(resetPasswordSuccessfulResponse)@ApiResponse(resetPasswordUnauthorizedResponse)@ApiBody(resetPasswordCorrectPayload)@UseGuards(JwtAuthGuard)@Patch('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resetPasswordToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(signInDescription)@ApiResponse(signInSuccessfulResponse)@ApiResponse(signInUnauthorizedResponse)@ApiBody(signInCorrectPayload)@UseGuards(LocalAuthGuard)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(body: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation(signUpDescription)@ApiResponse(signUpSuccessfulResponse)@ApiResponse(signUpBadRequestResponse)@ApiBody(signUpCorrectPayload)@Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Patch,\n  Post,\n  Query,\n  Request,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ApiBody, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { Response, Request as RequestType } from 'express';\nimport { User } from 'src/users/user.entity';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from './create-user.dto';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport * as SendGrid from '@sendgrid/mail';\nimport {\n  refreshTokenDescription,\n  refreshTokenSuccessfulResponse,\n  refreshTokenUnauthorizedResponse,\n} from './swagger/refresh-token';\nimport {\n  signInCorrectPayload,\n  signInDescription,\n  signInSuccessfulResponse,\n  signInUnauthorizedResponse,\n} from './swagger/sign-in';\nimport {\n  signUpBadRequestResponse,\n  signUpCorrectPayload,\n  signUpDescription,\n  signUpSuccessfulResponse,\n} from './swagger/sign-up';\nimport {\n  recovePasswordDescription,\n  recoverPasswordBadRequest,\n  recoverPasswordSuccessfulResponse,\n} from './swagger/recover-password';\nimport {\n  resetPasswordCorrectPayload,\n  resetPasswordDescription,\n  resetPasswordSuccessfulResponse,\n  resetPasswordUnauthorizedResponse,\n} from './swagger/reset-password';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private configService: ConfigService,\n  ) {}\n\n  @ApiOperation(signUpDescription)\n  @ApiResponse(signUpSuccessfulResponse)\n  @ApiResponse(signUpBadRequestResponse)\n  @ApiBody(signUpCorrectPayload)\n  @Post('sign-up')\n  async signUp(@Body() body: CreateUserDto): Promise;\n  }> {\n    const { resource } = await this.authService.signUp(body);\n\n    return { error: null, resource };\n  }\n\n  @ApiOperation(signInDescription)\n  @ApiResponse(signInSuccessfulResponse)\n  @ApiResponse(signInUnauthorizedResponse)\n  @ApiBody(signInCorrectPayload)\n  @UseGuards(LocalAuthGuard)\n  @Post('sign-in')\n  async signIn(\n    @Request() req: RequestType & { user: User },\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const { resource } = await this.authService.signIn(req.user);\n    const { refreshToken, ...rest } = resource;\n    response.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      domain: this.configService.get('FRONTEND_DOMAIN'),\n      maxAge: 1000 * 60 * 60 * 24 * 30,\n    });\n    return { error: null, resource: rest };\n  }\n\n  @ApiOperation(refreshTokenDescription)\n  @ApiResponse(refreshTokenSuccessfulResponse)\n  @ApiResponse(refreshTokenUnauthorizedResponse)\n  @UseGuards(JwtAuthGuard)\n  @Get('refresh-token')\n  async refreshToken(\n    @Request()\n    req: RequestType & {\n      user: { userId: string; clientRefreshToken: string };\n    } & {\n      error: { code: string; detail: string };\n    },\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const { user } = req;\n    response.clearCookie('refreshToken', {\n      httpOnly: true,\n      sameSite: 'none',\n      secure: true,\n    });\n    if (req.error) {\n      // if reuse detected\n      return response.status(401).json(req.error);\n    }\n    const { resource } = await this.authService.refreshToken(\n      user.userId,\n      user.clientRefreshToken,\n    );\n    const { refreshToken, ...rest } = resource;\n    response.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      domain: this.configService.get('FRONTEND_DOMAIN'),\n      maxAge: 1000 * 60 * 60 * 24 * 30,\n    });\n    response.status(202).json({ error: null, resource: rest });\n  }\n\n  @ApiOperation(recovePasswordDescription)\n  @ApiResponse(recoverPasswordSuccessfulResponse)\n  @ApiResponse(recoverPasswordBadRequest)\n  @Get('recover-password')\n  async recoverPassword(\n    @Query('email') email: string,\n    @Res() response: Response,\n  ): Promise {\n    const { statusCode, error, resource } =\n      await this.authService.recoverPassword(email);\n    response.status(statusCode).json(error ?? resource);\n    return;\n  }\n\n  @ApiOperation(resetPasswordDescription)\n  @ApiResponse(resetPasswordSuccessfulResponse)\n  @ApiResponse(resetPasswordUnauthorizedResponse)\n  @ApiBody(resetPasswordCorrectPayload)\n  @UseGuards(JwtAuthGuard)\n  @Patch('reset-password')\n  async resetPassword(\n    @Body('password') password: string,\n    @Query('token') resetPasswordToken: string,\n    @Request()\n    req: RequestType & { user: { userId: string; resetPasswordToken: string } },\n  ): Promise | null;\n  }> {\n    const { user } = req;\n    const { resource } = await this.authService.resetPassword(\n      user.userId,\n      password,\n      resetPasswordToken,\n    );\n    return { resource };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSendgridModule\n\nSendgridModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSendgridModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategyRefreshToken\n\nJwtStrategyRefreshToken\n\nAuthModule -->\n\nJwtStrategyRefreshToken->AuthModule\n\n\n\n\n\nJwtStrategyResetPassword\n\nJwtStrategyResetPassword\n\nAuthModule -->\n\nJwtStrategyResetPassword->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategyRefreshToken\n                        \n                        \n                            JwtStrategyResetPassword\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SendgridModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SendgridModule } from 'src/sendgrid/sendgrid.module';\nimport { UserModule } from 'src/users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategyRefreshToken } from './jwt-refresh-token.strategy';\nimport { JwtStrategyResetPassword } from './jwt-reset-password.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { RefreshToken } from './refreshToken.entity';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule.register({}),\n    TypeOrmModule.forFeature([RefreshToken]),\n    SendgridModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategyRefreshToken,\n    JwtStrategyResetPassword,\n    RefreshTokensRepository,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewAccessToken\n                            \n                            \n                                    Async\n                                createNewRefreshToken\n                            \n                            \n                                    Async\n                                recoverPassword\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService, sendgridService: SendgridService, refreshTokensRepository: RefreshTokensRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sendgridService\n                                                  \n                                                        \n                                                                        SendgridService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensRepository\n                                                  \n                                                        \n                                                                        RefreshTokensRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createNewAccessToken\n                        \n                    \n                \n            \n            \n                \ncreateNewAccessToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewRefreshToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recoverPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    recoverPassword(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(userId: string, newPassword: string, clientResetPasswordToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientResetPasswordToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { SendgridService } from 'src/sendgrid/sendgrid.service';\nimport { User } from 'src/users/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { RefreshToken } from './refreshToken.entity';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\nimport * as SendGrid from '@sendgrid/mail';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private sendgridService: SendgridService,\n    @InjectRepository(RefreshToken)\n    private refreshTokensRepository: RefreshTokensRepository,\n  ) {}\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise | null> {\n    const user = await this.usersService.findOneBy({ email });\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async signUp({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }): Promise | null;\n  }> {\n    const user = await this.usersService.findOneBy({ email });\n    if (user) {\n      throw new BadRequestException({\n        error: {\n          code: 'email_already_exists',\n          detail: 'email already exists',\n        },\n        resource: null,\n      });\n    }\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n    const newUser = this.usersService.create({\n      email,\n      password: hashedPassword,\n    });\n    await this.usersService.save(newUser);\n    return { resource: { id: newUser.id, email: newUser.email } };\n  }\n\n  async createNewRefreshToken(user: User): Promise {\n    const refreshTokenPayload = {\n      sub: user.id,\n    };\n    const newRefreshToken = this.jwtService.sign(refreshTokenPayload, {\n      expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION_TIME'),\n      secret: this.configService.get('JWT_REFRESH_SECRET'),\n    });\n    const salt = await bcrypt.genSalt();\n    const hashedToken = await bcrypt.hash(newRefreshToken, salt);\n    const newRefreshTokenEntity = this.refreshTokensRepository.create({\n      user,\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      refreshToken: hashedToken,\n    });\n    await this.refreshTokensRepository.save(newRefreshTokenEntity);\n    return newRefreshToken;\n  }\n\n  createNewAccessToken(user: User): string {\n    const accessTokenPayload = { email: user.email, sub: user.id };\n    const newAccessToken = this.jwtService.sign(accessTokenPayload, {\n      expiresIn: this.configService.get('JWT_ACCESS_EXPIRATION_TIME'),\n      secret: this.configService.get('JWT_ACCESS_SECRET'),\n    });\n    return newAccessToken;\n  }\n\n  async signIn(user: User): Promise {\n    const newAccessToken = this.createNewAccessToken(user);\n    const newRefreshToken = await this.createNewRefreshToken(user);\n    return {\n      error: null,\n      resource: {\n        accessToken: newAccessToken,\n        refreshToken: newRefreshToken,\n      },\n    };\n  }\n\n  async refreshToken(\n    userId: string,\n    refreshToken: string,\n  ): Promise {\n    // as we are using RTR, we must delete the specific refreshToken from the database\n    await this.refreshTokensRepository.delete({\n      refreshToken,\n    });\n    const user = await this.usersService.findOneBy({ id: userId });\n    const newAccessToken = this.createNewAccessToken(user);\n    const newRefreshToken = await this.createNewRefreshToken(user);\n    return {\n      resource: {\n        accessToken: newAccessToken,\n        refreshToken: newRefreshToken,\n      },\n    };\n  }\n\n  async recoverPassword(email: string): Promise;\n  }> {\n    const user = await this.usersService.findOneBy({ email });\n    if (!user) {\n      throw new BadRequestException({\n        error: {\n          code: 'user_not_found',\n          detail: 'user not found',\n        },\n      });\n    }\n    const resetTokenPayload = { sub: user.id };\n    const resetToken = this.jwtService.sign(resetTokenPayload, {\n      secret: this.configService.get('JWT_RESET_PASSWORD_SECRET'),\n      expiresIn: this.configService.get('JWT_RESET_PASSWORD_EXPIRATION_TIME'),\n    });\n    const salt = await bcrypt.genSalt();\n    const hashedResetToken = await bcrypt.hash(resetToken, salt);\n    user.resetPasswordToken = hashedResetToken;\n    await this.usersService.save(user); // update if the user exists\n    const mail: SendGrid.MailDataRequired = {\n      to: email,\n      from: 'hrivera@unal.edu.co',\n      subject: 'Password recovery',\n      templateId: 'd-7a7e65ab6bf44627bea5758e97fbb969',\n      personalizations: [\n        {\n          to: [\n            {\n              email,\n            },\n          ],\n          dynamicTemplateData: {\n            link: `${this.configService.get(\n              'FRONTEND_URL',\n            )}/auth/password/reset?token=${resetToken}`,\n          },\n        },\n      ],\n    };\n    //eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { templateId, personalizations, ...resource } = mail;\n    const { error, statusCode } = await this.sendgridService.send(mail);\n    return {\n      error,\n      statusCode,\n      resource,\n    };\n  }\n\n  async resetPassword(\n    userId: string,\n    newPassword: string,\n    clientResetPasswordToken: string,\n  ): Promise;\n  }> {\n    const user = await this.usersService.findOneBy({ id: userId });\n    // get out of here motherfucker\n    if (!user) {\n      throw new BadRequestException({\n        error: {\n          code: 'user_not_found',\n          detail: 'user not found',\n        },\n        resource: null,\n      });\n    }\n    if (\n      !(await bcrypt.compare(clientResetPasswordToken, user.resetPasswordToken))\n    ) {\n      throw new BadRequestException({\n        error: {\n          code: 'reset_password_token_invalid_payload',\n          detail: 'reset password token invalid payload',\n        },\n        resource: null,\n      });\n    }\n    // create new hash for the new password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n    user.password = hashedPassword;\n\n    user.resetPasswordToken = '';\n    await this.usersService.save(user);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...rest } = user;\n    return {\n      resource: rest,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'email is not valid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'password is not valid'})@MinLength(8, {message: 'the password should have at least $constraint1 characters '})@MaxLength(14, {message: 'the password should not exceed the maximum of $constraint1 characters'})@Validate(IsValidPassword, ['/[a-z]/', '/[A-Z]/', '/[!@*\"#$%&\\/()=]/', '/[0-9]/'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { IsValidPassword } from './is-valid-password';\n\nexport class CreateUserDto {\n  @IsEmail({}, { message: 'email is not valid' })\n  email: string;\n  @IsString({ message: 'password is not valid' })\n  @MinLength(8, {\n    message: 'the password should have at least $constraint1 characters ',\n  })\n  @MaxLength(14, {\n    message:\n      'the password should not exceed the maximum of $constraint1 characters',\n  })\n  @Validate(IsValidPassword, [/[a-z]/, /[A-Z]/, /[!@*\"#$%&\\/()=]/, /[0-9]/])\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsValidPassword.html":{"url":"classes/IsValidPassword.html","title":"class - IsValidPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsValidPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/is-valid-password.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/is-valid-password.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/is-valid-password.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n@ValidatorConstraint({ name: 'IsValidPassword', async: false })\nexport class IsValidPassword implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments) {\n    return args.constraints.every((pattern) => pattern.test(text));\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    const messages = [\n      'the password should has at least one lower case',\n      'the password should has at least one upper case',\n      'the password should has at least one special character',\n      'the password should has at least one number',\n    ];\n    const triggeredErrors = args.constraints\n      .map((pattern, index) => {\n        const testPassed = pattern.test(args.value);\n        if (!testPassed) {\n          return messages[index];\n        }\n        return null;\n      })\n      .filter(Boolean)\n      .toString();\n    return triggeredErrors;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { JsonWebTokenError } from 'jsonwebtoken';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard([\n  'jwt-reset-password',\n  'jwt-refresh-token',\n]) {\n  handleRequest(err: any, user: any, info: any, context: any, status: any) {\n    if (info && info[1] instanceof JsonWebTokenError) {\n      throw new UnauthorizedException({\n        error: { code: 'unauthorized', detail: info[1].message },\n      });\n    }\n    return super.handleRequest(err, user, info, context, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategyRefreshToken.html":{"url":"injectables/JwtStrategyRefreshToken.html","title":"injectable - JwtStrategyRefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategyRefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService, refreshTokensRepository: RefreshTokensRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-refresh-token.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensRepository\n                                                  \n                                                        \n                                                                        RefreshTokensRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-refresh-token.strategy.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { RefreshTokensRepository } from './refreshTokens.repository';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class JwtStrategyRefreshToken extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n    private refreshTokensRepository: RefreshTokensRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (req: Request) => req.cookies.refreshToken,\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: Request, payload: any) {\n    const clientRefreshToken = req.cookies.refreshToken;\n    const foundUser = await this.usersService.findOne({\n      where: {\n        id: payload.sub,\n      },\n      relations: ['refreshTokens'],\n    });\n    const refreshTokenMatch = foundUser.refreshTokens.some(({ refreshToken }) =>\n      bcrypt.compare(clientRefreshToken, refreshToken),\n    );\n    // Detected refresh token reuse we should remove all existing refresh tokens\n    if (!refreshTokenMatch) {\n      await this.refreshTokensRepository.delete({\n        user: foundUser,\n      });\n      return {\n        error: {\n          code: 'refresh_token_hacked',\n          detail: 'refresh token was hacked',\n        },\n        resource: null,\n      };\n    }\n    return {\n      userId: payload.sub,\n      clientRefreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategyResetPassword.html":{"url":"injectables/JwtStrategyResetPassword.html","title":"injectable - JwtStrategyResetPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategyResetPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-reset-password.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-reset-password.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-reset-password.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategyResetPassword extends PassportStrategy(\n  Strategy,\n  'jwt-reset-password',\n) {\n  constructor(configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromUrlQueryParameter('token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_RESET_PASSWORD_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      userId: payload.sub,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { User } from 'src/users/user.entity';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise> {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException({\n        error: { code: 'unauthorized', detail: 'Invalid credentials' },\n      });\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RefreshToken.html":{"url":"entities/RefreshToken.html","title":"entity - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refreshToken.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresAt\n                            \n                            \n                                id\n                            \n                            \n                                refreshToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.refreshTokens)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refreshToken.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/users/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class RefreshToken {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  refreshToken: string;\n  @Column()\n  expiresAt: Date;\n  @ManyToOne(() => User, (user) => user.refreshTokens)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokensRepository.html":{"url":"classes/RefreshTokensRepository.html","title":"class - RefreshTokensRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokensRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refreshTokens.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { RefreshToken } from './refreshToken.entity';\n\nexport class RefreshTokensRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SendgridModule.html":{"url":"modules/SendgridModule.html","title":"module - SendgridModule","body":"\n                   \n\n\n\n\n    Modules\n    SendgridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SendgridModule\n\n\n\ncluster_SendgridModule_providers\n\n\n\ncluster_SendgridModule_exports\n\n\n\n\nSendgridService \n\nSendgridService \n\n\n\nSendgridModule\n\nSendgridModule\n\nSendgridService  -->\n\nSendgridModule->SendgridService \n\n\n\n\n\nSendgridService\n\nSendgridService\n\nSendgridModule -->\n\nSendgridService->SendgridModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sendgrid/sendgrid.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SendgridService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SendgridService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SendgridService } from './sendgrid.service';\n\n@Module({\n  providers: [SendgridService],\n  exports: [SendgridService],\n})\nexport class SendgridModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SendgridService.html":{"url":"injectables/SendgridService.html","title":"injectable - SendgridService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SendgridService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/sendgrid.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/sendgrid/sendgrid.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(mail: SendGrid.MailDataRequired)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                            SendGrid.MailDataRequired\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as SendGrid from '@sendgrid/mail';\n\n@Injectable()\nexport class SendgridService {\n  constructor(private readonly configService: ConfigService) {\n    SendGrid.setApiKey(this.configService.get('SENDGRID_API_KEY'));\n  }\n\n  async send(\n    mail: SendGrid.MailDataRequired,\n  ): Promise {\n    try {\n      const transport = await SendGrid.send(mail);\n      return { error: null, statusCode: transport[0].statusCode };\n    } catch ({ response, code }) {\n      return {\n        error: {\n          code: 'sengrid_error',\n          detail: response.body.errors,\n        },\n        statusCode: code,\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                resetPasswordToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshToken[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, refreshToken => refreshToken.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { RefreshToken } from 'src/auth/refreshToken.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  email: string;\n  @Column()\n  password: string;\n  @OneToMany(() => RefreshToken, (refreshToken) => refreshToken.user)\n  refreshTokens: RefreshToken[];\n  @Column({ default: '' })\n  resetPasswordToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUserModule\n\nUserModule\n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersRepository.html":{"url":"classes/UsersRepository.html","title":"class - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { User } from './user.entity';\n\nexport class UsersRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                createQueryBuilder\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneBy\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createQueryBuilder\n                        \n                    \n                \n            \n            \n                \ncreateQueryBuilder(alias: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneBy\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneBy(property: FindOptionsWhere | FindOptionsWhere[])\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                FindOptionsWhere | FindOptionsWhere[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOneOptions, FindOptionsWhere, Repository } from 'typeorm';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) private usersRepository: Repository,\n  ) {}\n\n  async findOneBy(\n    property: FindOptionsWhere | FindOptionsWhere[],\n  ): Promise {\n    return this.usersRepository.findOneBy(property);\n  }\n\n  createQueryBuilder(alias: string) {\n    return this.usersRepository.createQueryBuilder(alias);\n  }\n\n  async findOne(options: FindOneOptions): Promise {\n    return this.usersRepository.findOne(options);\n  }\n  create(payload: { email: string; password: string }): User {\n    return this.usersRepository.create(payload);\n  }\n  async save(user: User): Promise {\n    return await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation.pipe.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/validation.pipe.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToInstance(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      const formattedErrors = {};\n      errors.forEach((e) => {\n        const messages = Object.values(e.constraints);\n        formattedErrors[e.property] = messages.flatMap((message) =>\n          // * the custom validation classes returns a comma separated string so we need to divide that string into an ordered list of substrings and assign it to the property\n          message.split(','),\n        );\n      });\n      throw new BadRequestException({\n        error: { code: 'invalid_body', detail: formattedErrors },\n        resource: null,\n      });\n    }\n    return value;\n  }\n\n  private toValidate(metatype): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/is-valid-password.ts\n            \n            class\n            IsValidPassword\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtStrategyRefreshToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-reset-password.strategy.ts\n            \n            injectable\n            JwtStrategyResetPassword\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/refreshToken.entity.ts\n            \n            entity\n            RefreshToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/refreshTokens.repository.ts\n            \n            class\n            RefreshTokensRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recovePasswordDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recoverPasswordBadRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/recover-password.ts\n            \n            variable\n            recoverPasswordSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/refresh-token.ts\n            \n            variable\n            refreshTokenUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/reset-password.ts\n            \n            variable\n            resetPasswordUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-in.ts\n            \n            variable\n            signInUnauthorizedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpBadRequestResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpCorrectPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/swagger/sign-up.ts\n            \n            variable\n            signUpSuccessfulResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.service.ts\n            \n            injectable\n            SendgridService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            class\n            UsersRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.0\n        \n            @sendgrid/mail : ^7.7.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            joi : ^17.6.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SendgridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_SendgridModule\n\n\n\ncluster_SendgridModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSendgridModule\n\nSendgridModule\n\nAuthModule -->\n\nSendgridModule->AuthModule\n\n\n\nAppModule -->\n\nSendgridModule->AppModule\n\n\n\n\n\nSendgridService \n\nSendgridService \n\nSendgridService  -->\n\nSendgridModule->SendgridService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSendgridService\n\nSendgridService\n\nSendgridModule -->\n\nSendgridService->SendgridModule\n\n\n\nAppModule -->\n\nSendgridService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategyRefreshToken\n\nJwtStrategyRefreshToken\n\nAuthModule -->\n\nJwtStrategyRefreshToken->AuthModule\n\n\n\n\n\nJwtStrategyResetPassword\n\nJwtStrategyResetPassword\n\nAuthModule -->\n\nJwtStrategyResetPassword->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            recovePasswordDescription   (src/.../recover-password.ts)\n                        \n                        \n                            recoverPasswordBadRequest   (src/.../recover-password.ts)\n                        \n                        \n                            recoverPasswordSuccessfulResponse   (src/.../recover-password.ts)\n                        \n                        \n                            refreshTokenDescription   (src/.../refresh-token.ts)\n                        \n                        \n                            refreshTokenSuccessfulResponse   (src/.../refresh-token.ts)\n                        \n                        \n                            refreshTokenUnauthorizedResponse   (src/.../refresh-token.ts)\n                        \n                        \n                            resetPasswordCorrectPayload   (src/.../reset-password.ts)\n                        \n                        \n                            resetPasswordDescription   (src/.../reset-password.ts)\n                        \n                        \n                            resetPasswordSuccessfulResponse   (src/.../reset-password.ts)\n                        \n                        \n                            resetPasswordUnauthorizedResponse   (src/.../reset-password.ts)\n                        \n                        \n                            signInCorrectPayload   (src/.../sign-in.ts)\n                        \n                        \n                            signInDescription   (src/.../sign-in.ts)\n                        \n                        \n                            signInSuccessfulResponse   (src/.../sign-in.ts)\n                        \n                        \n                            signInUnauthorizedResponse   (src/.../sign-in.ts)\n                        \n                        \n                            signUpBadRequestResponse   (src/.../sign-up.ts)\n                        \n                        \n                            signUpCorrectPayload   (src/.../sign-up.ts)\n                        \n                        \n                            signUpDescription   (src/.../sign-up.ts)\n                        \n                        \n                            signUpSuccessfulResponse   (src/.../sign-up.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/swagger/recover-password.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recovePasswordDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  summary: 'Send email with link to reset password',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recoverPasswordBadRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 400,\n  description: 'User does not exist',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recoverPasswordSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 202,\n  description: 'Email sent',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              to: { type: 'string' },\n              from: { type: 'string' },\n              subject: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/refresh-token.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        refreshTokenDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  summary: 'Create a new refresh and access token',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokenSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 202,\n  description: 'Token refreshed',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              accessToken: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokenUnauthorizedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 401,\n  description: 'User provided invalid old refresh token',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/reset-password.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resetPasswordCorrectPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  schema: {\n    type: 'object',\n    properties: {\n      password: { type: 'string' },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { summary: 'Update password user' }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 200,\n  description: 'User patched',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              id: { type: 'string' },\n              email: { type: 'string' },\n              resetPasswordToken: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordUnauthorizedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 401,\n  description: 'User provided invalid credentials',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/sign-in.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        signInCorrectPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  schema: {\n    type: 'object',\n    properties: {\n      email: { type: 'string' },\n      password: { type: 'string' },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signInDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { summary: 'Log in a registered user' }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signInSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 201,\n  description: 'User created',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              accessToken: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signInUnauthorizedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 401,\n  description: 'User provided invalid credentials',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/swagger/sign-up.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        signUpBadRequestResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 400,\n  description: 'User already exists',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              code: { type: 'string' },\n              detail: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpCorrectPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  schema: {\n    type: 'object',\n    properties: {\n      email: { type: 'string' },\n      password: { type: 'string' },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { summary: 'Create a new user' }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpSuccessfulResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  status: 201,\n  description: 'User created',\n  content: {\n    'application/json': {\n      schema: {\n        type: 'object',\n        properties: {\n          resource: {\n            type: 'object',\n            properties: {\n              id: { type: 'string' },\n              email: { type: 'string' },\n              password: { type: 'string' },\n              resetPasswordToken: { type: 'string' },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
